Index.PACKAGES = {"io.circe.generic.util.macros" : [{"name" : "io.circe.generic.util.macros.DerivationMacros", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DerivationMacros[RD, RE, RC, DD, DE, DC]) ⇒ Boolean, msg: ⇒ Any): DerivationMacros[RD, RE, RC, DD, DE, DC]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DerivationMacros[RD, RE, RC, DD, DE, DC]) ⇒ Boolean): DerivationMacros[RD, RE, RC, DD, DE, DC]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DerivationMacros[RD, RE, RC, DD, DE, DC]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DerivationMacros[RD, RE, RC, DD, DE, DC]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DerivationMacros[RD, RE, RC, DD, DE, DC], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DerivationMacros[RD, RE, RC, DD, DE, DC], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "constructCodec", "tail" : "(R: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.constructCodec", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#constructCodec[R](implicitR:DerivationMacros.this.c.WeakTypeTag[R]):DerivationMacros.this.c.Tree", "kind" : "def"}, {"label" : "constructEncoder", "tail" : "(R: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.constructEncoder", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#constructEncoder[R](implicitR:DerivationMacros.this.c.WeakTypeTag[R]):DerivationMacros.this.c.Tree", "kind" : "def"}, {"label" : "hlistEncoderParts", "tail" : "(members: Members): (List[scala.reflect.macros.blackbox.Context.Tree], scala.reflect.macros.blackbox.Context.Tree)", "member" : "io.circe.generic.util.macros.DerivationMacros.hlistEncoderParts", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#hlistEncoderParts(members:DerivationMacros.this.Members):(List[DerivationMacros.this.c.Tree],DerivationMacros.this.c.Tree)", "kind" : "def"}, {"label" : "constructDecoder", "tail" : "(R: scala.reflect.macros.blackbox.Context.WeakTypeTag[R]): scala.reflect.macros.blackbox.Context.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.constructDecoder", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#constructDecoder[R](implicitR:DerivationMacros.this.c.WeakTypeTag[R]):DerivationMacros.this.c.Tree", "kind" : "def"}, {"label" : "ReprDecoderUtils", "tail" : ": scala.reflect.macros.Universe.Symbol", "member" : "io.circe.generic.util.macros.DerivationMacros.ReprDecoderUtils", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#ReprDecoderUtils:DerivationMacros.this.c.universe.Symbol", "kind" : "val"}, {"label" : "encodeMethodArgs", "tail" : "(): List[scala.reflect.macros.Universe.Tree]", "member" : "io.circe.generic.util.macros.DerivationMacros.encodeMethodArgs", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#encodeMethodArgs:List[DerivationMacros.this.c.universe.Tree]", "kind" : "def"}, {"label" : "decodeAccumulatingMethodArgs", "tail" : "(): List[scala.reflect.macros.Universe.Tree]", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeAccumulatingMethodArgs", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#decodeAccumulatingMethodArgs:List[DerivationMacros.this.c.universe.Tree]", "kind" : "def"}, {"label" : "decodeMethodArgs", "tail" : "(): List[scala.reflect.macros.Universe.Tree]", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeMethodArgs", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#decodeMethodArgs:List[DerivationMacros.this.c.universe.Tree]", "kind" : "def"}, {"member" : "io.circe.generic.util.macros.DerivationMacros#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encodeSubtype", "tail" : "(name: String, encode: scala.reflect.macros.Universe.TermName, value: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.encodeSubtype", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#encodeSubtype(name:String,encode:DerivationMacros.this.c.universe.TermName,value:DerivationMacros.this.c.universe.TermName):DerivationMacros.this.c.universe.Tree", "kind" : "abstract def"}, {"label" : "encodeField", "tail" : "(name: String, encode: scala.reflect.macros.Universe.TermName, value: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.encodeField", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#encodeField(name:String,encode:DerivationMacros.this.c.universe.TermName,value:DerivationMacros.this.c.universe.TermName):DerivationMacros.this.c.universe.Tree", "kind" : "abstract def"}, {"label" : "decodeSubtypeAccumulating", "tail" : "(name: String, decode: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeSubtypeAccumulating", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#decodeSubtypeAccumulating(name:String,decode:DerivationMacros.this.c.universe.TermName):DerivationMacros.this.c.universe.Tree", "kind" : "abstract def"}, {"label" : "decodeSubtype", "tail" : "(name: String, decode: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeSubtype", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#decodeSubtype(name:String,decode:DerivationMacros.this.c.universe.TermName):DerivationMacros.this.c.universe.Tree", "kind" : "abstract def"}, {"label" : "decodeFieldAccumulating", "tail" : "(name: String, decode: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeFieldAccumulating", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#decodeFieldAccumulating(name:String,decode:DerivationMacros.this.c.universe.TermName):DerivationMacros.this.c.universe.Tree", "kind" : "abstract def"}, {"label" : "decodeField", "tail" : "(name: String, decode: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeField", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#decodeField(name:String,decode:DerivationMacros.this.c.universe.TermName):DerivationMacros.this.c.universe.Tree", "kind" : "abstract def"}, {"label" : "encodeMethodName", "tail" : "(): scala.reflect.macros.Universe.TermName", "member" : "io.circe.generic.util.macros.DerivationMacros.encodeMethodName", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#encodeMethodName:DerivationMacros.this.c.universe.TermName", "kind" : "abstract def"}, {"label" : "decodeAccumulatingMethodName", "tail" : "(): scala.reflect.macros.Universe.TermName", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeAccumulatingMethodName", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#decodeAccumulatingMethodName:DerivationMacros.this.c.universe.TermName", "kind" : "abstract def"}, {"label" : "decodeMethodName", "tail" : "(): scala.reflect.macros.Universe.TermName", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeMethodName", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#decodeMethodName:DerivationMacros.this.c.universe.TermName", "kind" : "abstract def"}, {"label" : "hnilReprCodec", "tail" : "(): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.hnilReprCodec", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#hnilReprCodec:DerivationMacros.this.c.universe.Tree", "kind" : "abstract def"}, {"label" : "hnilReprDecoder", "tail" : "(): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.hnilReprDecoder", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#hnilReprDecoder:DerivationMacros.this.c.universe.Tree", "kind" : "abstract def"}, {"label" : "DC", "tail" : "(): scala.reflect.macros.Universe.TypeTag[DC[_]]", "member" : "io.circe.generic.util.macros.DerivationMacros.DC", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#DC:DerivationMacros.this.c.universe.TypeTag[DC[_]]", "kind" : "abstract def"}, {"label" : "DE", "tail" : "(): scala.reflect.macros.Universe.TypeTag[DE[_]]", "member" : "io.circe.generic.util.macros.DerivationMacros.DE", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#DE:DerivationMacros.this.c.universe.TypeTag[DE[_]]", "kind" : "abstract def"}, {"label" : "DD", "tail" : "(): scala.reflect.macros.Universe.TypeTag[DD[_]]", "member" : "io.circe.generic.util.macros.DerivationMacros.DD", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#DD:DerivationMacros.this.c.universe.TypeTag[DD[_]]", "kind" : "abstract def"}, {"label" : "RC", "tail" : "(): scala.reflect.macros.Universe.TypeTag[RC[_]]", "member" : "io.circe.generic.util.macros.DerivationMacros.RC", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#RC:DerivationMacros.this.c.universe.TypeTag[RC[_]]", "kind" : "abstract def"}, {"label" : "RE", "tail" : "(): scala.reflect.macros.Universe.TypeTag[RE[_]]", "member" : "io.circe.generic.util.macros.DerivationMacros.RE", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#RE:DerivationMacros.this.c.universe.TypeTag[RE[_]]", "kind" : "abstract def"}, {"label" : "RD", "tail" : "(): scala.reflect.macros.Universe.TypeTag[RD[_]]", "member" : "io.circe.generic.util.macros.DerivationMacros.RD", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#RD:DerivationMacros.this.c.universe.TypeTag[RD[_]]", "kind" : "abstract def"}, {"label" : "c", "tail" : ": Context", "member" : "io.circe.generic.util.macros.DerivationMacros.c", "link" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html#c:scala.reflect.macros.blackbox.Context", "kind" : "abstract val"}], "class" : "io\/circe\/generic\/util\/macros\/DerivationMacros.html", "kind" : "class"}, {"name" : "io.circe.generic.util.macros.ExportMacros", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExportMacros) ⇒ Boolean, msg: ⇒ Any): ExportMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExportMacros) ⇒ Boolean): ExportMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExportMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExportMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExportMacros, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExportMacros, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "exportEncoder", "tail" : "(E: scala.reflect.macros.blackbox.Context.WeakTypeTag[E[_]], A: scala.reflect.macros.blackbox.Context.WeakTypeTag[A]): scala.reflect.macros.blackbox.Context.Expr[Exported[AsObject[A]]]", "member" : "io.circe.generic.util.macros.ExportMacros.exportEncoder", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#exportEncoder[E[x]<:io.circe.generic.encoding.DerivedAsObjectEncoder[x],A](implicitE:ExportMacros.this.c.WeakTypeTag[E[_]],implicitA:ExportMacros.this.c.WeakTypeTag[A]):ExportMacros.this.c.Expr[io.circe.export.Exported[io.circe.Encoder.AsObject[A]]]", "kind" : "final def"}, {"label" : "exportDecoder", "tail" : "(D: scala.reflect.macros.blackbox.Context.WeakTypeTag[D[_]], A: scala.reflect.macros.blackbox.Context.WeakTypeTag[A]): scala.reflect.macros.blackbox.Context.Expr[Exported[Decoder[A]]]", "member" : "io.circe.generic.util.macros.ExportMacros.exportDecoder", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#exportDecoder[D[x]<:io.circe.generic.decoding.DerivedDecoder[x],A](implicitD:ExportMacros.this.c.WeakTypeTag[D[_]],implicitA:ExportMacros.this.c.WeakTypeTag[A]):ExportMacros.this.c.Expr[io.circe.export.Exported[io.circe.Decoder[A]]]", "kind" : "final def"}, {"member" : "io.circe.generic.util.macros.ExportMacros#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": Context", "member" : "io.circe.generic.util.macros.ExportMacros.c", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#c:scala.reflect.macros.blackbox.Context", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/util\/macros\/ExportMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/generic\/util\/macros\/ExportMacros.html", "kind" : "class"}, {"name" : "io.circe.generic.util.macros.JsonCodecMacros", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonCodecMacros) ⇒ Boolean, msg: ⇒ Any): JsonCodecMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonCodecMacros) ⇒ Boolean): JsonCodecMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JsonCodecMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonCodecMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonCodecMacros, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonCodecMacros, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "constructJsonCodec", "tail" : "(annottees: scala.reflect.macros.Universe.Tree*): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.util.macros.JsonCodecMacros.constructJsonCodec", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#constructJsonCodec(annottees:JsonCodecMacros.this.c.universe.Tree*):JsonCodecMacros.this.c.universe.Tree", "kind" : "final def"}, {"member" : "io.circe.generic.util.macros.JsonCodecMacros#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deriveMethodPrefix", "tail" : "(): String", "member" : "io.circe.generic.util.macros.JsonCodecMacros.deriveMethodPrefix", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#deriveMethodPrefix:String", "kind" : "abstract def"}, {"label" : "semiautoObj", "tail" : "(): scala.reflect.macros.Universe.Symbol", "member" : "io.circe.generic.util.macros.JsonCodecMacros.semiautoObj", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#semiautoObj:JsonCodecMacros.this.c.universe.Symbol", "kind" : "abstract def"}, {"label" : "c", "tail" : ": Context", "member" : "io.circe.generic.util.macros.JsonCodecMacros.c", "link" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html#c:scala.reflect.macros.blackbox.Context", "kind" : "abstract val"}], "class" : "io\/circe\/generic\/util\/macros\/JsonCodecMacros.html", "kind" : "class"}], "io.circe.syntax" : [{"name" : "io.circe.syntax.EncoderOps", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EncoderOps[A]) ⇒ Boolean, msg: ⇒ Any): EncoderOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EncoderOps[A]) ⇒ Boolean): EncoderOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): EncoderOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EncoderOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EncoderOps[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EncoderOps[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asJsonObject", "tail" : "(encoder: AsObject[A]): JsonObject", "member" : "io.circe.syntax.EncoderOps.asJsonObject", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#asJsonObject(implicitencoder:io.circe.Encoder.AsObject[A]):io.circe.JsonObject", "kind" : "final def"}, {"label" : "asJson", "tail" : "(encoder: Encoder[A]): Json", "member" : "io.circe.syntax.EncoderOps.asJson", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#asJson(implicitencoder:io.circe.Encoder[A]):io.circe.Json", "kind" : "final def"}, {"member" : "io.circe.syntax.EncoderOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/circe\/syntax\/package$$EncoderOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/circe\/syntax\/package$$EncoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/circe\/syntax\/package$$EncoderOps.html", "kind" : "class"}, {"name" : "io.circe.syntax.KeyOps", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/syntax\/package$$KeyOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/syntax\/package$$KeyOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyOps[K]) ⇒ Boolean, msg: ⇒ Any): KeyOps[K]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/syntax\/package$$KeyOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyOps[K]) ⇒ Boolean): KeyOps[K]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/syntax\/package$$KeyOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): KeyOps[K]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/syntax\/package$$KeyOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): KeyOps[K]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/syntax\/package$$KeyOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (KeyOps[K], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/syntax\/package$$KeyOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (KeyOps[K], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/syntax\/package$$KeyOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : ":=", "tail" : "(a: A)(arg0: Encoder[A], keyEncoder: KeyEncoder[K]): (String, Json)", "member" : "io.circe.syntax.KeyOps.:=", "link" : "io\/circe\/syntax\/package$$KeyOps.html#:=[A](a:A)(implicitevidence$1:io.circe.Encoder[A],implicitkeyEncoder:io.circe.KeyEncoder[K]):(String,io.circe.Json)", "kind" : "final def"}, {"member" : "io.circe.syntax.KeyOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/circe\/syntax\/package$$KeyOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/circe\/syntax\/package$$KeyOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/syntax\/package$$KeyOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/syntax\/package$$KeyOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/circe\/syntax\/package$$KeyOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/circe\/syntax\/package$$KeyOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/circe\/syntax\/package$$KeyOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/circe\/syntax\/package$$KeyOps.html", "kind" : "class"}], "io.circe.shapes" : [{"name" : "io.circe.shapes.CoproductInstances", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/shapes\/CoproductInstances.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/shapes\/CoproductInstances.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CoproductInstances) ⇒ Boolean, msg: ⇒ Any): CoproductInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/CoproductInstances.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CoproductInstances) ⇒ Boolean): CoproductInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/CoproductInstances.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CoproductInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/CoproductInstances.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CoproductInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/CoproductInstances.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CoproductInstances, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/shapes\/CoproductInstances.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CoproductInstances, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/shapes\/CoproductInstances.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "encodeCCons", "tail" : "(encodeL: Encoder[L], encodeR: Encoder[R]): Encoder[:+:[L, R]]", "member" : "io.circe.shapes.CoproductInstances.encodeCCons", "link" : "io\/circe\/shapes\/CoproductInstances.html#encodeCCons[L,R<:shapeless.Coproduct](implicitencodeL:io.circe.Encoder[L],implicitencodeR:io.circe.Encoder[R]):io.circe.Encoder[L:+:R]", "kind" : "implicit final def"}, {"label" : "decodeCCons", "tail" : "(decodeL: Decoder[L], decodeR: Decoder[R]): Decoder[:+:[L, R]]", "member" : "io.circe.shapes.CoproductInstances.decodeCCons", "link" : "io\/circe\/shapes\/CoproductInstances.html#decodeCCons[L,R<:shapeless.Coproduct](implicitdecodeL:io.circe.Decoder[L],implicitdecodeR:io.circe.Decoder[R]):io.circe.Decoder[L:+:R]", "kind" : "implicit final def"}, {"label" : "encodeCNil", "tail" : ": Encoder[CNil]", "member" : "io.circe.shapes.CoproductInstances.encodeCNil", "link" : "io\/circe\/shapes\/CoproductInstances.html#encodeCNil:io.circe.Encoder[shapeless.CNil]", "kind" : "implicit final val"}, {"label" : "decodeCNil", "tail" : ": Decoder[CNil]", "member" : "io.circe.shapes.CoproductInstances.decodeCNil", "link" : "io\/circe\/shapes\/CoproductInstances.html#decodeCNil:io.circe.Decoder[shapeless.CNil]", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/shapes\/CoproductInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/shapes\/CoproductInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/shapes\/CoproductInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/shapes\/CoproductInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/shapes\/CoproductInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/shapes\/CoproductInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/shapes\/CoproductInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/CoproductInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/CoproductInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/CoproductInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/shapes\/CoproductInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/shapes\/CoproductInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/shapes\/CoproductInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/shapes\/CoproductInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/shapes\/CoproductInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/shapes\/CoproductInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/shapes\/CoproductInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/shapes\/CoproductInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/shapes\/CoproductInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/circe\/shapes\/CoproductInstances.html", "kind" : "trait"}, {"name" : "io.circe.shapes.HListInstances", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/shapes\/HListInstances.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/shapes\/HListInstances.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HListInstances) ⇒ Boolean, msg: ⇒ Any): HListInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/HListInstances.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HListInstances) ⇒ Boolean): HListInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/HListInstances.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): HListInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/HListInstances.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): HListInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/HListInstances.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (HListInstances, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/shapes\/HListInstances.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (HListInstances, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/shapes\/HListInstances.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "encodeSingletonHList", "tail" : "(encodeH: Encoder[H]): AsArray[::[H, HNil]]", "member" : "io.circe.shapes.HListInstances.encodeSingletonHList", "link" : "io\/circe\/shapes\/HListInstances.html#encodeSingletonHList[H](implicitencodeH:io.circe.Encoder[H]):io.circe.Encoder.AsArray[H::shapeless.HNil]", "kind" : "implicit final def"}, {"label" : "decodeSingletonHList", "tail" : "(decodeH: Decoder[H]): Decoder[::[H, HNil]]", "member" : "io.circe.shapes.HListInstances.decodeSingletonHList", "link" : "io\/circe\/shapes\/HListInstances.html#decodeSingletonHList[H](implicitdecodeH:io.circe.Decoder[H]):io.circe.Decoder[H::shapeless.HNil]", "kind" : "implicit final def"}, {"label" : "encodeHCons", "tail" : "(encodeH: Encoder[H], encodeT: AsArray[T]): AsArray[::[H, T]]", "member" : "io.circe.shapes.LowPriorityHListInstances.encodeHCons", "link" : "io\/circe\/shapes\/HListInstances.html#encodeHCons[H,T<:shapeless.HList](implicitencodeH:io.circe.Encoder[H],implicitencodeT:io.circe.Encoder.AsArray[T]):io.circe.Encoder.AsArray[H::T]", "kind" : "implicit final def"}, {"label" : "decodeHCons", "tail" : "(decodeH: Decoder[H], decodeT: Decoder[T]): Decoder[::[H, T]]", "member" : "io.circe.shapes.LowPriorityHListInstances.decodeHCons", "link" : "io\/circe\/shapes\/HListInstances.html#decodeHCons[H,T<:shapeless.HList](implicitdecodeH:io.circe.Decoder[H],implicitdecodeT:io.circe.Decoder[T]):io.circe.Decoder[H::T]", "kind" : "implicit final def"}, {"label" : "encodeHNil", "tail" : ": AsObject[HNil]", "member" : "io.circe.shapes.LowPriorityHListInstances.encodeHNil", "link" : "io\/circe\/shapes\/HListInstances.html#encodeHNil:io.circe.Encoder.AsObject[shapeless.HNil]", "kind" : "implicit final val"}, {"label" : "decodeHNil", "tail" : ": Decoder[HNil]", "member" : "io.circe.shapes.LowPriorityHListInstances.decodeHNil", "link" : "io\/circe\/shapes\/HListInstances.html#decodeHNil:io.circe.Decoder[shapeless.HNil]", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/shapes\/HListInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/shapes\/HListInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/shapes\/HListInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/shapes\/HListInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/shapes\/HListInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/shapes\/HListInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/shapes\/HListInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/HListInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/HListInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/HListInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/shapes\/HListInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/shapes\/HListInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/shapes\/HListInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/shapes\/HListInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/shapes\/HListInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/shapes\/HListInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/shapes\/HListInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/shapes\/HListInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/shapes\/HListInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/circe\/shapes\/HListInstances.html", "kind" : "trait"}, {"name" : "io.circe.shapes.LabelledCoproductInstances", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LabelledCoproductInstances) ⇒ Boolean, msg: ⇒ Any): LabelledCoproductInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LabelledCoproductInstances) ⇒ Boolean): LabelledCoproductInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LabelledCoproductInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LabelledCoproductInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LabelledCoproductInstances, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LabelledCoproductInstances, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "encodeSymbolLabelledCCons", "tail" : "(witK: Aux[K], encodeV: Encoder[V], encodeR: Encoder[R]): Encoder[:+:[FieldType[K, V], R]]", "member" : "io.circe.shapes.LabelledCoproductInstances.encodeSymbolLabelledCCons", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#encodeSymbolLabelledCCons[K<:Symbol,V,R<:shapeless.Coproduct](implicitwitK:shapeless.Witness.Aux[K],implicitencodeV:io.circe.Encoder[V],implicitencodeR:io.circe.Encoder[R]):io.circe.Encoder[shapeless.labelled.FieldType[K,V]:+:R]", "kind" : "implicit final def"}, {"label" : "decodeSymbolLabelledCCons", "tail" : "(witK: Aux[K], decodeV: Decoder[V], decodeR: Decoder[R]): Decoder[:+:[FieldType[K, V], R]]", "member" : "io.circe.shapes.LabelledCoproductInstances.decodeSymbolLabelledCCons", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#decodeSymbolLabelledCCons[K<:Symbol,V,R<:shapeless.Coproduct](implicitwitK:shapeless.Witness.Aux[K],implicitdecodeV:io.circe.Decoder[V],implicitdecodeR:io.circe.Decoder[R]):io.circe.Decoder[shapeless.labelled.FieldType[K,V]:+:R]", "kind" : "implicit final def"}, {"label" : "encodeLabelledCCons", "tail" : "(witK: Aux[K], eqW: Eq[W], encodeW: KeyEncoder[W], encodeV: Encoder[V], encodeR: Encoder[R]): Encoder[:+:[FieldType[K, V], R]]", "member" : "io.circe.shapes.LowPriorityLabelledCoproductInstances.encodeLabelledCCons", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#encodeLabelledCCons[K,W>:K,V,R<:shapeless.Coproduct](implicitwitK:shapeless.Witness.Aux[K],impliciteqW:cats.kernel.Eq[W],implicitencodeW:io.circe.KeyEncoder[W],implicitencodeV:io.circe.Encoder[V],implicitencodeR:io.circe.Encoder[R]):io.circe.Encoder[shapeless.labelled.FieldType[K,V]:+:R]", "kind" : "implicit final def"}, {"label" : "decodeLabelledCCons", "tail" : "(witK: Aux[K], widenK: Aux[K, W], eqW: Eq[W], decodeW: KeyDecoder[W], decodeV: Decoder[V], decodeR: Decoder[R]): Decoder[:+:[FieldType[K, V], R]]", "member" : "io.circe.shapes.LowPriorityLabelledCoproductInstances.decodeLabelledCCons", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#decodeLabelledCCons[K,W>:K,V,R<:shapeless.Coproduct](implicitwitK:shapeless.Witness.Aux[K],implicitwidenK:shapeless.Widen.Aux[K,W],impliciteqW:cats.kernel.Eq[W],implicitdecodeW:io.circe.KeyDecoder[W],implicitdecodeV:io.circe.Decoder[V],implicitdecodeR:io.circe.Decoder[R]):io.circe.Decoder[shapeless.labelled.FieldType[K,V]:+:R]", "kind" : "implicit final def"}, {"label" : "encodeCCons", "tail" : "(encodeL: Encoder[L], encodeR: Encoder[R]): Encoder[:+:[L, R]]", "member" : "io.circe.shapes.CoproductInstances.encodeCCons", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#encodeCCons[L,R<:shapeless.Coproduct](implicitencodeL:io.circe.Encoder[L],implicitencodeR:io.circe.Encoder[R]):io.circe.Encoder[L:+:R]", "kind" : "implicit final def"}, {"label" : "decodeCCons", "tail" : "(decodeL: Decoder[L], decodeR: Decoder[R]): Decoder[:+:[L, R]]", "member" : "io.circe.shapes.CoproductInstances.decodeCCons", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#decodeCCons[L,R<:shapeless.Coproduct](implicitdecodeL:io.circe.Decoder[L],implicitdecodeR:io.circe.Decoder[R]):io.circe.Decoder[L:+:R]", "kind" : "implicit final def"}, {"label" : "encodeCNil", "tail" : ": Encoder[CNil]", "member" : "io.circe.shapes.CoproductInstances.encodeCNil", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#encodeCNil:io.circe.Encoder[shapeless.CNil]", "kind" : "implicit final val"}, {"label" : "decodeCNil", "tail" : ": Decoder[CNil]", "member" : "io.circe.shapes.CoproductInstances.decodeCNil", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#decodeCNil:io.circe.Decoder[shapeless.CNil]", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/shapes\/LabelledCoproductInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/circe\/shapes\/LabelledCoproductInstances.html", "kind" : "trait"}, {"name" : "io.circe.shapes.LabelledHListInstances", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LabelledHListInstances) ⇒ Boolean, msg: ⇒ Any): LabelledHListInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LabelledHListInstances) ⇒ Boolean): LabelledHListInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LabelledHListInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LabelledHListInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LabelledHListInstances, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LabelledHListInstances, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "encodeSymbolLabelledHCons", "tail" : "(witK: Aux[K], encodeV: Encoder[V], encodeT: AsObject[T]): AsObject[::[FieldType[K, V], T]]", "member" : "io.circe.shapes.LabelledHListInstances.encodeSymbolLabelledHCons", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#encodeSymbolLabelledHCons[K<:Symbol,V,T<:shapeless.HList](implicitwitK:shapeless.Witness.Aux[K],implicitencodeV:io.circe.Encoder[V],implicitencodeT:io.circe.Encoder.AsObject[T]):io.circe.Encoder.AsObject[shapeless.labelled.FieldType[K,V]::T]", "kind" : "implicit final def"}, {"label" : "decodeSymbolLabelledHCons", "tail" : "(witK: Aux[K], decodeV: Decoder[V], decodeT: Decoder[T]): Decoder[::[FieldType[K, V], T]]", "member" : "io.circe.shapes.LabelledHListInstances.decodeSymbolLabelledHCons", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#decodeSymbolLabelledHCons[K<:Symbol,V,T<:shapeless.HList](implicitwitK:shapeless.Witness.Aux[K],implicitdecodeV:io.circe.Decoder[V],implicitdecodeT:io.circe.Decoder[T]):io.circe.Decoder[shapeless.labelled.FieldType[K,V]::T]", "kind" : "implicit final def"}, {"label" : "encodeLabelledHCons", "tail" : "(witK: Aux[K], widenK: Aux[K, W], encodeW: KeyEncoder[W], encodeV: Encoder[V], encodeT: AsObject[T]): AsObject[::[FieldType[K, V], T]]", "member" : "io.circe.shapes.LowPriorityLabelledHListInstances.encodeLabelledHCons", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#encodeLabelledHCons[K,W>:K,V,T<:shapeless.HList](implicitwitK:shapeless.Witness.Aux[K],implicitwidenK:shapeless.Widen.Aux[K,W],implicitencodeW:io.circe.KeyEncoder[W],implicitencodeV:io.circe.Encoder[V],implicitencodeT:io.circe.Encoder.AsObject[T]):io.circe.Encoder.AsObject[shapeless.labelled.FieldType[K,V]::T]", "kind" : "implicit final def"}, {"label" : "decodeLabelledHCons", "tail" : "(witK: Aux[K], widenK: Aux[K, W], eqW: Eq[W], decodeW: KeyDecoder[W], decodeV: Decoder[V], decodeT: Decoder[T]): Decoder[::[FieldType[K, V], T]]", "member" : "io.circe.shapes.LowPriorityLabelledHListInstances.decodeLabelledHCons", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#decodeLabelledHCons[K,W>:K,V,T<:shapeless.HList](implicitwitK:shapeless.Witness.Aux[K],implicitwidenK:shapeless.Widen.Aux[K,W],impliciteqW:cats.kernel.Eq[W],implicitdecodeW:io.circe.KeyDecoder[W],implicitdecodeV:io.circe.Decoder[V],implicitdecodeT:io.circe.Decoder[T]):io.circe.Decoder[shapeless.labelled.FieldType[K,V]::T]", "kind" : "implicit final def"}, {"label" : "encodeSingletonHList", "tail" : "(encodeH: Encoder[H]): AsArray[::[H, HNil]]", "member" : "io.circe.shapes.HListInstances.encodeSingletonHList", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#encodeSingletonHList[H](implicitencodeH:io.circe.Encoder[H]):io.circe.Encoder.AsArray[H::shapeless.HNil]", "kind" : "implicit final def"}, {"label" : "decodeSingletonHList", "tail" : "(decodeH: Decoder[H]): Decoder[::[H, HNil]]", "member" : "io.circe.shapes.HListInstances.decodeSingletonHList", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#decodeSingletonHList[H](implicitdecodeH:io.circe.Decoder[H]):io.circe.Decoder[H::shapeless.HNil]", "kind" : "implicit final def"}, {"label" : "encodeHCons", "tail" : "(encodeH: Encoder[H], encodeT: AsArray[T]): AsArray[::[H, T]]", "member" : "io.circe.shapes.LowPriorityHListInstances.encodeHCons", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#encodeHCons[H,T<:shapeless.HList](implicitencodeH:io.circe.Encoder[H],implicitencodeT:io.circe.Encoder.AsArray[T]):io.circe.Encoder.AsArray[H::T]", "kind" : "implicit final def"}, {"label" : "decodeHCons", "tail" : "(decodeH: Decoder[H], decodeT: Decoder[T]): Decoder[::[H, T]]", "member" : "io.circe.shapes.LowPriorityHListInstances.decodeHCons", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#decodeHCons[H,T<:shapeless.HList](implicitdecodeH:io.circe.Decoder[H],implicitdecodeT:io.circe.Decoder[T]):io.circe.Decoder[H::T]", "kind" : "implicit final def"}, {"label" : "encodeHNil", "tail" : ": AsObject[HNil]", "member" : "io.circe.shapes.LowPriorityHListInstances.encodeHNil", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#encodeHNil:io.circe.Encoder.AsObject[shapeless.HNil]", "kind" : "implicit final val"}, {"label" : "decodeHNil", "tail" : ": Decoder[HNil]", "member" : "io.circe.shapes.LowPriorityHListInstances.decodeHNil", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#decodeHNil:io.circe.Decoder[shapeless.HNil]", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/shapes\/LabelledHListInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/shapes\/LabelledHListInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/circe\/shapes\/LabelledHListInstances.html", "kind" : "trait"}, {"name" : "io.circe.shapes.SizedInstances", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/shapes\/SizedInstances.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/shapes\/SizedInstances.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SizedInstances) ⇒ Boolean, msg: ⇒ Any): SizedInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/SizedInstances.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SizedInstances) ⇒ Boolean): SizedInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/SizedInstances.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SizedInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/SizedInstances.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SizedInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/SizedInstances.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SizedInstances, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/shapes\/SizedInstances.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SizedInstances, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/shapes\/SizedInstances.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "encodeSized", "tail" : "(encodeCA: Encoder[C[A]]): Encoder[Sized[C[A], L]]", "member" : "io.circe.shapes.SizedInstances.encodeSized", "link" : "io\/circe\/shapes\/SizedInstances.html#encodeSized[L<:shapeless.Nat,C[_],A](implicitencodeCA:io.circe.Encoder[C[A]]):io.circe.Encoder[shapeless.Sized[C[A],L]]", "kind" : "implicit def"}, {"label" : "decodeSized", "tail" : "(decodeCA: Decoder[C[A]], ev: AdditiveCollection[C[A]], toInt: ToInt[L]): Decoder[Sized[C[A], L]]", "member" : "io.circe.shapes.SizedInstances.decodeSized", "link" : "io\/circe\/shapes\/SizedInstances.html#decodeSized[L<:shapeless.Nat,C[X]<:scala.collection.GenTraversable[X],A](implicitdecodeCA:io.circe.Decoder[C[A]],implicitev:shapeless.AdditiveCollection[C[A]],implicittoInt:shapeless.ops.nat.ToInt[L]):io.circe.Decoder[shapeless.Sized[C[A],L]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/shapes\/SizedInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/shapes\/SizedInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/shapes\/SizedInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/shapes\/SizedInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/shapes\/SizedInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/shapes\/SizedInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/shapes\/SizedInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/SizedInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/SizedInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/SizedInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/shapes\/SizedInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/shapes\/SizedInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/shapes\/SizedInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/shapes\/SizedInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/shapes\/SizedInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/shapes\/SizedInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/shapes\/SizedInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/shapes\/SizedInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/shapes\/SizedInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/circe\/shapes\/SizedInstances.html", "kind" : "trait"}, {"name" : "io.circe.shapes.TaggedInstances", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/shapes\/TaggedInstances.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/shapes\/TaggedInstances.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TaggedInstances) ⇒ Boolean, msg: ⇒ Any): TaggedInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/TaggedInstances.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TaggedInstances) ⇒ Boolean): TaggedInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/TaggedInstances.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TaggedInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/TaggedInstances.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TaggedInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/shapes\/TaggedInstances.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TaggedInstances, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/shapes\/TaggedInstances.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TaggedInstances, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/shapes\/TaggedInstances.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "taggedCharCodec", "tail" : "(d: Decoder[Char], e: Encoder[Char]): Codec[@@[Char, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedCharCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedCharCodec[T](implicitd:io.circe.Decoder[Char],implicite:io.circe.Encoder[Char]):io.circe.Codec[Char@@T]", "kind" : "implicit def"}, {"label" : "taggedBooleanCodec", "tail" : "(d: Decoder[Boolean], e: Encoder[Boolean]): Codec[@@[Boolean, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedBooleanCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedBooleanCodec[T](implicitd:io.circe.Decoder[Boolean],implicite:io.circe.Encoder[Boolean]):io.circe.Codec[Boolean@@T]", "kind" : "implicit def"}, {"label" : "taggedByteCodec", "tail" : "(d: Decoder[Byte], e: Encoder[Byte]): Codec[@@[Byte, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedByteCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedByteCodec[T](implicitd:io.circe.Decoder[Byte],implicite:io.circe.Encoder[Byte]):io.circe.Codec[Byte@@T]", "kind" : "implicit def"}, {"label" : "taggedShortCodec", "tail" : "(d: Decoder[Short], e: Encoder[Short]): Codec[@@[Short, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedShortCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedShortCodec[T](implicitd:io.circe.Decoder[Short],implicite:io.circe.Encoder[Short]):io.circe.Codec[Short@@T]", "kind" : "implicit def"}, {"label" : "taggedIntCodec", "tail" : "(d: Decoder[Int], e: Encoder[Int]): Codec[@@[Int, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedIntCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedIntCodec[T](implicitd:io.circe.Decoder[Int],implicite:io.circe.Encoder[Int]):io.circe.Codec[Int@@T]", "kind" : "implicit def"}, {"label" : "taggedLongCodec", "tail" : "(d: Decoder[Long], e: Encoder[Long]): Codec[@@[Long, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedLongCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedLongCodec[T](implicitd:io.circe.Decoder[Long],implicite:io.circe.Encoder[Long]):io.circe.Codec[Long@@T]", "kind" : "implicit def"}, {"label" : "taggedFloatCodec", "tail" : "(d: Decoder[Float], e: Encoder[Float]): Codec[@@[Float, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedFloatCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedFloatCodec[T](implicitd:io.circe.Decoder[Float],implicite:io.circe.Encoder[Float]):io.circe.Codec[Float@@T]", "kind" : "implicit def"}, {"label" : "taggedDoubleCodec", "tail" : "(d: Decoder[Double], e: Encoder[Double]): Codec[@@[Double, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedDoubleCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedDoubleCodec[T](implicitd:io.circe.Decoder[Double],implicite:io.circe.Encoder[Double]):io.circe.Codec[Double@@T]", "kind" : "implicit def"}, {"label" : "taggedStringCodec", "tail" : "(d: Decoder[String], e: Encoder[String]): Codec[@@[String, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedStringCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedStringCodec[T](implicitd:io.circe.Decoder[String],implicite:io.circe.Encoder[String]):io.circe.Codec[String@@T]", "kind" : "implicit def"}, {"label" : "taggedCodec", "tail" : "(arg0: Decoder[U], arg1: Encoder[U]): Codec[@@[U, T]]", "member" : "io.circe.shapes.TaggedInstances.taggedCodec", "link" : "io\/circe\/shapes\/TaggedInstances.html#taggedCodec[U,T](implicitevidence$1:io.circe.Decoder[U],implicitevidence$2:io.circe.Encoder[U]):io.circe.Codec[U@@T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/shapes\/TaggedInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/shapes\/TaggedInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/shapes\/TaggedInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/shapes\/TaggedInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/shapes\/TaggedInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/shapes\/TaggedInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/shapes\/TaggedInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/TaggedInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/TaggedInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/shapes\/TaggedInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/shapes\/TaggedInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/shapes\/TaggedInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/shapes\/TaggedInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/shapes\/TaggedInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/shapes\/TaggedInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/shapes\/TaggedInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/shapes\/TaggedInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/shapes\/TaggedInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/shapes\/TaggedInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/circe\/shapes\/TaggedInstances.html", "kind" : "trait"}], "io.circe.export" : [{"name" : "io.circe.export.Exported", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/export\/Exported.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/export\/Exported.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Exported[T]) ⇒ Boolean, msg: ⇒ Any): Exported[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/export\/Exported.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Exported[T]) ⇒ Boolean): Exported[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/export\/Exported.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Exported[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/export\/Exported.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Exported[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/export\/Exported.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Exported[T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/export\/Exported.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Exported[T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/export\/Exported.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.export.Exported#<init>", "error" : "unsupported entity"}, {"label" : "instance", "tail" : ": T", "member" : "io.circe.export.Exported.instance", "link" : "io\/circe\/export\/Exported.html#instance:T", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/circe\/export\/Exported.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/circe\/export\/Exported.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/export\/Exported.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/export\/Exported.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/circe\/export\/Exported.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/circe\/export\/Exported.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "io\/circe\/export\/Exported.html", "kind" : "case class"}], "io.circe.literal" : [{"name" : "io.circe.literal.JsonLiteralMacros", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonLiteralMacros) ⇒ Boolean, msg: ⇒ Any): JsonLiteralMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonLiteralMacros) ⇒ Boolean): JsonLiteralMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JsonLiteralMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonLiteralMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonLiteralMacros, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonLiteralMacros, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "jsonStringContext", "tail" : "(args: scala.reflect.macros.blackbox.Context.Expr[Any]*): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.JsonLiteralMacros.jsonStringContext", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#jsonStringContext(args:JsonLiteralMacros.this.c.Expr[Any]*):JsonLiteralMacros.this.c.universe.Tree", "kind" : "final def"}, {"member" : "io.circe.literal.JsonLiteralMacros#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": Context", "member" : "io.circe.literal.JsonLiteralMacros.c", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#c:scala.reflect.macros.blackbox.Context", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/literal\/JsonLiteralMacros.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/literal\/JsonLiteralMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/literal\/JsonLiteralMacros.html", "kind" : "class"}, {"name" : "io.circe.literal.JsonStringContext", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonStringContext) ⇒ Boolean, msg: ⇒ Any): JsonStringContext", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonStringContext) ⇒ Boolean): JsonStringContext", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JsonStringContext", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonStringContext", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonStringContext, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonStringContext, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "json", "tail" : "(args: Any*): Json", "member" : "io.circe.literal.JsonStringContext.json", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#json(args:Any*):io.circe.Json", "kind" : "final macro def"}, {"member" : "io.circe.literal.JsonStringContext#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/literal\/package$$JsonStringContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/literal\/package$$JsonStringContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/literal\/package$$JsonStringContext.html", "kind" : "class"}, {"name" : "io.circe.literal.LiteralInstanceMacros", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LiteralInstanceMacros) ⇒ Boolean, msg: ⇒ Any): LiteralInstanceMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LiteralInstanceMacros) ⇒ Boolean): LiteralInstanceMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LiteralInstanceMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LiteralInstanceMacros", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LiteralInstanceMacros, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LiteralInstanceMacros, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "encodeLiteralBoolean", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.encodeLiteralBoolean", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#encodeLiteralBoolean[S<:Boolean](implicitevidence$14:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "encodeLiteralChar", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.encodeLiteralChar", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#encodeLiteralChar[S<:Char](implicitevidence$13:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "encodeLiteralInt", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.encodeLiteralInt", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#encodeLiteralInt[S<:Int](implicitevidence$12:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "encodeLiteralLong", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.encodeLiteralLong", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#encodeLiteralLong[S<:Long](implicitevidence$11:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "encodeLiteralFloat", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.encodeLiteralFloat", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#encodeLiteralFloat[S<:Float](implicitevidence$10:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "encodeLiteralDouble", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.encodeLiteralDouble", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#encodeLiteralDouble[S<:Double](implicitevidence$9:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "encodeLiteralString", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.encodeLiteralString", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#encodeLiteralString[S<:String](implicitevidence$8:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "decodeLiteralBoolean", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.decodeLiteralBoolean", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#decodeLiteralBoolean[S<:Boolean](implicitevidence$7:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "decodeLiteralChar", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.decodeLiteralChar", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#decodeLiteralChar[S<:Char](implicitevidence$6:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "decodeLiteralInt", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.decodeLiteralInt", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#decodeLiteralInt[S<:Int](implicitevidence$5:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "decodeLiteralLong", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.decodeLiteralLong", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#decodeLiteralLong[S<:Long](implicitevidence$4:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "decodeLiteralFloat", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.decodeLiteralFloat", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#decodeLiteralFloat[S<:Float](implicitevidence$3:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "decodeLiteralDouble", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.decodeLiteralDouble", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#decodeLiteralDouble[S<:Double](implicitevidence$2:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"label" : "decodeLiteralString", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[S]): scala.reflect.macros.Universe.Tree", "member" : "io.circe.literal.LiteralInstanceMacros.decodeLiteralString", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#decodeLiteralString[S<:String](implicitevidence$1:LiteralInstanceMacros.this.c.WeakTypeTag[S]):LiteralInstanceMacros.this.c.universe.Tree", "kind" : "final def"}, {"member" : "io.circe.literal.LiteralInstanceMacros#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": Context", "member" : "io.circe.literal.LiteralInstanceMacros.c", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#c:scala.reflect.macros.whitebox.Context", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/literal\/LiteralInstanceMacros.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/literal\/LiteralInstanceMacros.html", "kind" : "class"}], "io.circe.jawn" : [{"name" : "io.circe.jawn.CirceSupportParser", "shortDescription" : "", "object" : "io\/circe\/jawn\/CirceSupportParser$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/jawn\/CirceSupportParser.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/jawn\/CirceSupportParser.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CirceSupportParser) ⇒ Boolean, msg: ⇒ Any): CirceSupportParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/jawn\/CirceSupportParser.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CirceSupportParser) ⇒ Boolean): CirceSupportParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/jawn\/CirceSupportParser.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CirceSupportParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/jawn\/CirceSupportParser.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CirceSupportParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/jawn\/CirceSupportParser.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CirceSupportParser, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/jawn\/CirceSupportParser.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CirceSupportParser, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/jawn\/CirceSupportParser.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "facade", "tail" : ": Facade[Json]", "member" : "io.circe.jawn.CirceSupportParser.facade", "link" : "io\/circe\/jawn\/CirceSupportParser.html#facade:org.typelevel.jawn.Facade[io.circe.Json]", "kind" : "implicit final val"}, {"member" : "io.circe.jawn.CirceSupportParser#<init>", "error" : "unsupported entity"}, {"label" : "async", "tail" : "(mode: Mode): AsyncParser[Json]", "member" : "org.typelevel.jawn.SupportParser.async", "link" : "io\/circe\/jawn\/CirceSupportParser.html#async(mode:org.typelevel.jawn.AsyncParser.Mode):org.typelevel.jawn.AsyncParser[J]", "kind" : "def"}, {"label" : "parseFromByteArray", "tail" : "(src: Array[Byte]): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromByteArray", "link" : "io\/circe\/jawn\/CirceSupportParser.html#parseFromByteArray(src:Array[Byte]):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromByteBuffer", "tail" : "(buf: ByteBuffer): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromByteBuffer", "link" : "io\/circe\/jawn\/CirceSupportParser.html#parseFromByteBuffer(buf:java.nio.ByteBuffer):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromChannel", "tail" : "(ch: ReadableByteChannel): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromChannel", "link" : "io\/circe\/jawn\/CirceSupportParser.html#parseFromChannel(ch:java.nio.channels.ReadableByteChannel):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromFile", "tail" : "(file: File): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromFile", "link" : "io\/circe\/jawn\/CirceSupportParser.html#parseFromFile(file:java.io.File):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromPath", "tail" : "(path: String): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromPath", "link" : "io\/circe\/jawn\/CirceSupportParser.html#parseFromPath(path:String):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromCharSequence", "tail" : "(cs: CharSequence): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromCharSequence", "link" : "io\/circe\/jawn\/CirceSupportParser.html#parseFromCharSequence(cs:CharSequence):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromString", "tail" : "(s: String): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromString", "link" : "io\/circe\/jawn\/CirceSupportParser.html#parseFromString(s:String):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseUnsafe", "tail" : "(s: String): Json", "member" : "org.typelevel.jawn.SupportParser.parseUnsafe", "link" : "io\/circe\/jawn\/CirceSupportParser.html#parseUnsafe(s:String):J", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/jawn\/CirceSupportParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/jawn\/CirceSupportParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/jawn\/CirceSupportParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/jawn\/CirceSupportParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/jawn\/CirceSupportParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/jawn\/CirceSupportParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/jawn\/CirceSupportParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/CirceSupportParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/CirceSupportParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/CirceSupportParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/jawn\/CirceSupportParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/jawn\/CirceSupportParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/jawn\/CirceSupportParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/jawn\/CirceSupportParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/jawn\/CirceSupportParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/jawn\/CirceSupportParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/jawn\/CirceSupportParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/jawn\/CirceSupportParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/jawn\/CirceSupportParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "facade", "tail" : ": Facade[Json]", "member" : "io.circe.jawn.CirceSupportParser.facade", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#facade:org.typelevel.jawn.Facade[io.circe.Json]", "kind" : "implicit final val"}, {"label" : "async", "tail" : "(mode: Mode): AsyncParser[Json]", "member" : "org.typelevel.jawn.SupportParser.async", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#async(mode:org.typelevel.jawn.AsyncParser.Mode):org.typelevel.jawn.AsyncParser[J]", "kind" : "def"}, {"label" : "parseFromByteArray", "tail" : "(src: Array[Byte]): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromByteArray", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#parseFromByteArray(src:Array[Byte]):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromByteBuffer", "tail" : "(buf: ByteBuffer): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromByteBuffer", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#parseFromByteBuffer(buf:java.nio.ByteBuffer):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromChannel", "tail" : "(ch: ReadableByteChannel): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromChannel", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#parseFromChannel(ch:java.nio.channels.ReadableByteChannel):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromFile", "tail" : "(file: File): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromFile", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#parseFromFile(file:java.io.File):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromPath", "tail" : "(path: String): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromPath", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#parseFromPath(path:String):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromCharSequence", "tail" : "(cs: CharSequence): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromCharSequence", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#parseFromCharSequence(cs:CharSequence):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseFromString", "tail" : "(s: String): Try[Json]", "member" : "org.typelevel.jawn.SupportParser.parseFromString", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#parseFromString(s:String):scala.util.Try[J]", "kind" : "def"}, {"label" : "parseUnsafe", "tail" : "(s: String): Json", "member" : "org.typelevel.jawn.SupportParser.parseUnsafe", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#parseUnsafe(s:String):J", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/jawn\/CirceSupportParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/jawn\/CirceSupportParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/jawn\/CirceSupportParser.html", "kind" : "class"}, {"name" : "io.circe.jawn.JawnParser", "shortDescription" : "", "object" : "io\/circe\/jawn\/JawnParser$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/jawn\/JawnParser.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/jawn\/JawnParser.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JawnParser) ⇒ Boolean, msg: ⇒ Any): JawnParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/jawn\/JawnParser.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JawnParser) ⇒ Boolean): JawnParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/jawn\/JawnParser.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JawnParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/jawn\/JawnParser.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JawnParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/jawn\/JawnParser.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JawnParser, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/jawn\/JawnParser.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JawnParser, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/jawn\/JawnParser.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "decodeByteArrayAccumulating", "tail" : "(bytes: Array[Byte])(arg0: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeByteArrayAccumulating", "link" : "io\/circe\/jawn\/JawnParser.html#decodeByteArrayAccumulating[A](bytes:Array[Byte])(implicitevidence$12:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodeByteArray", "tail" : "(bytes: Array[Byte])(arg0: Decoder[A]): Either[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeByteArray", "link" : "io\/circe\/jawn\/JawnParser.html#decodeByteArray[A](bytes:Array[Byte])(implicitevidence$11:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodeByteBufferAccumulating", "tail" : "(buffer: ByteBuffer)(arg0: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeByteBufferAccumulating", "link" : "io\/circe\/jawn\/JawnParser.html#decodeByteBufferAccumulating[A](buffer:java.nio.ByteBuffer)(implicitevidence$10:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodeByteBuffer", "tail" : "(buffer: ByteBuffer)(arg0: Decoder[A]): Either[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeByteBuffer", "link" : "io\/circe\/jawn\/JawnParser.html#decodeByteBuffer[A](buffer:java.nio.ByteBuffer)(implicitevidence$9:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "parseByteArray", "tail" : "(bytes: Array[Byte]): Either[ParsingFailure, Json]", "member" : "io.circe.jawn.JawnParser.parseByteArray", "link" : "io\/circe\/jawn\/JawnParser.html#parseByteArray(bytes:Array[Byte]):Either[io.circe.ParsingFailure,io.circe.Json]", "kind" : "final def"}, {"label" : "decodeChannelAccumulating", "tail" : "(ch: ReadableByteChannel)(arg0: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeChannelAccumulating", "link" : "io\/circe\/jawn\/JawnParser.html#decodeChannelAccumulating[A](ch:java.nio.channels.ReadableByteChannel)(implicitevidence$8:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodeChannel", "tail" : "(ch: ReadableByteChannel)(arg0: Decoder[A]): Either[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeChannel", "link" : "io\/circe\/jawn\/JawnParser.html#decodeChannel[A](ch:java.nio.channels.ReadableByteChannel)(implicitevidence$7:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodeFileAccumulating", "tail" : "(file: File)(arg0: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeFileAccumulating", "link" : "io\/circe\/jawn\/JawnParser.html#decodeFileAccumulating[A](file:java.io.File)(implicitevidence$6:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodeFile", "tail" : "(file: File)(arg0: Decoder[A]): Either[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeFile", "link" : "io\/circe\/jawn\/JawnParser.html#decodeFile[A](file:java.io.File)(implicitevidence$5:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodePathAccumulating", "tail" : "(path: Path)(arg0: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.jawn.JawnParser.decodePathAccumulating", "link" : "io\/circe\/jawn\/JawnParser.html#decodePathAccumulating[A](path:java.nio.file.Path)(implicitevidence$4:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodePath", "tail" : "(path: Path)(arg0: Decoder[A]): Either[Error, A]", "member" : "io.circe.jawn.JawnParser.decodePath", "link" : "io\/circe\/jawn\/JawnParser.html#decodePath[A](path:java.nio.file.Path)(implicitevidence$3:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodeCharSequenceAccumulating", "tail" : "(cs: CharSequence)(arg0: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeCharSequenceAccumulating", "link" : "io\/circe\/jawn\/JawnParser.html#decodeCharSequenceAccumulating[A](cs:CharSequence)(implicitevidence$2:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decodeCharSequence", "tail" : "(cs: CharSequence)(arg0: Decoder[A]): Either[Error, A]", "member" : "io.circe.jawn.JawnParser.decodeCharSequence", "link" : "io\/circe\/jawn\/JawnParser.html#decodeCharSequence[A](cs:CharSequence)(implicitevidence$1:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "parseByteBuffer", "tail" : "(buffer: ByteBuffer): Either[ParsingFailure, Json]", "member" : "io.circe.jawn.JawnParser.parseByteBuffer", "link" : "io\/circe\/jawn\/JawnParser.html#parseByteBuffer(buffer:java.nio.ByteBuffer):Either[io.circe.ParsingFailure,io.circe.Json]", "kind" : "final def"}, {"label" : "parseChannel", "tail" : "(ch: ReadableByteChannel): Either[ParsingFailure, Json]", "member" : "io.circe.jawn.JawnParser.parseChannel", "link" : "io\/circe\/jawn\/JawnParser.html#parseChannel(ch:java.nio.channels.ReadableByteChannel):Either[io.circe.ParsingFailure,io.circe.Json]", "kind" : "final def"}, {"label" : "parseFile", "tail" : "(file: File): Either[ParsingFailure, Json]", "member" : "io.circe.jawn.JawnParser.parseFile", "link" : "io\/circe\/jawn\/JawnParser.html#parseFile(file:java.io.File):Either[io.circe.ParsingFailure,io.circe.Json]", "kind" : "final def"}, {"label" : "parsePath", "tail" : "(path: Path): Either[ParsingFailure, Json]", "member" : "io.circe.jawn.JawnParser.parsePath", "link" : "io\/circe\/jawn\/JawnParser.html#parsePath(path:java.nio.file.Path):Either[io.circe.ParsingFailure,io.circe.Json]", "kind" : "final def"}, {"label" : "parseCharSequence", "tail" : "(cs: CharSequence): Either[ParsingFailure, Json]", "member" : "io.circe.jawn.JawnParser.parseCharSequence", "link" : "io\/circe\/jawn\/JawnParser.html#parseCharSequence(cs:CharSequence):Either[io.circe.ParsingFailure,io.circe.Json]", "kind" : "final def"}, {"label" : "parse", "tail" : "(str: String): Either[ParsingFailure, Json]", "member" : "io.circe.jawn.JawnParser.parse", "link" : "io\/circe\/jawn\/JawnParser.html#parse(str:String):Either[io.circe.ParsingFailure,io.circe.Json]", "kind" : "final def"}, {"member" : "io.circe.jawn.JawnParser#<init>", "error" : "unsupported entity"}, {"member" : "io.circe.jawn.JawnParser#<init>", "error" : "unsupported entity"}, {"label" : "decodeAccumulating", "tail" : "(input: String)(arg0: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.Parser.decodeAccumulating", "link" : "io\/circe\/jawn\/JawnParser.html#decodeAccumulating[A](input:String)(implicitevidence$2:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decode", "tail" : "(input: String)(arg0: Decoder[A]): Either[Error, A]", "member" : "io.circe.Parser.decode", "link" : "io\/circe\/jawn\/JawnParser.html#decode[A](input:String)(implicitevidence$1:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "finishDecodeAccumulating", "tail" : "(input: Either[ParsingFailure, Json])(decoder: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.Parser.finishDecodeAccumulating", "link" : "io\/circe\/jawn\/JawnParser.html#finishDecodeAccumulating[A](input:Either[io.circe.ParsingFailure,io.circe.Json])(implicitdecoder:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "finishDecode", "tail" : "(input: Either[ParsingFailure, Json])(decoder: Decoder[A]): Either[Error, A]", "member" : "io.circe.Parser.finishDecode", "link" : "io\/circe\/jawn\/JawnParser.html#finishDecode[A](input:Either[io.circe.ParsingFailure,io.circe.Json])(implicitdecoder:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/jawn\/JawnParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/jawn\/JawnParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/jawn\/JawnParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/jawn\/JawnParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/jawn\/JawnParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/jawn\/JawnParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/jawn\/JawnParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/JawnParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/JawnParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/JawnParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/jawn\/JawnParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/jawn\/JawnParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/jawn\/JawnParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/jawn\/JawnParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/jawn\/JawnParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/jawn\/JawnParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/jawn\/JawnParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/jawn\/JawnParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/jawn\/JawnParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(allowDuplicateKeys: Boolean): JawnParser", "member" : "io.circe.jawn.JawnParser.apply", "link" : "io\/circe\/jawn\/JawnParser$.html#apply(allowDuplicateKeys:Boolean):io.circe.jawn.JawnParser", "kind" : "def"}, {"label" : "apply", "tail" : "(maxValueSize: Int): JawnParser", "member" : "io.circe.jawn.JawnParser.apply", "link" : "io\/circe\/jawn\/JawnParser$.html#apply(maxValueSize:Int):io.circe.jawn.JawnParser", "kind" : "def"}, {"label" : "apply", "tail" : "(maxValueSize: Int, allowDuplicateKeys: Boolean): JawnParser", "member" : "io.circe.jawn.JawnParser.apply", "link" : "io\/circe\/jawn\/JawnParser$.html#apply(maxValueSize:Int,allowDuplicateKeys:Boolean):io.circe.jawn.JawnParser", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/jawn\/JawnParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/jawn\/JawnParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/jawn\/JawnParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/jawn\/JawnParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/jawn\/JawnParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/jawn\/JawnParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/jawn\/JawnParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/JawnParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/JawnParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/jawn\/JawnParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/jawn\/JawnParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/jawn\/JawnParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/jawn\/JawnParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/jawn\/JawnParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/jawn\/JawnParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/jawn\/JawnParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/jawn\/JawnParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/jawn\/JawnParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/jawn\/JawnParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/jawn\/JawnParser.html", "kind" : "class"}], "scodec" : [], "io.circe.hygiene" : [{"name" : "io.circe.hygiene.Bar", "shortDescription" : "", "object" : "io\/circe\/hygiene\/Bar$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/hygiene\/Bar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/hygiene\/Bar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/hygiene\/Bar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/hygiene\/Bar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/hygiene\/Bar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/hygiene\/Bar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/hygiene\/Bar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/Bar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/Bar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/Bar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/hygiene\/Bar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/hygiene\/Bar$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/hygiene\/Bar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/hygiene\/Bar$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/hygiene\/Bar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/hygiene\/Bar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/hygiene\/Bar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.circe.hygiene.Base", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/hygiene\/Base.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/hygiene\/Base.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Base) ⇒ Boolean, msg: ⇒ Any): Base", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/hygiene\/Base.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Base) ⇒ Boolean): Base", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/hygiene\/Base.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Base", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/hygiene\/Base.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Base", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/hygiene\/Base.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Base, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/hygiene\/Base.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Base, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/hygiene\/Base.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/hygiene\/Base.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/hygiene\/Base.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/hygiene\/Base.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/hygiene\/Base.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/hygiene\/Base.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/hygiene\/Base.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/hygiene\/Base.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/Base.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/Base.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/Base.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/hygiene\/Base.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/hygiene\/Base.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/hygiene\/Base.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/hygiene\/Base.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/hygiene\/Base.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/hygiene\/Base.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/hygiene\/Base.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/hygiene\/Base.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/hygiene\/Base.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/circe\/hygiene\/Base.html", "kind" : "trait"}, {"name" : "io.circe.hygiene.Foo", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/hygiene\/Foo.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/hygiene\/Foo.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Foo) ⇒ Boolean, msg: ⇒ Any): Foo", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/hygiene\/Foo.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Foo) ⇒ Boolean): Foo", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/hygiene\/Foo.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Foo", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/hygiene\/Foo.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Foo", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/hygiene\/Foo.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Foo, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/hygiene\/Foo.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Foo, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/hygiene\/Foo.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.hygiene.Foo#<init>", "error" : "unsupported entity"}, {"label" : "b", "tail" : ": List[Boolean]", "member" : "io.circe.hygiene.Foo.b", "link" : "io\/circe\/hygiene\/Foo.html#b:List[Boolean]", "kind" : "val"}, {"label" : "o", "tail" : ": Option[Double]", "member" : "io.circe.hygiene.Foo.o", "link" : "io\/circe\/hygiene\/Foo.html#o:Option[Double]", "kind" : "val"}, {"label" : "i", "tail" : ": Int", "member" : "io.circe.hygiene.Foo.i", "link" : "io\/circe\/hygiene\/Foo.html#i:Int", "kind" : "val"}, {"label" : "s", "tail" : ": String", "member" : "io.circe.hygiene.Foo.s", "link" : "io\/circe\/hygiene\/Foo.html#s:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/hygiene\/Foo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/hygiene\/Foo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/hygiene\/Foo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/hygiene\/Foo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/hygiene\/Foo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/hygiene\/Foo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/hygiene\/Foo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/Foo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/Foo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/Foo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/hygiene\/Foo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/hygiene\/Foo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/hygiene\/Foo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/hygiene\/Foo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/hygiene\/Foo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/hygiene\/Foo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/hygiene\/Foo.html", "kind" : "case class"}, {"name" : "io.circe.hygiene.HygieneTests", "shortDescription" : "Compilation tests for macro hygiene.", "object" : "io\/circe\/hygiene\/HygieneTests$.html", "members_object" : [{"label" : "cd", "tail" : ": Decoder[Char('a')]", "member" : "io.circe.hygiene.HygieneTests.cd", "link" : "io\/circe\/hygiene\/HygieneTests$.html#cd:io.circe.Decoder[Char('a')]", "kind" : "val"}, {"label" : "ce", "tail" : ": Encoder[Char('a')]", "member" : "io.circe.hygiene.HygieneTests.ce", "link" : "io\/circe\/hygiene\/HygieneTests$.html#ce:io.circe.Encoder[Char('a')]", "kind" : "val"}, {"label" : "id", "tail" : ": Decoder[Int(1)]", "member" : "io.circe.hygiene.HygieneTests.id", "link" : "io\/circe\/hygiene\/HygieneTests$.html#id:io.circe.Decoder[Int(1)]", "kind" : "val"}, {"label" : "ie", "tail" : ": Encoder[Int(1)]", "member" : "io.circe.hygiene.HygieneTests.ie", "link" : "io\/circe\/hygiene\/HygieneTests$.html#ie:io.circe.Encoder[Int(1)]", "kind" : "val"}, {"label" : "ld", "tail" : ": Decoder[Long(1L)]", "member" : "io.circe.hygiene.HygieneTests.ld", "link" : "io\/circe\/hygiene\/HygieneTests$.html#ld:io.circe.Decoder[Long(1L)]", "kind" : "val"}, {"label" : "le", "tail" : ": Encoder[Long(1L)]", "member" : "io.circe.hygiene.HygieneTests.le", "link" : "io\/circe\/hygiene\/HygieneTests$.html#le:io.circe.Encoder[Long(1L)]", "kind" : "val"}, {"label" : "fd", "tail" : ": Decoder[Float(1.0)]", "member" : "io.circe.hygiene.HygieneTests.fd", "link" : "io\/circe\/hygiene\/HygieneTests$.html#fd:io.circe.Decoder[Float(1.0)]", "kind" : "val"}, {"label" : "fe", "tail" : ": Encoder[Float(1.0)]", "member" : "io.circe.hygiene.HygieneTests.fe", "link" : "io\/circe\/hygiene\/HygieneTests$.html#fe:io.circe.Encoder[Float(1.0)]", "kind" : "val"}, {"label" : "dd", "tail" : ": Decoder[Double(1.0)]", "member" : "io.circe.hygiene.HygieneTests.dd", "link" : "io\/circe\/hygiene\/HygieneTests$.html#dd:io.circe.Decoder[Double(1.0)]", "kind" : "val"}, {"label" : "de", "tail" : ": Encoder[Double(1.0)]", "member" : "io.circe.hygiene.HygieneTests.de", "link" : "io\/circe\/hygiene\/HygieneTests$.html#de:io.circe.Encoder[Double(1.0)]", "kind" : "val"}, {"label" : "db", "tail" : ": Decoder[Boolean(true)]", "member" : "io.circe.hygiene.HygieneTests.db", "link" : "io\/circe\/hygiene\/HygieneTests$.html#db:io.circe.Decoder[Boolean(true)]", "kind" : "val"}, {"label" : "be", "tail" : ": Encoder[Boolean(true)]", "member" : "io.circe.hygiene.HygieneTests.be", "link" : "io\/circe\/hygiene\/HygieneTests$.html#be:io.circe.Encoder[Boolean(true)]", "kind" : "val"}, {"label" : "sd", "tail" : ": Decoder[String(\"foo\")]", "member" : "io.circe.hygiene.HygieneTests.sd", "link" : "io\/circe\/hygiene\/HygieneTests$.html#sd:io.circe.Decoder[String(\"foo\")]", "kind" : "val"}, {"label" : "se", "tail" : ": Encoder[String(\"foo\")]", "member" : "io.circe.hygiene.HygieneTests.se", "link" : "io\/circe\/hygiene\/HygieneTests$.html#se:io.circe.Encoder[String(\"foo\")]", "kind" : "val"}, {"label" : "json", "tail" : ": Json", "member" : "io.circe.hygiene.HygieneTests.json", "link" : "io\/circe\/hygiene\/HygieneTests$.html#json:io.circe.Json", "kind" : "val"}, {"label" : "derivedBaseDecoder", "tail" : ": Decoder[Base]", "member" : "io.circe.hygiene.HygieneTests.derivedBaseDecoder", "link" : "io\/circe\/hygiene\/HygieneTests$.html#derivedBaseDecoder:io.circe.Decoder[io.circe.hygiene.Base]", "kind" : "val"}, {"label" : "autoDerivedBaseDecoder", "tail" : ": Decoder[Base]", "member" : "io.circe.hygiene.HygieneTests.autoDerivedBaseDecoder", "link" : "io\/circe\/hygiene\/HygieneTests$.html#autoDerivedBaseDecoder:io.circe.Decoder[io.circe.hygiene.Base]", "kind" : "val"}, {"label" : "derivedBaseEncoder", "tail" : ": Encoder[Base]", "member" : "io.circe.hygiene.HygieneTests.derivedBaseEncoder", "link" : "io\/circe\/hygiene\/HygieneTests$.html#derivedBaseEncoder:io.circe.Encoder[io.circe.hygiene.Base]", "kind" : "val"}, {"label" : "autoDerivedBaseEncoder", "tail" : ": Encoder[Base]", "member" : "io.circe.hygiene.HygieneTests.autoDerivedBaseEncoder", "link" : "io\/circe\/hygiene\/HygieneTests$.html#autoDerivedBaseEncoder:io.circe.Encoder[io.circe.hygiene.Base]", "kind" : "val"}, {"label" : "Unit", "tail" : "", "member" : "io.circe.hygiene.HygieneTests.Unit", "link" : "io\/circe\/hygiene\/HygieneTests$.html#UnitextendsAnyRef", "kind" : "trait"}, {"label" : "String", "tail" : "", "member" : "io.circe.hygiene.HygieneTests.String", "link" : "io\/circe\/hygiene\/HygieneTests$.html#StringextendsAnyRef", "kind" : "trait"}, {"label" : "Any", "tail" : "", "member" : "io.circe.hygiene.HygieneTests.Any", "link" : "io\/circe\/hygiene\/HygieneTests$.html#AnyextendsAnyRef", "kind" : "trait"}, {"label" : "scala", "tail" : "", "member" : "io.circe.hygiene.HygieneTests.scala", "link" : "io\/circe\/hygiene\/HygieneTests$.html#scalaextendsAnyRef", "kind" : "trait"}, {"label" : "Unit", "tail" : ": scala.Unit", "member" : "io.circe.hygiene.HygieneTests.Unit", "link" : "io\/circe\/hygiene\/HygieneTests$.html#Unit:Unit", "kind" : "val"}, {"label" : "String", "tail" : ": scala.Unit", "member" : "io.circe.hygiene.HygieneTests.String", "link" : "io\/circe\/hygiene\/HygieneTests$.html#String:Unit", "kind" : "val"}, {"label" : "Any", "tail" : ": scala.Unit", "member" : "io.circe.hygiene.HygieneTests.Any", "link" : "io\/circe\/hygiene\/HygieneTests$.html#Any:Unit", "kind" : "val"}, {"label" : "scala", "tail" : ": scala.Unit", "member" : "io.circe.hygiene.HygieneTests.scala", "link" : "io\/circe\/hygiene\/HygieneTests$.html#scala:Unit", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/hygiene\/HygieneTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/hygiene\/HygieneTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: scala.Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/hygiene\/HygieneTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: scala.Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/hygiene\/HygieneTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/hygiene\/HygieneTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/hygiene\/HygieneTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): scala.Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/hygiene\/HygieneTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): scala.Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/HygieneTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): scala.Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/HygieneTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): scala.Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/hygiene\/HygieneTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): scala.Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/hygiene\/HygieneTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): scala.Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/hygiene\/HygieneTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): java.lang.String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/hygiene\/HygieneTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/hygiene\/HygieneTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: scala.Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/hygiene\/HygieneTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/hygiene\/HygieneTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/hygiene\/HygieneTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/hygiene\/HygieneTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/hygiene\/HygieneTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "io.circe.numbers.testing" : [{"name" : "io.circe.numbers.testing.IntegralString", "shortDescription" : "An integral string with an optional leading minus sign and between 1 and 25digits (inclusive).", "object" : "io\/circe\/numbers\/testing\/IntegralString$.html", "members_object" : [{"label" : "arbitraryIntegralString", "tail" : ": Arbitrary[IntegralString]", "member" : "io.circe.numbers.testing.IntegralString.arbitraryIntegralString", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#arbitraryIntegralString:org.scalacheck.Arbitrary[io.circe.numbers.testing.IntegralString]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/numbers\/testing\/IntegralString$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntegralString) ⇒ Boolean, msg: ⇒ Any): IntegralString", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntegralString) ⇒ Boolean): IntegralString", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IntegralString", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntegralString", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntegralString, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntegralString, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.numbers.testing.IntegralString#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": String", "member" : "io.circe.numbers.testing.IntegralString.value", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#value:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/numbers\/testing\/IntegralString.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/numbers\/testing\/IntegralString.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/numbers\/testing\/IntegralString.html", "kind" : "case class"}, {"name" : "io.circe.numbers.testing.JsonNumberString", "shortDescription" : "An arbitrary JSON number, represented as a string.", "object" : "io\/circe\/numbers\/testing\/JsonNumberString$.html", "members_object" : [{"label" : "arbitraryJsonNumberString", "tail" : ": Arbitrary[JsonNumberString]", "member" : "io.circe.numbers.testing.JsonNumberString.arbitraryJsonNumberString", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#arbitraryJsonNumberString:org.scalacheck.Arbitrary[io.circe.numbers.testing.JsonNumberString]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/numbers\/testing\/JsonNumberString$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonNumberString) ⇒ Boolean, msg: ⇒ Any): JsonNumberString", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonNumberString) ⇒ Boolean): JsonNumberString", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JsonNumberString", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonNumberString", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonNumberString, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonNumberString, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.numbers.testing.JsonNumberString#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": String", "member" : "io.circe.numbers.testing.JsonNumberString.value", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#value:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/numbers\/testing\/JsonNumberString.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/numbers\/testing\/JsonNumberString.html", "kind" : "case class"}], "io.circe.pointer" : [{"name" : "io.circe.pointer.Pointer", "shortDescription" : "Represents a JSON Pointer that may be either absolute or relative.", "object" : "io\/circe\/pointer\/Pointer$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/pointer\/Pointer.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/pointer\/Pointer.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Pointer) ⇒ Boolean, msg: ⇒ Any): Pointer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/Pointer.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Pointer) ⇒ Boolean): Pointer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/Pointer.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Pointer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/Pointer.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Pointer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/Pointer.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Pointer, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/pointer\/Pointer.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Pointer, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/pointer\/Pointer.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "get", "tail" : "(input: Json): Either[PointerFailure, Json]", "member" : "io.circe.pointer.Pointer.get", "link" : "io\/circe\/pointer\/Pointer.html#get(input:io.circe.Json):Either[io.circe.pointer.PointerFailure,io.circe.Json]", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "io\/circe\/pointer\/Pointer.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (ACursor) ⇒ A): (ACursor) ⇒ A", "member" : "scala.Function1.andThen", "link" : "io\/circe\/pointer\/Pointer.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ ACursor): (A) ⇒ ACursor", "member" : "scala.Function1.compose", "link" : "io\/circe\/pointer\/Pointer.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/pointer\/Pointer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/pointer\/Pointer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/pointer\/Pointer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/pointer\/Pointer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/pointer\/Pointer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/pointer\/Pointer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/pointer\/Pointer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/Pointer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/Pointer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/Pointer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/pointer\/Pointer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/pointer\/Pointer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/pointer\/Pointer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/pointer\/Pointer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/pointer\/Pointer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/pointer\/Pointer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/pointer\/Pointer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/pointer\/Pointer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "asRelative", "tail" : "(): Option[Relative]", "member" : "io.circe.pointer.Pointer.asRelative", "link" : "io\/circe\/pointer\/Pointer.html#asRelative:Option[io.circe.pointer.Pointer.Relative]", "kind" : "abstract def"}, {"label" : "asAbsolute", "tail" : "(): Option[Absolute]", "member" : "io.circe.pointer.Pointer.asAbsolute", "link" : "io\/circe\/pointer\/Pointer.html#asAbsolute:Option[io.circe.pointer.Pointer.Absolute]", "kind" : "abstract def"}, {"label" : "getOption", "tail" : "(input: Json): Option[Json]", "member" : "io.circe.pointer.Pointer.getOption", "link" : "io\/circe\/pointer\/Pointer.html#getOption(input:io.circe.Json):Option[io.circe.Json]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(v1: ACursor): ACursor", "member" : "scala.Function1.apply", "link" : "io\/circe\/pointer\/Pointer.html#apply(v1:T1):R", "kind" : "abstract def"}], "members_object" : [{"label" : "Absolute", "tail" : "", "member" : "io.circe.pointer.Pointer.Absolute", "link" : "io\/circe\/pointer\/Pointer$.html#AbsoluteextendsPointer", "kind" : "final class"}, {"label" : "hashPointer", "tail" : ": Hash[Pointer]", "member" : "io.circe.pointer.Pointer.hashPointer", "link" : "io\/circe\/pointer\/Pointer$.html#hashPointer:cats.kernel.Hash[io.circe.pointer.Pointer]", "kind" : "implicit val"}, {"label" : "Relative", "tail" : "", "member" : "io.circe.pointer.Pointer.Relative", "link" : "io\/circe\/pointer\/Pointer$.html#Relative", "kind" : "object"}, {"label" : "Relative", "tail" : "", "member" : "io.circe.pointer.Pointer.Relative", "link" : "io\/circe\/pointer\/Pointer$.html#RelativeextendsPointer", "kind" : "sealed abstract class"}, {"label" : "parseRelative", "tail" : "(input: String): Either[PointerSyntaxError, Relative]", "member" : "io.circe.pointer.Pointer.parseRelative", "link" : "io\/circe\/pointer\/Pointer$.html#parseRelative(input:String):Either[io.circe.pointer.PointerSyntaxError,io.circe.pointer.Pointer.Relative]", "kind" : "def"}, {"label" : "parseAbsolute", "tail" : "(input: String): Either[PointerSyntaxError, Absolute]", "member" : "io.circe.pointer.Pointer.parseAbsolute", "link" : "io\/circe\/pointer\/Pointer$.html#parseAbsolute(input:String):Either[io.circe.pointer.PointerSyntaxError,io.circe.pointer.Pointer.Absolute]", "kind" : "def"}, {"label" : "parse", "tail" : "(input: String): Either[PointerSyntaxError, Pointer]", "member" : "io.circe.pointer.Pointer.parse", "link" : "io\/circe\/pointer\/Pointer$.html#parse(input:String):Either[io.circe.pointer.PointerSyntaxError,io.circe.pointer.Pointer]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/pointer\/Pointer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/pointer\/Pointer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/pointer\/Pointer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/pointer\/Pointer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/pointer\/Pointer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/pointer\/Pointer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/pointer\/Pointer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/Pointer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/Pointer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/Pointer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/pointer\/Pointer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/pointer\/Pointer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/pointer\/Pointer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/pointer\/Pointer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/pointer\/Pointer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/pointer\/Pointer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/pointer\/Pointer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/pointer\/Pointer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/pointer\/Pointer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/pointer\/Pointer.html", "kind" : "class"}, {"name" : "io.circe.pointer.PointerFailure", "shortDescription" : "", "members_case class" : [{"label" : "getStackTraceString", "tail" : "(): String", "member" : "scala.Predef.RichException.getStackTraceString", "link" : "io\/circe\/pointer\/PointerFailure.html#getStackTraceString:String", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/pointer\/PointerFailure.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/pointer\/PointerFailure.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PointerFailure) ⇒ Boolean, msg: ⇒ Any): PointerFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/PointerFailure.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PointerFailure) ⇒ Boolean): PointerFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/PointerFailure.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PointerFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/PointerFailure.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PointerFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/PointerFailure.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PointerFailure, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/pointer\/PointerFailure.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PointerFailure, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/pointer\/PointerFailure.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "io.circe.pointer.PointerFailure.fillInStackTrace", "link" : "io\/circe\/pointer\/PointerFailure.html#fillInStackTrace():Throwable", "kind" : "final def"}, {"member" : "io.circe.pointer.PointerFailure#<init>", "error" : "unsupported entity"}, {"label" : "history", "tail" : ": List[CursorOp]", "member" : "io.circe.pointer.PointerFailure.history", "link" : "io\/circe\/pointer\/PointerFailure.html#history:List[io.circe.CursorOp]", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "io\/circe\/pointer\/PointerFailure.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "io\/circe\/pointer\/PointerFailure.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "io\/circe\/pointer\/PointerFailure.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "io\/circe\/pointer\/PointerFailure.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/pointer\/PointerFailure.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/pointer\/PointerFailure.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/pointer\/PointerFailure.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "io\/circe\/pointer\/PointerFailure.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "io\/circe\/pointer\/PointerFailure.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "io\/circe\/pointer\/PointerFailure.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "io\/circe\/pointer\/PointerFailure.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "io\/circe\/pointer\/PointerFailure.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/pointer\/PointerFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/pointer\/PointerFailure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/pointer\/PointerFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/pointer\/PointerFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/pointer\/PointerFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/pointer\/PointerFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/pointer\/PointerFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/PointerFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/PointerFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/PointerFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/pointer\/PointerFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/pointer\/PointerFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/pointer\/PointerFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/pointer\/PointerFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/pointer\/PointerFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/pointer\/PointerFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/pointer\/PointerFailure.html", "kind" : "case class"}, {"name" : "io.circe.pointer.PointerSyntaxError", "shortDescription" : "", "members_case class" : [{"label" : "getStackTraceString", "tail" : "(): String", "member" : "scala.Predef.RichException.getStackTraceString", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#getStackTraceString:String", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PointerSyntaxError) ⇒ Boolean, msg: ⇒ Any): PointerSyntaxError", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PointerSyntaxError) ⇒ Boolean): PointerSyntaxError", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PointerSyntaxError", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PointerSyntaxError", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PointerSyntaxError, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PointerSyntaxError, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "io.circe.pointer.PointerSyntaxError.getMessage", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#getMessage():String", "kind" : "final def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "io.circe.pointer.PointerSyntaxError.fillInStackTrace", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#fillInStackTrace():Throwable", "kind" : "final def"}, {"member" : "io.circe.pointer.PointerSyntaxError#<init>", "error" : "unsupported entity"}, {"label" : "expected", "tail" : ": String", "member" : "io.circe.pointer.PointerSyntaxError.expected", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#expected:String", "kind" : "val"}, {"label" : "position", "tail" : ": Int", "member" : "io.circe.pointer.PointerSyntaxError.position", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#position:Int", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/pointer\/PointerSyntaxError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/pointer\/PointerSyntaxError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/pointer\/PointerSyntaxError.html", "kind" : "case class"}], "scodec.bits" : [], "io.circe" : [{"name" : "io.circe.ACursor", "shortDescription" : "A zipper that represents a position in a JSON document and supports navigation and modification.", "object" : "io\/circe\/ACursor$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/ACursor.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/ACursor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACursor) ⇒ Boolean, msg: ⇒ Any): ACursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/ACursor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACursor) ⇒ Boolean): ACursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/ACursor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/ACursor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/ACursor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACursor, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/ACursor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACursor, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/ACursor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "replay", "tail" : "(history: List[CursorOp]): ACursor", "member" : "io.circe.ACursor.replay", "link" : "io\/circe\/ACursor.html#replay(history:List[io.circe.CursorOp]):io.circe.ACursor", "kind" : "final def"}, {"label" : "replayOne", "tail" : "(op: CursorOp): ACursor", "member" : "io.circe.ACursor.replayOne", "link" : "io\/circe\/ACursor.html#replayOne(op:io.circe.CursorOp):io.circe.ACursor", "kind" : "final def"}, {"label" : "getOrElse", "tail" : "(k: String)(fallback: ⇒ A)(d: Decoder[A]): Result[A]", "member" : "io.circe.ACursor.getOrElse", "link" : "io\/circe\/ACursor.html#getOrElse[A](k:String)(fallback:=>A)(implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "get", "tail" : "(k: String)(d: Decoder[A]): Result[A]", "member" : "io.circe.ACursor.get", "link" : "io\/circe\/ACursor.html#get[A](k:String)(implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "as", "tail" : "(d: Decoder[A]): Result[A]", "member" : "io.circe.ACursor.as", "link" : "io\/circe\/ACursor.html#as[A](implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "key", "tail" : "(): Option[String]", "member" : "io.circe.ACursor.key", "link" : "io\/circe\/ACursor.html#key:Option[String]", "kind" : "def"}, {"label" : "index", "tail" : "(): Option[Int]", "member" : "io.circe.ACursor.index", "link" : "io\/circe\/ACursor.html#index:Option[Int]", "kind" : "def"}, {"label" : "set", "tail" : "(j: Json): ACursor", "member" : "io.circe.ACursor.set", "link" : "io\/circe\/ACursor.html#set(j:io.circe.Json):io.circe.ACursor", "kind" : "final def"}, {"label" : "root", "tail" : "(): HCursor", "member" : "io.circe.ACursor.root", "link" : "io\/circe\/ACursor.html#root:io.circe.HCursor", "kind" : "def"}, {"label" : "failed", "tail" : "(): Boolean", "member" : "io.circe.ACursor.failed", "link" : "io\/circe\/ACursor.html#failed:Boolean", "kind" : "final def"}, {"label" : "history", "tail" : "(): List[CursorOp]", "member" : "io.circe.ACursor.history", "link" : "io\/circe\/ACursor.html#history:List[io.circe.CursorOp]", "kind" : "final def"}, {"member" : "io.circe.ACursor#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/ACursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/ACursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/ACursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/ACursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/ACursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/ACursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/ACursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ACursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ACursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ACursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/ACursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/ACursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/ACursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/ACursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/ACursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/ACursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/ACursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/ACursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/ACursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "downField", "tail" : "(k: String): ACursor", "member" : "io.circe.ACursor.downField", "link" : "io\/circe\/ACursor.html#downField(k:String):io.circe.ACursor", "kind" : "abstract def"}, {"label" : "field", "tail" : "(k: String): ACursor", "member" : "io.circe.ACursor.field", "link" : "io\/circe\/ACursor.html#field(k:String):io.circe.ACursor", "kind" : "abstract def"}, {"label" : "downN", "tail" : "(n: Int): ACursor", "member" : "io.circe.ACursor.downN", "link" : "io\/circe\/ACursor.html#downN(n:Int):io.circe.ACursor", "kind" : "abstract def"}, {"label" : "downArray", "tail" : "(): ACursor", "member" : "io.circe.ACursor.downArray", "link" : "io\/circe\/ACursor.html#downArray:io.circe.ACursor", "kind" : "abstract def"}, {"label" : "right", "tail" : "(): ACursor", "member" : "io.circe.ACursor.right", "link" : "io\/circe\/ACursor.html#right:io.circe.ACursor", "kind" : "abstract def"}, {"label" : "left", "tail" : "(): ACursor", "member" : "io.circe.ACursor.left", "link" : "io\/circe\/ACursor.html#left:io.circe.ACursor", "kind" : "abstract def"}, {"label" : "up", "tail" : "(): ACursor", "member" : "io.circe.ACursor.up", "link" : "io\/circe\/ACursor.html#up:io.circe.ACursor", "kind" : "abstract def"}, {"label" : "delete", "tail" : "(): ACursor", "member" : "io.circe.ACursor.delete", "link" : "io\/circe\/ACursor.html#delete:io.circe.ACursor", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(): Option[Iterable[String]]", "member" : "io.circe.ACursor.keys", "link" : "io\/circe\/ACursor.html#keys:Option[Iterable[String]]", "kind" : "abstract def"}, {"label" : "values", "tail" : "(): Option[Iterable[Json]]", "member" : "io.circe.ACursor.values", "link" : "io\/circe\/ACursor.html#values:Option[Iterable[io.circe.Json]]", "kind" : "abstract def"}, {"label" : "withFocusM", "tail" : "(f: (Json) ⇒ F[Json])(F: Applicative[F]): F[ACursor]", "member" : "io.circe.ACursor.withFocusM", "link" : "io\/circe\/ACursor.html#withFocusM[F[_]](f:io.circe.Json=>F[io.circe.Json])(implicitF:cats.Applicative[F]):F[io.circe.ACursor]", "kind" : "abstract def"}, {"label" : "withFocus", "tail" : "(f: (Json) ⇒ Json): ACursor", "member" : "io.circe.ACursor.withFocus", "link" : "io\/circe\/ACursor.html#withFocus(f:io.circe.Json=>io.circe.Json):io.circe.ACursor", "kind" : "abstract def"}, {"label" : "top", "tail" : "(): Option[Json]", "member" : "io.circe.ACursor.top", "link" : "io\/circe\/ACursor.html#top:Option[io.circe.Json]", "kind" : "abstract def"}, {"label" : "success", "tail" : "(): Option[HCursor]", "member" : "io.circe.ACursor.success", "link" : "io\/circe\/ACursor.html#success:Option[io.circe.HCursor]", "kind" : "abstract def"}, {"label" : "succeeded", "tail" : "(): Boolean", "member" : "io.circe.ACursor.succeeded", "link" : "io\/circe\/ACursor.html#succeeded:Boolean", "kind" : "abstract def"}, {"label" : "focus", "tail" : "(): Option[Json]", "member" : "io.circe.ACursor.focus", "link" : "io\/circe\/ACursor.html#focus:Option[io.circe.Json]", "kind" : "abstract def"}], "members_object" : [{"label" : "eqACursor", "tail" : ": Eq[ACursor]", "member" : "io.circe.ACursor.eqACursor", "link" : "io\/circe\/ACursor$.html#eqACursor:cats.kernel.Eq[io.circe.ACursor]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/ACursor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/ACursor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/ACursor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/ACursor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/ACursor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/ACursor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/ACursor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ACursor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ACursor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ACursor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/ACursor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/ACursor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/ACursor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/ACursor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/ACursor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/ACursor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/ACursor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/ACursor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/ACursor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/ACursor.html", "kind" : "class"}, {"name" : "io.circe.Codec", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/Codec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/Codec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Codec[A]) ⇒ Boolean, msg: ⇒ Any): Codec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Codec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Codec[A]) ⇒ Boolean): Codec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Codec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Codec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Codec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Codec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Codec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Codec[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/Codec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Codec[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/Codec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "iemap", "tail" : "(f: (A) ⇒ Either[String, B])(g: (B) ⇒ A): Codec[B]", "member" : "io.circe.Codec.iemap", "link" : "io\/circe\/Codec.html#iemap[B](f:A=>Either[String,B])(g:B=>A):io.circe.Codec[B]", "kind" : "def"}, {"label" : "mapJson", "tail" : "(f: (Json) ⇒ Json): Encoder[A]", "member" : "io.circe.Encoder.mapJson", "link" : "io\/circe\/Codec.html#mapJson(f:io.circe.Json=>io.circe.Json):io.circe.Encoder[A]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) ⇒ A): Encoder[B]", "member" : "io.circe.Encoder.contramap", "link" : "io\/circe\/Codec.html#contramap[B](f:B=>A):io.circe.Encoder[B]", "kind" : "final def"}, {"label" : "emapTry", "tail" : "(f: (A) ⇒ Try[B]): Decoder[B]", "member" : "io.circe.Decoder.emapTry", "link" : "io\/circe\/Codec.html#emapTry[B](f:A=>scala.util.Try[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "emap", "tail" : "(f: (A) ⇒ Either[String, B]): Decoder[B]", "member" : "io.circe.Decoder.emap", "link" : "io\/circe\/Codec.html#emap[B](f:A=>Either[String,B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "at", "tail" : "(field: String): Decoder[A]", "member" : "io.circe.Decoder.at", "link" : "io\/circe\/Codec.html#at(field:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "prepare", "tail" : "(f: (ACursor) ⇒ ACursor): Decoder[A]", "member" : "io.circe.Decoder.prepare", "link" : "io\/circe\/Codec.html#prepare(f:io.circe.ACursor=>io.circe.ACursor):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "either", "tail" : "(decodeB: Decoder[B]): Decoder[Either[A, B]]", "member" : "io.circe.Decoder.either", "link" : "io\/circe\/Codec.html#either[B](decodeB:io.circe.Decoder[B]):io.circe.Decoder[Either[A,B]]", "kind" : "final def"}, {"label" : "or", "tail" : "(d: ⇒ Decoder[AA]): Decoder[AA]", "member" : "io.circe.Decoder.or", "link" : "io\/circe\/Codec.html#or[AA>:A](d:=>io.circe.Decoder[AA]):io.circe.Decoder[AA]", "kind" : "final def"}, {"label" : "product", "tail" : "(fb: Decoder[B]): Decoder[(A, B)]", "member" : "io.circe.Decoder.product", "link" : "io\/circe\/Codec.html#product[B](fb:io.circe.Decoder[B]):io.circe.Decoder[(A,B)]", "kind" : "final def"}, {"label" : "kleisli", "tail" : "(): Kleisli[Result, HCursor, A]", "member" : "io.circe.Decoder.kleisli", "link" : "io\/circe\/Codec.html#kleisli:cats.data.Kleisli[io.circe.Decoder.Result,io.circe.HCursor,A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(pred: (HCursor) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/Codec.html#validate(pred:io.circe.HCursor=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(errors: (HCursor) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/Codec.html#validate(errors:io.circe.HCursor=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(errors: (A) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/Codec.html#ensure(errors:A=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(pred: (A) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/Codec.html#ensure(pred:A=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "withErrorMessage", "tail" : "(message: String): Decoder[A]", "member" : "io.circe.Decoder.withErrorMessage", "link" : "io\/circe\/Codec.html#withErrorMessage(message:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "handleErrorWith", "tail" : "(f: (DecodingFailure) ⇒ Decoder[A]): Decoder[A]", "member" : "io.circe.Decoder.handleErrorWith", "link" : "io\/circe\/Codec.html#handleErrorWith(f:io.circe.DecodingFailure=>io.circe.Decoder[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Decoder[B]): Decoder[B]", "member" : "io.circe.Decoder.flatMap", "link" : "io\/circe\/Codec.html#flatMap[B](f:A=>io.circe.Decoder[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Decoder[B]", "member" : "io.circe.Decoder.map", "link" : "io\/circe\/Codec.html#map[B](f:A=>B):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "decodeJson", "tail" : "(j: Json): Result[A]", "member" : "io.circe.Decoder.decodeJson", "link" : "io\/circe\/Codec.html#decodeJson(j:io.circe.Json):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "tryDecodeAccumulating", "tail" : "(c: ACursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.tryDecodeAccumulating", "link" : "io\/circe\/Codec.html#tryDecodeAccumulating(c:io.circe.ACursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "tryDecode", "tail" : "(c: ACursor): Result[A]", "member" : "io.circe.Decoder.tryDecode", "link" : "io\/circe\/Codec.html#tryDecode(c:io.circe.ACursor):io.circe.Decoder.Result[A]", "kind" : "def"}, {"label" : "decodeAccumulating", "tail" : "(c: HCursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.decodeAccumulating", "link" : "io\/circe\/Codec.html#decodeAccumulating(c:io.circe.HCursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Codec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Codec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Codec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Codec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Codec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Codec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Codec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Codec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Codec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Codec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Codec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Codec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Codec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Codec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Codec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Codec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Codec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Codec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Codec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): Json", "member" : "io.circe.Encoder.apply", "link" : "io\/circe\/Codec.html#apply(a:A):io.circe.Json", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(c: HCursor): Result[A]", "member" : "io.circe.Decoder.apply", "link" : "io\/circe\/Codec.html#apply(c:io.circe.HCursor):io.circe.Decoder.Result[A]", "kind" : "abstract def"}], "shortDescription" : "A type class that provides back and forth conversion between values of type Aand the Json format.", "object" : "io\/circe\/Codec$.html", "members_object" : [{"label" : "AsObject", "tail" : "", "member" : "io.circe.Codec.AsObject", "link" : "io\/circe\/Codec$.html#AsObject", "kind" : "object"}, {"label" : "AsObject", "tail" : "", "member" : "io.circe.Codec.AsObject", "link" : "io\/circe\/Codec$.html#AsObject[A]extendsCodec.AsRoot[A]withEncoder.AsObject[A]", "kind" : "trait"}, {"label" : "AsArray", "tail" : "", "member" : "io.circe.Codec.AsArray", "link" : "io\/circe\/Codec$.html#AsArray", "kind" : "object"}, {"label" : "AsArray", "tail" : "", "member" : "io.circe.Codec.AsArray", "link" : "io\/circe\/Codec$.html#AsArray[A]extendsCodec.AsRoot[A]withEncoder.AsArray[A]", "kind" : "trait"}, {"label" : "AsRoot", "tail" : "", "member" : "io.circe.Codec.AsRoot", "link" : "io\/circe\/Codec$.html#AsRoot", "kind" : "object"}, {"label" : "AsRoot", "tail" : "", "member" : "io.circe.Codec.AsRoot", "link" : "io\/circe\/Codec$.html#AsRoot[A]extendsCodec[A]withEncoder.AsRoot[A]", "kind" : "trait"}, {"label" : "from", "tail" : "(decodeA: Decoder[A], encodeA: Encoder[A]): Codec[A]", "member" : "io.circe.Codec.from", "link" : "io\/circe\/Codec$.html#from[A](decodeA:io.circe.Decoder[A],encodeA:io.circe.Encoder[A]):io.circe.Codec[A]", "kind" : "def"}, {"label" : "codecForValidated", "tail" : "(failureKey: String, successKey: String)(decodeE: Decoder[E], encodeE: Encoder[E], decodeA: Decoder[A], encodeA: Encoder[A]): AsObject[Validated[E, A]]", "member" : "io.circe.Codec.codecForValidated", "link" : "io\/circe\/Codec$.html#codecForValidated[E,A](failureKey:String,successKey:String)(implicitdecodeE:io.circe.Decoder[E],implicitencodeE:io.circe.Encoder[E],implicitdecodeA:io.circe.Decoder[A],implicitencodeA:io.circe.Encoder[A]):io.circe.Codec.AsObject[cats.data.Validated[E,A]]", "kind" : "final def"}, {"label" : "codecForEither", "tail" : "(leftKey: String, rightKey: String)(decodeA: Decoder[A], encodeA: Encoder[A], decodeB: Decoder[B], encodeB: Encoder[B]): AsObject[Either[A, B]]", "member" : "io.circe.Codec.codecForEither", "link" : "io\/circe\/Codec$.html#codecForEither[A,B](leftKey:String,rightKey:String)(implicitdecodeA:io.circe.Decoder[A],implicitencodeA:io.circe.Encoder[A],implicitdecodeB:io.circe.Decoder[B],implicitencodeB:io.circe.Encoder[B]):io.circe.Codec.AsObject[Either[A,B]]", "kind" : "final def"}, {"label" : "codecInvariant", "tail" : ": Invariant[Codec]", "member" : "io.circe.Codec.codecInvariant", "link" : "io\/circe\/Codec$.html#codecInvariant:cats.Invariant[io.circe.Codec]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(instance: Codec[A]): Codec[A]", "member" : "io.circe.Codec.apply", "link" : "io\/circe\/Codec$.html#apply[A](implicitinstance:io.circe.Codec[A]):io.circe.Codec[A]", "kind" : "def"}, {"label" : "codecForEnumeration", "tail" : "(enumeration: E): Codec[EnumerationCodecs.codecForEnumeration.E.Value]", "member" : "io.circe.EnumerationCodecs.codecForEnumeration", "link" : "io\/circe\/Codec$.html#codecForEnumeration[E<:Enumeration](enumeration:E):io.circe.Codec[E#Value]", "kind" : "final def"}, {"label" : "forProduct22", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String, nameA19: String, nameA20: String, nameA21: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ A)(g: (A) ⇒ Product22[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], decodeA19: Decoder[A19], decodeA20: Decoder[A20], decodeA21: Decoder[A21], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18], encodeA19: Encoder[A19], encodeA20: Encoder[A20], encodeA21: Encoder[A21]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct22", "link" : "io\/circe\/Codec$.html#forProduct22[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String,nameA19:String,nameA20:String,nameA21:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>A)(g:A=>Product22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitdecodeA19:io.circe.Decoder[A19],implicitdecodeA20:io.circe.Decoder[A20],implicitdecodeA21:io.circe.Decoder[A21],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18],implicitencodeA19:io.circe.Encoder[A19],implicitencodeA20:io.circe.Encoder[A20],implicitencodeA21:io.circe.Encoder[A21]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct21", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String, nameA19: String, nameA20: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ A)(g: (A) ⇒ Product21[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], decodeA19: Decoder[A19], decodeA20: Decoder[A20], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18], encodeA19: Encoder[A19], encodeA20: Encoder[A20]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct21", "link" : "io\/circe\/Codec$.html#forProduct21[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String,nameA19:String,nameA20:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>A)(g:A=>Product21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitdecodeA19:io.circe.Decoder[A19],implicitdecodeA20:io.circe.Decoder[A20],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18],implicitencodeA19:io.circe.Encoder[A19],implicitencodeA20:io.circe.Encoder[A20]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct20", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String, nameA19: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ A)(g: (A) ⇒ Product20[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], decodeA19: Decoder[A19], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18], encodeA19: Encoder[A19]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct20", "link" : "io\/circe\/Codec$.html#forProduct20[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String,nameA19:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>A)(g:A=>Product20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitdecodeA19:io.circe.Decoder[A19],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18],implicitencodeA19:io.circe.Encoder[A19]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct19", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ A)(g: (A) ⇒ Product19[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct19", "link" : "io\/circe\/Codec$.html#forProduct19[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>A)(g:A=>Product19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct18", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ A)(g: (A) ⇒ Product18[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct18", "link" : "io\/circe\/Codec$.html#forProduct18[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>A)(g:A=>Product18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct17", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ A)(g: (A) ⇒ Product17[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct17", "link" : "io\/circe\/Codec$.html#forProduct17[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>A)(g:A=>Product17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct16", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ A)(g: (A) ⇒ Product16[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct16", "link" : "io\/circe\/Codec$.html#forProduct16[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>A)(g:A=>Product16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct15", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ A)(g: (A) ⇒ Product15[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct15", "link" : "io\/circe\/Codec$.html#forProduct15[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>A)(g:A=>Product15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct14", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ A)(g: (A) ⇒ Product14[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct14", "link" : "io\/circe\/Codec$.html#forProduct14[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>A)(g:A=>Product14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct13", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ A)(g: (A) ⇒ Product13[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct13", "link" : "io\/circe\/Codec$.html#forProduct13[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>A)(g:A=>Product13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct12", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ A)(g: (A) ⇒ Product12[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct12", "link" : "io\/circe\/Codec$.html#forProduct12[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>A)(g:A=>Product12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct11", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ A)(g: (A) ⇒ Product11[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct11", "link" : "io\/circe\/Codec$.html#forProduct11[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>A)(g:A=>Product11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct10", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ A)(g: (A) ⇒ Product10[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct10", "link" : "io\/circe\/Codec$.html#forProduct10[A,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>A)(g:A=>Product10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct9", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ A)(g: (A) ⇒ Product9[A0, A1, A2, A3, A4, A5, A6, A7, A8])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct9", "link" : "io\/circe\/Codec$.html#forProduct9[A,A0,A1,A2,A3,A4,A5,A6,A7,A8](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>A)(g:A=>Product9[A0,A1,A2,A3,A4,A5,A6,A7,A8])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct8", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ A)(g: (A) ⇒ Product8[A0, A1, A2, A3, A4, A5, A6, A7])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct8", "link" : "io\/circe\/Codec$.html#forProduct8[A,A0,A1,A2,A3,A4,A5,A6,A7](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>A)(g:A=>Product8[A0,A1,A2,A3,A4,A5,A6,A7])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct7", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String)(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ A)(g: (A) ⇒ Product7[A0, A1, A2, A3, A4, A5, A6])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct7", "link" : "io\/circe\/Codec$.html#forProduct7[A,A0,A1,A2,A3,A4,A5,A6](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String)(f:(A0,A1,A2,A3,A4,A5,A6)=>A)(g:A=>Product7[A0,A1,A2,A3,A4,A5,A6])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct6", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String)(f: (A0, A1, A2, A3, A4, A5) ⇒ A)(g: (A) ⇒ Product6[A0, A1, A2, A3, A4, A5])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct6", "link" : "io\/circe\/Codec$.html#forProduct6[A,A0,A1,A2,A3,A4,A5](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String)(f:(A0,A1,A2,A3,A4,A5)=>A)(g:A=>Product6[A0,A1,A2,A3,A4,A5])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct5", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String)(f: (A0, A1, A2, A3, A4) ⇒ A)(g: (A) ⇒ Product5[A0, A1, A2, A3, A4])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct5", "link" : "io\/circe\/Codec$.html#forProduct5[A,A0,A1,A2,A3,A4](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String)(f:(A0,A1,A2,A3,A4)=>A)(g:A=>Product5[A0,A1,A2,A3,A4])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct4", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String)(f: (A0, A1, A2, A3) ⇒ A)(g: (A) ⇒ Product4[A0, A1, A2, A3])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct4", "link" : "io\/circe\/Codec$.html#forProduct4[A,A0,A1,A2,A3](nameA0:String,nameA1:String,nameA2:String,nameA3:String)(f:(A0,A1,A2,A3)=>A)(g:A=>Product4[A0,A1,A2,A3])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct3", "tail" : "(nameA0: String, nameA1: String, nameA2: String)(f: (A0, A1, A2) ⇒ A)(g: (A) ⇒ Product3[A0, A1, A2])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct3", "link" : "io\/circe\/Codec$.html#forProduct3[A,A0,A1,A2](nameA0:String,nameA1:String,nameA2:String)(f:(A0,A1,A2)=>A)(g:A=>Product3[A0,A1,A2])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct2", "tail" : "(nameA0: String, nameA1: String)(f: (A0, A1) ⇒ A)(g: (A) ⇒ Product2[A0, A1])(decodeA0: Decoder[A0], decodeA1: Decoder[A1], encodeA0: Encoder[A0], encodeA1: Encoder[A1]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct2", "link" : "io\/circe\/Codec$.html#forProduct2[A,A0,A1](nameA0:String,nameA1:String)(f:(A0,A1)=>A)(g:A=>Product2[A0,A1])(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "forProduct1", "tail" : "(nameA0: String)(f: (A0) ⇒ A)(g: (A) ⇒ A0)(decodeA0: Decoder[A0], encodeA0: Encoder[A0]): AsObject[A]", "member" : "io.circe.ProductCodecs.forProduct1", "link" : "io\/circe\/Codec$.html#forProduct1[A,A0](nameA0:String)(f:A0=>A)(g:A=>A0)(implicitdecodeA0:io.circe.Decoder[A0],implicitencodeA0:io.circe.Encoder[A0]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Codec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Codec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Codec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Codec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Codec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Codec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Codec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Codec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Codec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Codec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Codec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Codec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Codec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Codec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Codec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Codec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Codec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Codec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Codec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/Codec.html", "kind" : "trait"}, {"name" : "io.circe.CursorOp", "shortDescription" : "", "object" : "io\/circe\/CursorOp$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/CursorOp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/CursorOp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CursorOp) ⇒ Boolean, msg: ⇒ Any): CursorOp", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/CursorOp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CursorOp) ⇒ Boolean): CursorOp", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/CursorOp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CursorOp", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/CursorOp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CursorOp", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/CursorOp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CursorOp, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/CursorOp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CursorOp, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/CursorOp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "io\/circe\/CursorOp.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "io\/circe\/CursorOp.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/CursorOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/CursorOp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/CursorOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/CursorOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/CursorOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/CursorOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/CursorOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/CursorOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/CursorOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/CursorOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/CursorOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/CursorOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/CursorOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/CursorOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/CursorOp.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/CursorOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/CursorOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/CursorOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/CursorOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "requiresArray", "tail" : "(): Boolean", "member" : "io.circe.CursorOp.requiresArray", "link" : "io\/circe\/CursorOp.html#requiresArray:Boolean", "kind" : "abstract def"}, {"label" : "requiresObject", "tail" : "(): Boolean", "member" : "io.circe.CursorOp.requiresObject", "link" : "io\/circe\/CursorOp.html#requiresObject:Boolean", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "io\/circe\/CursorOp.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "io\/circe\/CursorOp.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "io\/circe\/CursorOp.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "opsToPath", "tail" : "(history: List[CursorOp]): String", "member" : "io.circe.CursorOp.opsToPath", "link" : "io\/circe\/CursorOp$.html#opsToPath(history:List[io.circe.CursorOp]):String", "kind" : "def"}, {"label" : "eqCursorOpList", "tail" : ": Eq[List[CursorOp]]", "member" : "io.circe.CursorOp.eqCursorOpList", "link" : "io\/circe\/CursorOp$.html#eqCursorOpList:cats.Eq[List[io.circe.CursorOp]]", "kind" : "val"}, {"label" : "eqCursorOp", "tail" : ": Eq[CursorOp]", "member" : "io.circe.CursorOp.eqCursorOp", "link" : "io\/circe\/CursorOp$.html#eqCursorOp:cats.Eq[io.circe.CursorOp]", "kind" : "implicit final val"}, {"label" : "showCursorOp", "tail" : ": Show[CursorOp]", "member" : "io.circe.CursorOp.showCursorOp", "link" : "io\/circe\/CursorOp$.html#showCursorOp:cats.Show[io.circe.CursorOp]", "kind" : "implicit final val"}, {"label" : "DeleteGoParent", "tail" : "", "member" : "io.circe.CursorOp.DeleteGoParent", "link" : "io\/circe\/CursorOp$.html#DeleteGoParent", "kind" : "object"}, {"label" : "DownN", "tail" : "", "member" : "io.circe.CursorOp.DownN", "link" : "io\/circe\/CursorOp$.html#DownNextendsCursorOp.ArrayOpwithProductwithSerializable", "kind" : "final case class"}, {"label" : "DownArray", "tail" : "", "member" : "io.circe.CursorOp.DownArray", "link" : "io\/circe\/CursorOp$.html#DownArray", "kind" : "object"}, {"label" : "DownField", "tail" : "", "member" : "io.circe.CursorOp.DownField", "link" : "io\/circe\/CursorOp$.html#DownFieldextendsCursorOp.ObjectOpwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Field", "tail" : "", "member" : "io.circe.CursorOp.Field", "link" : "io\/circe\/CursorOp$.html#FieldextendsCursorOp.UnconstrainedOpwithProductwithSerializable", "kind" : "final case class"}, {"label" : "MoveUp", "tail" : "", "member" : "io.circe.CursorOp.MoveUp", "link" : "io\/circe\/CursorOp$.html#MoveUp", "kind" : "object"}, {"label" : "MoveRight", "tail" : "", "member" : "io.circe.CursorOp.MoveRight", "link" : "io\/circe\/CursorOp$.html#MoveRight", "kind" : "object"}, {"label" : "MoveLeft", "tail" : "", "member" : "io.circe.CursorOp.MoveLeft", "link" : "io\/circe\/CursorOp$.html#MoveLeft", "kind" : "object"}, {"label" : "UnconstrainedOp", "tail" : "", "member" : "io.circe.CursorOp.UnconstrainedOp", "link" : "io\/circe\/CursorOp$.html#UnconstrainedOpextendsCursorOp", "kind" : "sealed abstract class"}, {"label" : "ArrayOp", "tail" : "", "member" : "io.circe.CursorOp.ArrayOp", "link" : "io\/circe\/CursorOp$.html#ArrayOpextendsCursorOp", "kind" : "sealed abstract class"}, {"label" : "ObjectOp", "tail" : "", "member" : "io.circe.CursorOp.ObjectOp", "link" : "io\/circe\/CursorOp$.html#ObjectOpextendsCursorOp", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/CursorOp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/CursorOp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/CursorOp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/CursorOp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/CursorOp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/CursorOp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/CursorOp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/CursorOp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/CursorOp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/CursorOp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/CursorOp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/CursorOp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/CursorOp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/CursorOp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/CursorOp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/CursorOp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/CursorOp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/CursorOp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/CursorOp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/CursorOp.html", "kind" : "class"}, {"name" : "io.circe.Decoder", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/Decoder.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/Decoder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Decoder[A]) ⇒ Boolean, msg: ⇒ Any): Decoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Decoder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Decoder[A]) ⇒ Boolean): Decoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Decoder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Decoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Decoder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Decoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Decoder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Decoder[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/Decoder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Decoder[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/Decoder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "emapTry", "tail" : "(f: (A) ⇒ Try[B]): Decoder[B]", "member" : "io.circe.Decoder.emapTry", "link" : "io\/circe\/Decoder.html#emapTry[B](f:A=>scala.util.Try[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "emap", "tail" : "(f: (A) ⇒ Either[String, B]): Decoder[B]", "member" : "io.circe.Decoder.emap", "link" : "io\/circe\/Decoder.html#emap[B](f:A=>Either[String,B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "at", "tail" : "(field: String): Decoder[A]", "member" : "io.circe.Decoder.at", "link" : "io\/circe\/Decoder.html#at(field:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "prepare", "tail" : "(f: (ACursor) ⇒ ACursor): Decoder[A]", "member" : "io.circe.Decoder.prepare", "link" : "io\/circe\/Decoder.html#prepare(f:io.circe.ACursor=>io.circe.ACursor):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "either", "tail" : "(decodeB: Decoder[B]): Decoder[Either[A, B]]", "member" : "io.circe.Decoder.either", "link" : "io\/circe\/Decoder.html#either[B](decodeB:io.circe.Decoder[B]):io.circe.Decoder[Either[A,B]]", "kind" : "final def"}, {"label" : "or", "tail" : "(d: ⇒ Decoder[AA]): Decoder[AA]", "member" : "io.circe.Decoder.or", "link" : "io\/circe\/Decoder.html#or[AA>:A](d:=>io.circe.Decoder[AA]):io.circe.Decoder[AA]", "kind" : "final def"}, {"label" : "product", "tail" : "(fb: Decoder[B]): Decoder[(A, B)]", "member" : "io.circe.Decoder.product", "link" : "io\/circe\/Decoder.html#product[B](fb:io.circe.Decoder[B]):io.circe.Decoder[(A,B)]", "kind" : "final def"}, {"label" : "kleisli", "tail" : "(): Kleisli[Result, HCursor, A]", "member" : "io.circe.Decoder.kleisli", "link" : "io\/circe\/Decoder.html#kleisli:cats.data.Kleisli[io.circe.Decoder.Result,io.circe.HCursor,A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(pred: (HCursor) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/Decoder.html#validate(pred:io.circe.HCursor=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(errors: (HCursor) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/Decoder.html#validate(errors:io.circe.HCursor=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(errors: (A) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/Decoder.html#ensure(errors:A=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(pred: (A) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/Decoder.html#ensure(pred:A=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "withErrorMessage", "tail" : "(message: String): Decoder[A]", "member" : "io.circe.Decoder.withErrorMessage", "link" : "io\/circe\/Decoder.html#withErrorMessage(message:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "handleErrorWith", "tail" : "(f: (DecodingFailure) ⇒ Decoder[A]): Decoder[A]", "member" : "io.circe.Decoder.handleErrorWith", "link" : "io\/circe\/Decoder.html#handleErrorWith(f:io.circe.DecodingFailure=>io.circe.Decoder[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Decoder[B]): Decoder[B]", "member" : "io.circe.Decoder.flatMap", "link" : "io\/circe\/Decoder.html#flatMap[B](f:A=>io.circe.Decoder[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Decoder[B]", "member" : "io.circe.Decoder.map", "link" : "io\/circe\/Decoder.html#map[B](f:A=>B):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "decodeJson", "tail" : "(j: Json): Result[A]", "member" : "io.circe.Decoder.decodeJson", "link" : "io\/circe\/Decoder.html#decodeJson(j:io.circe.Json):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "tryDecodeAccumulating", "tail" : "(c: ACursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.tryDecodeAccumulating", "link" : "io\/circe\/Decoder.html#tryDecodeAccumulating(c:io.circe.ACursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "tryDecode", "tail" : "(c: ACursor): Result[A]", "member" : "io.circe.Decoder.tryDecode", "link" : "io\/circe\/Decoder.html#tryDecode(c:io.circe.ACursor):io.circe.Decoder.Result[A]", "kind" : "def"}, {"label" : "decodeAccumulating", "tail" : "(c: HCursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.decodeAccumulating", "link" : "io\/circe\/Decoder.html#decodeAccumulating(c:io.circe.HCursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Decoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Decoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Decoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Decoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Decoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Decoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Decoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Decoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Decoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Decoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Decoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Decoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Decoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Decoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Decoder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Decoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Decoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Decoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Decoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(c: HCursor): Result[A]", "member" : "io.circe.Decoder.apply", "link" : "io\/circe\/Decoder.html#apply(c:io.circe.HCursor):io.circe.Decoder.Result[A]", "kind" : "abstract def"}], "shortDescription" : "A type class that provides a way to produce a value of type A from a Json value.", "object" : "io\/circe\/Decoder$.html", "members_object" : [{"label" : "state", "tail" : "", "member" : "io.circe.Decoder.state", "link" : "io\/circe\/Decoder$.html#state", "kind" : "object"}, {"label" : "currencyDecoder", "tail" : ": Decoder[Currency]", "member" : "io.circe.Decoder.currencyDecoder", "link" : "io\/circe\/Decoder$.html#currencyDecoder:io.circe.Decoder[java.util.Currency]", "kind" : "implicit final lazy val"}, {"label" : "decoderInstances", "tail" : ": SemigroupK[Decoder] with MonadError[Decoder, DecodingFailure]", "member" : "io.circe.Decoder.decoderInstances", "link" : "io\/circe\/Decoder$.html#decoderInstances:cats.SemigroupK[io.circe.Decoder]withcats.MonadError[io.circe.Decoder,io.circe.DecodingFailure]", "kind" : "implicit final val"}, {"label" : "decodeZoneOffset", "tail" : ": Decoder[ZoneOffset]", "member" : "io.circe.Decoder.decodeZoneOffset", "link" : "io\/circe\/Decoder$.html#decodeZoneOffset:io.circe.Decoder[java.time.ZoneOffset]", "kind" : "implicit final lazy val"}, {"label" : "decodeZonedDateTime", "tail" : ": Decoder[ZonedDateTime]", "member" : "io.circe.Decoder.decodeZonedDateTime", "link" : "io\/circe\/Decoder$.html#decodeZonedDateTime:io.circe.Decoder[java.time.ZonedDateTime]", "kind" : "implicit final lazy val"}, {"label" : "decodeYearMonth", "tail" : ": Decoder[YearMonth]", "member" : "io.circe.Decoder.decodeYearMonth", "link" : "io\/circe\/Decoder$.html#decodeYearMonth:io.circe.Decoder[java.time.YearMonth]", "kind" : "implicit final lazy val"}, {"label" : "decodeYear", "tail" : ": Decoder[Year]", "member" : "io.circe.Decoder.decodeYear", "link" : "io\/circe\/Decoder$.html#decodeYear:io.circe.Decoder[java.time.Year]", "kind" : "implicit final lazy val"}, {"label" : "decodeOffsetDateTime", "tail" : ": Decoder[OffsetDateTime]", "member" : "io.circe.Decoder.decodeOffsetDateTime", "link" : "io\/circe\/Decoder$.html#decodeOffsetDateTime:io.circe.Decoder[java.time.OffsetDateTime]", "kind" : "implicit final lazy val"}, {"label" : "decodeOffsetTime", "tail" : ": Decoder[OffsetTime]", "member" : "io.circe.Decoder.decodeOffsetTime", "link" : "io\/circe\/Decoder$.html#decodeOffsetTime:io.circe.Decoder[java.time.OffsetTime]", "kind" : "implicit final lazy val"}, {"label" : "decodeMonthDay", "tail" : ": Decoder[MonthDay]", "member" : "io.circe.Decoder.decodeMonthDay", "link" : "io\/circe\/Decoder$.html#decodeMonthDay:io.circe.Decoder[java.time.MonthDay]", "kind" : "implicit final lazy val"}, {"label" : "decodeLocalDateTime", "tail" : ": Decoder[LocalDateTime]", "member" : "io.circe.Decoder.decodeLocalDateTime", "link" : "io\/circe\/Decoder$.html#decodeLocalDateTime:io.circe.Decoder[java.time.LocalDateTime]", "kind" : "implicit final lazy val"}, {"label" : "decodeLocalTime", "tail" : ": Decoder[LocalTime]", "member" : "io.circe.Decoder.decodeLocalTime", "link" : "io\/circe\/Decoder$.html#decodeLocalTime:io.circe.Decoder[java.time.LocalTime]", "kind" : "implicit final lazy val"}, {"label" : "decodeLocalDate", "tail" : ": Decoder[LocalDate]", "member" : "io.circe.Decoder.decodeLocalDate", "link" : "io\/circe\/Decoder$.html#decodeLocalDate:io.circe.Decoder[java.time.LocalDate]", "kind" : "implicit final lazy val"}, {"label" : "decodeZoneOffsetWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[ZoneOffset]", "member" : "io.circe.Decoder.decodeZoneOffsetWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeZoneOffsetWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.ZoneOffset]", "kind" : "final def"}, {"label" : "decodeZonedDateTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[ZonedDateTime]", "member" : "io.circe.Decoder.decodeZonedDateTimeWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeZonedDateTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.ZonedDateTime]", "kind" : "final def"}, {"label" : "decodeYearMonthWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[YearMonth]", "member" : "io.circe.Decoder.decodeYearMonthWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeYearMonthWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.YearMonth]", "kind" : "final def"}, {"label" : "decodeYearWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[Year]", "member" : "io.circe.Decoder.decodeYearWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeYearWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.Year]", "kind" : "final def"}, {"label" : "decodeOffsetDateTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[OffsetDateTime]", "member" : "io.circe.Decoder.decodeOffsetDateTimeWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeOffsetDateTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.OffsetDateTime]", "kind" : "final def"}, {"label" : "decodeOffsetTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[OffsetTime]", "member" : "io.circe.Decoder.decodeOffsetTimeWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeOffsetTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.OffsetTime]", "kind" : "final def"}, {"label" : "decodeMonthDayWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[MonthDay]", "member" : "io.circe.Decoder.decodeMonthDayWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeMonthDayWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.MonthDay]", "kind" : "final def"}, {"label" : "decodeLocalDateTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[LocalDateTime]", "member" : "io.circe.Decoder.decodeLocalDateTimeWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeLocalDateTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.LocalDateTime]", "kind" : "final def"}, {"label" : "decodeLocalTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[LocalTime]", "member" : "io.circe.Decoder.decodeLocalTimeWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeLocalTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.LocalTime]", "kind" : "final def"}, {"label" : "decodeLocalDateWithFormatter", "tail" : "(formatter: DateTimeFormatter): Decoder[LocalDate]", "member" : "io.circe.Decoder.decodeLocalDateWithFormatter", "link" : "io\/circe\/Decoder$.html#decodeLocalDateWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Decoder[java.time.LocalDate]", "kind" : "final def"}, {"label" : "decodeZoneId", "tail" : ": Decoder[ZoneId]", "member" : "io.circe.Decoder.decodeZoneId", "link" : "io\/circe\/Decoder$.html#decodeZoneId:io.circe.Decoder[java.time.ZoneId]", "kind" : "implicit final lazy val"}, {"label" : "decodePeriod", "tail" : ": Decoder[Period]", "member" : "io.circe.Decoder.decodePeriod", "link" : "io\/circe\/Decoder$.html#decodePeriod:io.circe.Decoder[java.time.Period]", "kind" : "implicit final lazy val"}, {"label" : "decodeInstant", "tail" : ": Decoder[Instant]", "member" : "io.circe.Decoder.decodeInstant", "link" : "io\/circe\/Decoder$.html#decodeInstant:io.circe.Decoder[java.time.Instant]", "kind" : "implicit final lazy val"}, {"label" : "decodeDuration", "tail" : ": Decoder[Duration]", "member" : "io.circe.Decoder.decodeDuration", "link" : "io\/circe\/Decoder$.html#decodeDuration:io.circe.Decoder[java.time.Duration]", "kind" : "implicit final lazy val"}, {"label" : "decodeValidated", "tail" : "(failureKey: String, successKey: String)(decodeE: Decoder[E], decodeA: Decoder[A]): Decoder[Validated[E, A]]", "member" : "io.circe.Decoder.decodeValidated", "link" : "io\/circe\/Decoder$.html#decodeValidated[E,A](failureKey:String,successKey:String)(implicitdecodeE:io.circe.Decoder[E],implicitdecodeA:io.circe.Decoder[A]):io.circe.Decoder[cats.data.Validated[E,A]]", "kind" : "final def"}, {"label" : "decodeEither", "tail" : "(leftKey: String, rightKey: String)(decodeA: Decoder[A], decodeB: Decoder[B]): Decoder[Either[A, B]]", "member" : "io.circe.Decoder.decodeEither", "link" : "io\/circe\/Decoder$.html#decodeEither[A,B](leftKey:String,rightKey:String)(implicitdecodeA:io.circe.Decoder[A],implicitdecodeB:io.circe.Decoder[B]):io.circe.Decoder[Either[A,B]]", "kind" : "final def"}, {"label" : "decodeNonEmptyChain", "tail" : "(decodeA: Decoder[A]): Decoder[NonEmptyChain[A]]", "member" : "io.circe.Decoder.decodeNonEmptyChain", "link" : "io\/circe\/Decoder$.html#decodeNonEmptyChain[A](implicitdecodeA:io.circe.Decoder[A]):io.circe.Decoder[cats.data.NonEmptyChain[A]]", "kind" : "implicit final def"}, {"label" : "decodeNonEmptyMap", "tail" : "(decodeK: KeyDecoder[K], orderK: Order[K], decodeV: Decoder[V]): Decoder[NonEmptyMap[K, V]]", "member" : "io.circe.Decoder.decodeNonEmptyMap", "link" : "io\/circe\/Decoder$.html#decodeNonEmptyMap[K,V](implicitdecodeK:io.circe.KeyDecoder[K],implicitorderK:cats.kernel.Order[K],implicitdecodeV:io.circe.Decoder[V]):io.circe.Decoder[cats.data.NonEmptyMap[K,V]]", "kind" : "implicit final def"}, {"label" : "decodeNonEmptySet", "tail" : "(decodeA: Decoder[A], orderA: Order[A]): Decoder[NonEmptySet[A]]", "member" : "io.circe.Decoder.decodeNonEmptySet", "link" : "io\/circe\/Decoder$.html#decodeNonEmptySet[A](implicitdecodeA:io.circe.Decoder[A],implicitorderA:cats.kernel.Order[A]):io.circe.Decoder[cats.data.NonEmptySet[A]]", "kind" : "implicit final def"}, {"label" : "decodeNonEmptyVector", "tail" : "(decodeA: Decoder[A]): Decoder[NonEmptyVector[A]]", "member" : "io.circe.Decoder.decodeNonEmptyVector", "link" : "io\/circe\/Decoder$.html#decodeNonEmptyVector[A](implicitdecodeA:io.circe.Decoder[A]):io.circe.Decoder[cats.data.NonEmptyVector[A]]", "kind" : "implicit final def"}, {"label" : "decodeNonEmptyList", "tail" : "(decodeA: Decoder[A]): Decoder[NonEmptyList[A]]", "member" : "io.circe.Decoder.decodeNonEmptyList", "link" : "io\/circe\/Decoder$.html#decodeNonEmptyList[A](implicitdecodeA:io.circe.Decoder[A]):io.circe.Decoder[cats.data.NonEmptyList[A]]", "kind" : "implicit final def"}, {"label" : "decodeChain", "tail" : "(decodeA: Decoder[A]): Decoder[Chain[A]]", "member" : "io.circe.Decoder.decodeChain", "link" : "io\/circe\/Decoder$.html#decodeChain[A](implicitdecodeA:io.circe.Decoder[A]):io.circe.Decoder[cats.data.Chain[A]]", "kind" : "implicit final def"}, {"label" : "decodeVector", "tail" : "(decodeA: Decoder[A]): Decoder[Vector[A]]", "member" : "io.circe.Decoder.decodeVector", "link" : "io\/circe\/Decoder$.html#decodeVector[A](implicitdecodeA:io.circe.Decoder[A]):io.circe.Decoder[Vector[A]]", "kind" : "implicit final def"}, {"label" : "decodeList", "tail" : "(decodeA: Decoder[A]): Decoder[List[A]]", "member" : "io.circe.Decoder.decodeList", "link" : "io\/circe\/Decoder$.html#decodeList[A](implicitdecodeA:io.circe.Decoder[A]):io.circe.Decoder[List[A]]", "kind" : "implicit final def"}, {"label" : "decodeSet", "tail" : "(decodeA: Decoder[A]): Decoder[Set[A]]", "member" : "io.circe.Decoder.decodeSet", "link" : "io\/circe\/Decoder$.html#decodeSet[A](implicitdecodeA:io.circe.Decoder[A]):io.circe.Decoder[scala.collection.immutable.Set[A]]", "kind" : "implicit final def"}, {"label" : "decodeSeq", "tail" : "(decodeA: Decoder[A]): Decoder[Seq[A]]", "member" : "io.circe.Decoder.decodeSeq", "link" : "io\/circe\/Decoder$.html#decodeSeq[A](implicitdecodeA:io.circe.Decoder[A]):io.circe.Decoder[Seq[A]]", "kind" : "implicit final def"}, {"label" : "decodeMap", "tail" : "(decodeK: KeyDecoder[K], decodeV: Decoder[V]): Decoder[Map[K, V]]", "member" : "io.circe.Decoder.decodeMap", "link" : "io\/circe\/Decoder$.html#decodeMap[K,V](implicitdecodeK:io.circe.KeyDecoder[K],implicitdecodeV:io.circe.Decoder[V]):io.circe.Decoder[scala.collection.immutable.Map[K,V]]", "kind" : "implicit final def"}, {"label" : "decodeNone", "tail" : ": Decoder[None.type]", "member" : "io.circe.Decoder.decodeNone", "link" : "io\/circe\/Decoder$.html#decodeNone:io.circe.Decoder[None.type]", "kind" : "implicit final val"}, {"label" : "decodeSome", "tail" : "(d: Decoder[A]): Decoder[Some[A]]", "member" : "io.circe.Decoder.decodeSome", "link" : "io\/circe\/Decoder$.html#decodeSome[A](implicitd:io.circe.Decoder[A]):io.circe.Decoder[Some[A]]", "kind" : "implicit final def"}, {"label" : "decodeOption", "tail" : "(d: Decoder[A]): Decoder[Option[A]]", "member" : "io.circe.Decoder.decodeOption", "link" : "io\/circe\/Decoder$.html#decodeOption[A](implicitd:io.circe.Decoder[A]):io.circe.Decoder[Option[A]]", "kind" : "implicit final def"}, {"label" : "decodeUUID", "tail" : ": Decoder[UUID]", "member" : "io.circe.Decoder.decodeUUID", "link" : "io\/circe\/Decoder$.html#decodeUUID:io.circe.Decoder[java.util.UUID]", "kind" : "implicit final lazy val"}, {"label" : "decodeJavaBigDecimal", "tail" : ": Decoder[BigDecimal]", "member" : "io.circe.Decoder.decodeJavaBigDecimal", "link" : "io\/circe\/Decoder$.html#decodeJavaBigDecimal:io.circe.Decoder[java.math.BigDecimal]", "kind" : "implicit final lazy val"}, {"label" : "decodeBigDecimal", "tail" : ": Decoder[BigDecimal]", "member" : "io.circe.Decoder.decodeBigDecimal", "link" : "io\/circe\/Decoder$.html#decodeBigDecimal:io.circe.Decoder[BigDecimal]", "kind" : "implicit final val"}, {"label" : "decodeJavaBigInteger", "tail" : ": Decoder[BigInteger]", "member" : "io.circe.Decoder.decodeJavaBigInteger", "link" : "io\/circe\/Decoder$.html#decodeJavaBigInteger:io.circe.Decoder[java.math.BigInteger]", "kind" : "implicit final lazy val"}, {"label" : "decodeBigInt", "tail" : ": Decoder[BigInt]", "member" : "io.circe.Decoder.decodeBigInt", "link" : "io\/circe\/Decoder$.html#decodeBigInt:io.circe.Decoder[BigInt]", "kind" : "implicit final val"}, {"label" : "decodeJavaLong", "tail" : ": Decoder[Long]", "member" : "io.circe.Decoder.decodeJavaLong", "link" : "io\/circe\/Decoder$.html#decodeJavaLong:io.circe.Decoder[Long]", "kind" : "implicit final lazy val"}, {"label" : "decodeLong", "tail" : ": Decoder[Long]", "member" : "io.circe.Decoder.decodeLong", "link" : "io\/circe\/Decoder$.html#decodeLong:io.circe.Decoder[Long]", "kind" : "implicit final val"}, {"label" : "decodeJavaInteger", "tail" : ": Decoder[Integer]", "member" : "io.circe.Decoder.decodeJavaInteger", "link" : "io\/circe\/Decoder$.html#decodeJavaInteger:io.circe.Decoder[Integer]", "kind" : "implicit final lazy val"}, {"label" : "decodeInt", "tail" : ": Decoder[Int]", "member" : "io.circe.Decoder.decodeInt", "link" : "io\/circe\/Decoder$.html#decodeInt:io.circe.Decoder[Int]", "kind" : "implicit final val"}, {"label" : "decodeJavaShort", "tail" : ": Decoder[Short]", "member" : "io.circe.Decoder.decodeJavaShort", "link" : "io\/circe\/Decoder$.html#decodeJavaShort:io.circe.Decoder[Short]", "kind" : "implicit final lazy val"}, {"label" : "decodeShort", "tail" : ": Decoder[Short]", "member" : "io.circe.Decoder.decodeShort", "link" : "io\/circe\/Decoder$.html#decodeShort:io.circe.Decoder[Short]", "kind" : "implicit final val"}, {"label" : "decodeJavaByte", "tail" : ": Decoder[Byte]", "member" : "io.circe.Decoder.decodeJavaByte", "link" : "io\/circe\/Decoder$.html#decodeJavaByte:io.circe.Decoder[Byte]", "kind" : "implicit final lazy val"}, {"label" : "decodeByte", "tail" : ": Decoder[Byte]", "member" : "io.circe.Decoder.decodeByte", "link" : "io\/circe\/Decoder$.html#decodeByte:io.circe.Decoder[Byte]", "kind" : "implicit final val"}, {"label" : "decodeJavaDouble", "tail" : ": Decoder[Double]", "member" : "io.circe.Decoder.decodeJavaDouble", "link" : "io\/circe\/Decoder$.html#decodeJavaDouble:io.circe.Decoder[Double]", "kind" : "implicit final lazy val"}, {"label" : "decodeDouble", "tail" : ": Decoder[Double]", "member" : "io.circe.Decoder.decodeDouble", "link" : "io\/circe\/Decoder$.html#decodeDouble:io.circe.Decoder[Double]", "kind" : "implicit final val"}, {"label" : "decodeJavaFloat", "tail" : ": Decoder[Float]", "member" : "io.circe.Decoder.decodeJavaFloat", "link" : "io\/circe\/Decoder$.html#decodeJavaFloat:io.circe.Decoder[Float]", "kind" : "implicit final lazy val"}, {"label" : "decodeFloat", "tail" : ": Decoder[Float]", "member" : "io.circe.Decoder.decodeFloat", "link" : "io\/circe\/Decoder$.html#decodeFloat:io.circe.Decoder[Float]", "kind" : "implicit final val"}, {"label" : "decodeJavaCharacter", "tail" : ": Decoder[Character]", "member" : "io.circe.Decoder.decodeJavaCharacter", "link" : "io\/circe\/Decoder$.html#decodeJavaCharacter:io.circe.Decoder[Character]", "kind" : "implicit final lazy val"}, {"label" : "decodeChar", "tail" : ": Decoder[Char]", "member" : "io.circe.Decoder.decodeChar", "link" : "io\/circe\/Decoder$.html#decodeChar:io.circe.Decoder[Char]", "kind" : "implicit final val"}, {"label" : "decodeJavaBoolean", "tail" : ": Decoder[Boolean]", "member" : "io.circe.Decoder.decodeJavaBoolean", "link" : "io\/circe\/Decoder$.html#decodeJavaBoolean:io.circe.Decoder[Boolean]", "kind" : "implicit final lazy val"}, {"label" : "decodeBoolean", "tail" : ": Decoder[Boolean]", "member" : "io.circe.Decoder.decodeBoolean", "link" : "io\/circe\/Decoder$.html#decodeBoolean:io.circe.Decoder[Boolean]", "kind" : "implicit final val"}, {"label" : "decodeUnit", "tail" : ": Decoder[Unit]", "member" : "io.circe.Decoder.decodeUnit", "link" : "io\/circe\/Decoder$.html#decodeUnit:io.circe.Decoder[Unit]", "kind" : "implicit final val"}, {"label" : "decodeString", "tail" : ": Decoder[String]", "member" : "io.circe.Decoder.decodeString", "link" : "io\/circe\/Decoder$.html#decodeString:io.circe.Decoder[String]", "kind" : "implicit final val"}, {"label" : "decodeJsonNumber", "tail" : ": Decoder[JsonNumber]", "member" : "io.circe.Decoder.decodeJsonNumber", "link" : "io\/circe\/Decoder$.html#decodeJsonNumber:io.circe.Decoder[io.circe.JsonNumber]", "kind" : "implicit final val"}, {"label" : "decodeJsonObject", "tail" : ": Decoder[JsonObject]", "member" : "io.circe.Decoder.decodeJsonObject", "link" : "io\/circe\/Decoder$.html#decodeJsonObject:io.circe.Decoder[io.circe.JsonObject]", "kind" : "implicit final val"}, {"label" : "decodeJson", "tail" : ": Decoder[Json]", "member" : "io.circe.Decoder.decodeJson", "link" : "io\/circe\/Decoder$.html#decodeJson:io.circe.Decoder[io.circe.Json]", "kind" : "implicit final val"}, {"label" : "decodeHCursor", "tail" : ": Decoder[HCursor]", "member" : "io.circe.Decoder.decodeHCursor", "link" : "io\/circe\/Decoder$.html#decodeHCursor:io.circe.Decoder[io.circe.HCursor]", "kind" : "implicit final val"}, {"label" : "failedWithMessage", "tail" : "(message: String): Decoder[A]", "member" : "io.circe.Decoder.failedWithMessage", "link" : "io\/circe\/Decoder$.html#failedWithMessage[A](message:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "failed", "tail" : "(failure: DecodingFailure): Decoder[A]", "member" : "io.circe.Decoder.failed", "link" : "io\/circe\/Decoder$.html#failed[A](failure:io.circe.DecodingFailure):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "withReattempt", "tail" : "(f: (ACursor) ⇒ Result[A]): Decoder[A]", "member" : "io.circe.Decoder.withReattempt", "link" : "io\/circe\/Decoder$.html#withReattempt[A](f:io.circe.ACursor=>io.circe.Decoder.Result[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "instanceTry", "tail" : "(f: (HCursor) ⇒ Try[A]): Decoder[A]", "member" : "io.circe.Decoder.instanceTry", "link" : "io\/circe\/Decoder$.html#instanceTry[A](f:io.circe.HCursor=>scala.util.Try[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "fromState", "tail" : "(s: StateT[Result, ACursor, A]): Decoder[A]", "member" : "io.circe.Decoder.fromState", "link" : "io\/circe\/Decoder$.html#fromState[A](s:cats.data.StateT[io.circe.Decoder.Result,io.circe.ACursor,A]):io.circe.Decoder[A]", "kind" : "def"}, {"label" : "instance", "tail" : "(f: (HCursor) ⇒ Result[A]): Decoder[A]", "member" : "io.circe.Decoder.instance", "link" : "io\/circe\/Decoder$.html#instance[A](f:io.circe.HCursor=>io.circe.Decoder.Result[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "const", "tail" : "(a: A): Decoder[A]", "member" : "io.circe.Decoder.const", "link" : "io\/circe\/Decoder$.html#const[A](a:A):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(instance: Decoder[A]): Decoder[A]", "member" : "io.circe.Decoder.apply", "link" : "io\/circe\/Decoder$.html#apply[A](implicitinstance:io.circe.Decoder[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "accumulatingResultInstance", "tail" : ": ApplicativeError[AccumulatingResult, NonEmptyList[DecodingFailure]]", "member" : "io.circe.Decoder.accumulatingResultInstance", "link" : "io\/circe\/Decoder$.html#accumulatingResultInstance:cats.ApplicativeError[io.circe.Decoder.AccumulatingResult,cats.data.NonEmptyList[io.circe.DecodingFailure]]", "kind" : "final val"}, {"label" : "resultInstance", "tail" : ": MonadError[Result, DecodingFailure]", "member" : "io.circe.Decoder.resultInstance", "link" : "io\/circe\/Decoder$.html#resultInstance:cats.MonadError[io.circe.Decoder.Result,io.circe.DecodingFailure]", "kind" : "final val"}, {"label" : "AccumulatingResult", "tail" : "", "member" : "io.circe.Decoder.AccumulatingResult", "link" : "io\/circe\/Decoder$.html#AccumulatingResult[A]=cats.data.ValidatedNel[io.circe.DecodingFailure,A]", "kind" : "final type"}, {"label" : "Result", "tail" : "", "member" : "io.circe.Decoder.Result", "link" : "io\/circe\/Decoder$.html#Result[A]=Either[io.circe.DecodingFailure,A]", "kind" : "final type"}, {"label" : "importedDecoder", "tail" : "(exported: Exported[Decoder[A]]): Decoder[A]", "member" : "io.circe.LowPriorityDecoders.importedDecoder", "link" : "io\/circe\/Decoder$.html#importedDecoder[A](implicitexported:io.circe.export.Exported[io.circe.Decoder[A]]):io.circe.Decoder[A]", "kind" : "implicit def"}, {"label" : "decodeEnumeration", "tail" : "(enumeration: E): Decoder[EnumerationDecoders.decodeEnumeration.E.Value]", "member" : "io.circe.EnumerationDecoders.decodeEnumeration", "link" : "io\/circe\/Decoder$.html#decodeEnumeration[E<:Enumeration](enumeration:E):io.circe.Decoder[E#Value]", "kind" : "final def"}, {"label" : "forProduct22", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String, nameA19: String, nameA20: String, nameA21: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], decodeA19: Decoder[A19], decodeA20: Decoder[A20], decodeA21: Decoder[A21]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct22", "link" : "io\/circe\/Decoder$.html#forProduct22[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String,nameA19:String,nameA20:String,nameA21:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitdecodeA19:io.circe.Decoder[A19],implicitdecodeA20:io.circe.Decoder[A20],implicitdecodeA21:io.circe.Decoder[A21]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct21", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String, nameA19: String, nameA20: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], decodeA19: Decoder[A19], decodeA20: Decoder[A20]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct21", "link" : "io\/circe\/Decoder$.html#forProduct21[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String,nameA19:String,nameA20:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitdecodeA19:io.circe.Decoder[A19],implicitdecodeA20:io.circe.Decoder[A20]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct20", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String, nameA19: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], decodeA19: Decoder[A19]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct20", "link" : "io\/circe\/Decoder$.html#forProduct20[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String,nameA19:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitdecodeA19:io.circe.Decoder[A19]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct19", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct19", "link" : "io\/circe\/Decoder$.html#forProduct19[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct18", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct18", "link" : "io\/circe\/Decoder$.html#forProduct18[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct17", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct17", "link" : "io\/circe\/Decoder$.html#forProduct17[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct16", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct16", "link" : "io\/circe\/Decoder$.html#forProduct16[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct15", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct15", "link" : "io\/circe\/Decoder$.html#forProduct15[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct14", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct14", "link" : "io\/circe\/Decoder$.html#forProduct14[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct13", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct13", "link" : "io\/circe\/Decoder$.html#forProduct13[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct12", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct12", "link" : "io\/circe\/Decoder$.html#forProduct12[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct11", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct11", "link" : "io\/circe\/Decoder$.html#forProduct11[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct10", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct10", "link" : "io\/circe\/Decoder$.html#forProduct10[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct9", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct9", "link" : "io\/circe\/Decoder$.html#forProduct9[Target,A0,A1,A2,A3,A4,A5,A6,A7,A8](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct8", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String)(f: (A0, A1, A2, A3, A4, A5, A6, A7) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct8", "link" : "io\/circe\/Decoder$.html#forProduct8[Target,A0,A1,A2,A3,A4,A5,A6,A7](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String)(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct7", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String)(f: (A0, A1, A2, A3, A4, A5, A6) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct7", "link" : "io\/circe\/Decoder$.html#forProduct7[Target,A0,A1,A2,A3,A4,A5,A6](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String)(f:(A0,A1,A2,A3,A4,A5,A6)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct6", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String)(f: (A0, A1, A2, A3, A4, A5) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct6", "link" : "io\/circe\/Decoder$.html#forProduct6[Target,A0,A1,A2,A3,A4,A5](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String)(f:(A0,A1,A2,A3,A4,A5)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct5", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String)(f: (A0, A1, A2, A3, A4) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct5", "link" : "io\/circe\/Decoder$.html#forProduct5[Target,A0,A1,A2,A3,A4](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String)(f:(A0,A1,A2,A3,A4)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct4", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String)(f: (A0, A1, A2, A3) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct4", "link" : "io\/circe\/Decoder$.html#forProduct4[Target,A0,A1,A2,A3](nameA0:String,nameA1:String,nameA2:String,nameA3:String)(f:(A0,A1,A2,A3)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct3", "tail" : "(nameA0: String, nameA1: String, nameA2: String)(f: (A0, A1, A2) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct3", "link" : "io\/circe\/Decoder$.html#forProduct3[Target,A0,A1,A2](nameA0:String,nameA1:String,nameA2:String)(f:(A0,A1,A2)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct2", "tail" : "(nameA0: String, nameA1: String)(f: (A0, A1) ⇒ Target)(decodeA0: Decoder[A0], decodeA1: Decoder[A1]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct2", "link" : "io\/circe\/Decoder$.html#forProduct2[Target,A0,A1](nameA0:String,nameA1:String)(f:(A0,A1)=>Target)(implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "forProduct1", "tail" : "(nameA0: String)(f: (A0) ⇒ Target)(decodeA0: Decoder[A0]): Decoder[Target]", "member" : "io.circe.ProductDecoders.forProduct1", "link" : "io\/circe\/Decoder$.html#forProduct1[Target,A0](nameA0:String)(f:A0=>Target)(implicitdecodeA0:io.circe.Decoder[A0]):io.circe.Decoder[Target]", "kind" : "final def"}, {"label" : "decodeTuple22", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], decodeA19: Decoder[A19], decodeA20: Decoder[A20], decodeA21: Decoder[A21]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "io.circe.TupleDecoders.decodeTuple22", "link" : "io\/circe\/Decoder$.html#decodeTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitdecodeA19:io.circe.Decoder[A19],implicitdecodeA20:io.circe.Decoder[A20],implicitdecodeA21:io.circe.Decoder[A21]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit final def"}, {"label" : "decodeTuple21", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], decodeA19: Decoder[A19], decodeA20: Decoder[A20]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "io.circe.TupleDecoders.decodeTuple21", "link" : "io\/circe\/Decoder$.html#decodeTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitdecodeA19:io.circe.Decoder[A19],implicitdecodeA20:io.circe.Decoder[A20]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit final def"}, {"label" : "decodeTuple20", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18], decodeA19: Decoder[A19]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "io.circe.TupleDecoders.decodeTuple20", "link" : "io\/circe\/Decoder$.html#decodeTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18],implicitdecodeA19:io.circe.Decoder[A19]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit final def"}, {"label" : "decodeTuple19", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17], decodeA18: Decoder[A18]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "io.circe.TupleDecoders.decodeTuple19", "link" : "io\/circe\/Decoder$.html#decodeTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17],implicitdecodeA18:io.circe.Decoder[A18]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit final def"}, {"label" : "decodeTuple18", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16], decodeA17: Decoder[A17]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "io.circe.TupleDecoders.decodeTuple18", "link" : "io\/circe\/Decoder$.html#decodeTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16],implicitdecodeA17:io.circe.Decoder[A17]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit final def"}, {"label" : "decodeTuple17", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15], decodeA16: Decoder[A16]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "io.circe.TupleDecoders.decodeTuple17", "link" : "io\/circe\/Decoder$.html#decodeTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15],implicitdecodeA16:io.circe.Decoder[A16]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit final def"}, {"label" : "decodeTuple16", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14], decodeA15: Decoder[A15]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "io.circe.TupleDecoders.decodeTuple16", "link" : "io\/circe\/Decoder$.html#decodeTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14],implicitdecodeA15:io.circe.Decoder[A15]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit final def"}, {"label" : "decodeTuple15", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13], decodeA14: Decoder[A14]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "io.circe.TupleDecoders.decodeTuple15", "link" : "io\/circe\/Decoder$.html#decodeTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13],implicitdecodeA14:io.circe.Decoder[A14]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit final def"}, {"label" : "decodeTuple14", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12], decodeA13: Decoder[A13]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "io.circe.TupleDecoders.decodeTuple14", "link" : "io\/circe\/Decoder$.html#decodeTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12],implicitdecodeA13:io.circe.Decoder[A13]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit final def"}, {"label" : "decodeTuple13", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11], decodeA12: Decoder[A12]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "io.circe.TupleDecoders.decodeTuple13", "link" : "io\/circe\/Decoder$.html#decodeTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11],implicitdecodeA12:io.circe.Decoder[A12]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit final def"}, {"label" : "decodeTuple12", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10], decodeA11: Decoder[A11]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "io.circe.TupleDecoders.decodeTuple12", "link" : "io\/circe\/Decoder$.html#decodeTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10],implicitdecodeA11:io.circe.Decoder[A11]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit final def"}, {"label" : "decodeTuple11", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9], decodeA10: Decoder[A10]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "io.circe.TupleDecoders.decodeTuple11", "link" : "io\/circe\/Decoder$.html#decodeTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9],implicitdecodeA10:io.circe.Decoder[A10]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit final def"}, {"label" : "decodeTuple10", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8], decodeA9: Decoder[A9]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "io.circe.TupleDecoders.decodeTuple10", "link" : "io\/circe\/Decoder$.html#decodeTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8],implicitdecodeA9:io.circe.Decoder[A9]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit final def"}, {"label" : "decodeTuple9", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7], decodeA8: Decoder[A8]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "io.circe.TupleDecoders.decodeTuple9", "link" : "io\/circe\/Decoder$.html#decodeTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7],implicitdecodeA8:io.circe.Decoder[A8]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit final def"}, {"label" : "decodeTuple8", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6], decodeA7: Decoder[A7]): Decoder[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "io.circe.TupleDecoders.decodeTuple8", "link" : "io\/circe\/Decoder$.html#decodeTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6],implicitdecodeA7:io.circe.Decoder[A7]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit final def"}, {"label" : "decodeTuple7", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5], decodeA6: Decoder[A6]): Decoder[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "io.circe.TupleDecoders.decodeTuple7", "link" : "io\/circe\/Decoder$.html#decodeTuple7[A0,A1,A2,A3,A4,A5,A6](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5],implicitdecodeA6:io.circe.Decoder[A6]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit final def"}, {"label" : "decodeTuple6", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4], decodeA5: Decoder[A5]): Decoder[(A0, A1, A2, A3, A4, A5)]", "member" : "io.circe.TupleDecoders.decodeTuple6", "link" : "io\/circe\/Decoder$.html#decodeTuple6[A0,A1,A2,A3,A4,A5](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4],implicitdecodeA5:io.circe.Decoder[A5]):io.circe.Decoder[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit final def"}, {"label" : "decodeTuple5", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3], decodeA4: Decoder[A4]): Decoder[(A0, A1, A2, A3, A4)]", "member" : "io.circe.TupleDecoders.decodeTuple5", "link" : "io\/circe\/Decoder$.html#decodeTuple5[A0,A1,A2,A3,A4](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3],implicitdecodeA4:io.circe.Decoder[A4]):io.circe.Decoder[(A0,A1,A2,A3,A4)]", "kind" : "implicit final def"}, {"label" : "decodeTuple4", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2], decodeA3: Decoder[A3]): Decoder[(A0, A1, A2, A3)]", "member" : "io.circe.TupleDecoders.decodeTuple4", "link" : "io\/circe\/Decoder$.html#decodeTuple4[A0,A1,A2,A3](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2],implicitdecodeA3:io.circe.Decoder[A3]):io.circe.Decoder[(A0,A1,A2,A3)]", "kind" : "implicit final def"}, {"label" : "decodeTuple3", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1], decodeA2: Decoder[A2]): Decoder[(A0, A1, A2)]", "member" : "io.circe.TupleDecoders.decodeTuple3", "link" : "io\/circe\/Decoder$.html#decodeTuple3[A0,A1,A2](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1],implicitdecodeA2:io.circe.Decoder[A2]):io.circe.Decoder[(A0,A1,A2)]", "kind" : "implicit final def"}, {"label" : "decodeTuple2", "tail" : "(decodeA0: Decoder[A0], decodeA1: Decoder[A1]): Decoder[(A0, A1)]", "member" : "io.circe.TupleDecoders.decodeTuple2", "link" : "io\/circe\/Decoder$.html#decodeTuple2[A0,A1](implicitdecodeA0:io.circe.Decoder[A0],implicitdecodeA1:io.circe.Decoder[A1]):io.circe.Decoder[(A0,A1)]", "kind" : "implicit final def"}, {"label" : "decodeTuple1", "tail" : "(decodeA0: Decoder[A0]): Decoder[(A0)]", "member" : "io.circe.TupleDecoders.decodeTuple1", "link" : "io\/circe\/Decoder$.html#decodeTuple1[A0](implicitdecodeA0:io.circe.Decoder[A0]):io.circe.Decoder[(A0,)]", "kind" : "implicit final def"}, {"label" : "decodeOneAnd", "tail" : "(decodeA: Decoder[A], factory: CanBuildFrom[Nothing, A, C[A]]): Decoder[OneAnd[C, A]]", "member" : "io.circe.CollectionDecoders.decodeOneAnd", "link" : "io\/circe\/Decoder$.html#decodeOneAnd[A,C[_]](implicitdecodeA:io.circe.Decoder[A],implicitfactory:scala.collection.generic.CanBuildFrom[Nothing,A,C[A]]):io.circe.Decoder[cats.data.OneAnd[C,A]]", "kind" : "implicit final def"}, {"label" : "decodeArray", "tail" : "(decodeA: Decoder[A], factory: CanBuildFrom[Nothing, A, Array[A]]): Decoder[Array[A]]", "member" : "io.circe.CollectionDecoders.decodeArray", "link" : "io\/circe\/Decoder$.html#decodeArray[A](implicitdecodeA:io.circe.Decoder[A],implicitfactory:scala.collection.generic.CanBuildFrom[Nothing,A,Array[A]]):io.circe.Decoder[Array[A]]", "kind" : "implicit final def"}, {"label" : "decodeIterable", "tail" : "(decodeA: Decoder[A], factory: CanBuildFrom[Nothing, A, C[A]]): Decoder[C[A]]", "member" : "io.circe.CollectionDecoders.decodeIterable", "link" : "io\/circe\/Decoder$.html#decodeIterable[A,C[A]<:Iterable[A]](implicitdecodeA:io.circe.Decoder[A],implicitfactory:scala.collection.generic.CanBuildFrom[Nothing,A,C[A]]):io.circe.Decoder[C[A]]", "kind" : "implicit final def"}, {"label" : "decodeMapLike", "tail" : "(decodeK: KeyDecoder[K], decodeV: Decoder[V], factory: CanBuildFrom[Nothing, (K, V), M[K, V]]): Decoder[M[K, V]]", "member" : "io.circe.CollectionDecoders.decodeMapLike", "link" : "io\/circe\/Decoder$.html#decodeMapLike[K,V,M[K,V]<:scala.collection.Map[K,V]](implicitdecodeK:io.circe.KeyDecoder[K],implicitdecodeV:io.circe.Decoder[V],implicitfactory:scala.collection.generic.CanBuildFrom[Nothing,(K,V),M[K,V]]):io.circe.Decoder[M[K,V]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Decoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Decoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Decoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Decoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Decoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Decoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Decoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Decoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Decoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Decoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Decoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Decoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Decoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Decoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Decoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Decoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Decoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Decoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Decoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/Decoder.html", "kind" : "trait"}, {"name" : "io.circe.DecodingFailure", "shortDescription" : "An exception representing a decoding failure and (lazily) capturing thedecoding history resulting in the failure.", "object" : "io\/circe\/DecodingFailure$.html", "members_class" : [{"label" : "getStackTraceString", "tail" : "(): String", "member" : "scala.Predef.RichException.getStackTraceString", "link" : "io\/circe\/DecodingFailure.html#getStackTraceString:String", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/DecodingFailure.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/DecodingFailure.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DecodingFailure) ⇒ Boolean, msg: ⇒ Any): DecodingFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/DecodingFailure.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DecodingFailure) ⇒ Boolean): DecodingFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/DecodingFailure.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DecodingFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/DecodingFailure.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DecodingFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/DecodingFailure.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DecodingFailure, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/DecodingFailure.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DecodingFailure, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/DecodingFailure.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "io.circe.DecodingFailure.hashCode", "link" : "io\/circe\/DecodingFailure.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "io.circe.DecodingFailure.equals", "link" : "io\/circe\/DecodingFailure.html#equals(that:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "io.circe.DecodingFailure.toString", "link" : "io\/circe\/DecodingFailure.html#toString():String", "kind" : "final def"}, {"label" : "withMessage", "tail" : "(message: String): DecodingFailure", "member" : "io.circe.DecodingFailure.withMessage", "link" : "io\/circe\/DecodingFailure.html#withMessage(message:String):io.circe.DecodingFailure", "kind" : "final def"}, {"label" : "copy", "tail" : "(message: String, history: ⇒ List[CursorOp]): DecodingFailure", "member" : "io.circe.DecodingFailure.copy", "link" : "io\/circe\/DecodingFailure.html#copy(message:String,history:=>List[io.circe.CursorOp]):io.circe.DecodingFailure", "kind" : "final def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "io.circe.DecodingFailure.getMessage", "link" : "io\/circe\/DecodingFailure.html#getMessage():String", "kind" : "final def"}, {"label" : "message", "tail" : ": String", "member" : "io.circe.DecodingFailure.message", "link" : "io\/circe\/DecodingFailure.html#message:String", "kind" : "val"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "io.circe.Error.fillInStackTrace", "link" : "io\/circe\/DecodingFailure.html#fillInStackTrace():Throwable", "kind" : "final def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "io\/circe\/DecodingFailure.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "io\/circe\/DecodingFailure.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "io\/circe\/DecodingFailure.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "io\/circe\/DecodingFailure.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/DecodingFailure.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/DecodingFailure.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/DecodingFailure.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "io\/circe\/DecodingFailure.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "io\/circe\/DecodingFailure.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "io\/circe\/DecodingFailure.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/DecodingFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/DecodingFailure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/DecodingFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/DecodingFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/DecodingFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/DecodingFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/DecodingFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/DecodingFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/DecodingFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/DecodingFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/DecodingFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/DecodingFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/DecodingFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/DecodingFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/DecodingFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/DecodingFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "history", "tail" : "(): List[CursorOp]", "member" : "io.circe.DecodingFailure.history", "link" : "io\/circe\/DecodingFailure.html#history:List[io.circe.CursorOp]", "kind" : "abstract def"}], "members_object" : [{"label" : "showDecodingFailure", "tail" : ": Show[DecodingFailure]", "member" : "io.circe.DecodingFailure.showDecodingFailure", "link" : "io\/circe\/DecodingFailure$.html#showDecodingFailure:cats.Show[io.circe.DecodingFailure]", "kind" : "implicit final val"}, {"label" : "eqDecodingFailure", "tail" : ": Eq[DecodingFailure]", "member" : "io.circe.DecodingFailure.eqDecodingFailure", "link" : "io\/circe\/DecodingFailure$.html#eqDecodingFailure:cats.Eq[io.circe.DecodingFailure]", "kind" : "implicit final val"}, {"label" : "fromThrowable", "tail" : "(t: Throwable, ops: ⇒ List[CursorOp]): DecodingFailure", "member" : "io.circe.DecodingFailure.fromThrowable", "link" : "io\/circe\/DecodingFailure$.html#fromThrowable(t:Throwable,ops:=>List[io.circe.CursorOp]):io.circe.DecodingFailure", "kind" : "def"}, {"label" : "unapply", "tail" : "(error: Error): Option[(String, List[CursorOp])]", "member" : "io.circe.DecodingFailure.unapply", "link" : "io\/circe\/DecodingFailure$.html#unapply(error:io.circe.Error):Option[(String,List[io.circe.CursorOp])]", "kind" : "def"}, {"label" : "apply", "tail" : "(message: String, ops: ⇒ List[CursorOp]): DecodingFailure", "member" : "io.circe.DecodingFailure.apply", "link" : "io\/circe\/DecodingFailure$.html#apply(message:String,ops:=>List[io.circe.CursorOp]):io.circe.DecodingFailure", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/DecodingFailure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/DecodingFailure$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/DecodingFailure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/DecodingFailure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/DecodingFailure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/DecodingFailure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/DecodingFailure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/DecodingFailure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/DecodingFailure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/DecodingFailure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/DecodingFailure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/DecodingFailure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/DecodingFailure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/DecodingFailure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/DecodingFailure$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/DecodingFailure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/DecodingFailure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/DecodingFailure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/DecodingFailure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/DecodingFailure.html", "kind" : "class"}, {"name" : "io.circe.disjunctionCodecs", "shortDescription" : "Decoder and Encoder instances for disjunction types with reasonable names for the sides.", "object" : "io\/circe\/disjunctionCodecs$.html", "members_object" : [{"label" : "encodeValidated", "tail" : "(ee: Encoder[E], ea: Encoder[A]): AsObject[Validated[E, A]]", "member" : "io.circe.disjunctionCodecs.encodeValidated", "link" : "io\/circe\/disjunctionCodecs$.html#encodeValidated[E,A](implicitee:io.circe.Encoder[E],implicitea:io.circe.Encoder[A]):io.circe.Encoder.AsObject[cats.data.Validated[E,A]]", "kind" : "implicit final def"}, {"label" : "encodeEither", "tail" : "(ea: Encoder[A], eb: Encoder[B]): AsObject[Either[A, B]]", "member" : "io.circe.disjunctionCodecs.encodeEither", "link" : "io\/circe\/disjunctionCodecs$.html#encodeEither[A,B](implicitea:io.circe.Encoder[A],impliciteb:io.circe.Encoder[B]):io.circe.Encoder.AsObject[Either[A,B]]", "kind" : "implicit final def"}, {"label" : "decodeValidated", "tail" : "(de: Decoder[E], da: Decoder[A]): Decoder[Validated[E, A]]", "member" : "io.circe.disjunctionCodecs.decodeValidated", "link" : "io\/circe\/disjunctionCodecs$.html#decodeValidated[E,A](implicitde:io.circe.Decoder[E],implicitda:io.circe.Decoder[A]):io.circe.Decoder[cats.data.Validated[E,A]]", "kind" : "implicit final def"}, {"label" : "decoderEither", "tail" : "(da: Decoder[A], db: Decoder[B]): Decoder[Either[A, B]]", "member" : "io.circe.disjunctionCodecs.decoderEither", "link" : "io\/circe\/disjunctionCodecs$.html#decoderEither[A,B](implicitda:io.circe.Decoder[A],implicitdb:io.circe.Decoder[B]):io.circe.Decoder[Either[A,B]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/disjunctionCodecs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/disjunctionCodecs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/disjunctionCodecs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/disjunctionCodecs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/disjunctionCodecs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/disjunctionCodecs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/disjunctionCodecs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/disjunctionCodecs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/disjunctionCodecs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/disjunctionCodecs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/disjunctionCodecs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/disjunctionCodecs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/disjunctionCodecs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/disjunctionCodecs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/disjunctionCodecs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/disjunctionCodecs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/disjunctionCodecs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/disjunctionCodecs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/disjunctionCodecs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "io.circe.Encoder", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/Encoder.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/Encoder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Encoder[A]) ⇒ Boolean, msg: ⇒ Any): Encoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Encoder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Encoder[A]) ⇒ Boolean): Encoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Encoder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Encoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Encoder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Encoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Encoder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Encoder[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/Encoder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Encoder[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/Encoder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "mapJson", "tail" : "(f: (Json) ⇒ Json): Encoder[A]", "member" : "io.circe.Encoder.mapJson", "link" : "io\/circe\/Encoder.html#mapJson(f:io.circe.Json=>io.circe.Json):io.circe.Encoder[A]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) ⇒ A): Encoder[B]", "member" : "io.circe.Encoder.contramap", "link" : "io\/circe\/Encoder.html#contramap[B](f:B=>A):io.circe.Encoder[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Encoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Encoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Encoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Encoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Encoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Encoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Encoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Encoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Encoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Encoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Encoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Encoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Encoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Encoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Encoder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Encoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Encoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Encoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Encoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): Json", "member" : "io.circe.Encoder.apply", "link" : "io\/circe\/Encoder.html#apply(a:A):io.circe.Json", "kind" : "abstract def"}], "shortDescription" : "A type class that provides a conversion from a value of type A to a Json value.", "object" : "io\/circe\/Encoder$.html", "members_object" : [{"label" : "IterableAsArrayEncoder", "tail" : "", "member" : "io.circe.MidPriorityEncoders.IterableAsArrayEncoder", "link" : "io\/circe\/Encoder$.html#IterableAsArrayEncoder[A,C[_]]extendsEncoder.AsArray[C[A]]", "kind" : "abstract class"}, {"label" : "AsObject", "tail" : "", "member" : "io.circe.Encoder.AsObject", "link" : "io\/circe\/Encoder$.html#AsObject", "kind" : "object"}, {"label" : "AsObject", "tail" : "", "member" : "io.circe.Encoder.AsObject", "link" : "io\/circe\/Encoder$.html#AsObject[A]extendsEncoder.AsRoot[A]", "kind" : "trait"}, {"label" : "AsArray", "tail" : "", "member" : "io.circe.Encoder.AsArray", "link" : "io\/circe\/Encoder$.html#AsArray", "kind" : "object"}, {"label" : "AsArray", "tail" : "", "member" : "io.circe.Encoder.AsArray", "link" : "io\/circe\/Encoder$.html#AsArray[A]extendsEncoder.AsRoot[A]", "kind" : "trait"}, {"label" : "AsRoot", "tail" : "", "member" : "io.circe.Encoder.AsRoot", "link" : "io\/circe\/Encoder$.html#AsRoot", "kind" : "object"}, {"label" : "AsRoot", "tail" : "", "member" : "io.circe.Encoder.AsRoot", "link" : "io\/circe\/Encoder$.html#AsRoot[A]extendsEncoder[A]", "kind" : "trait"}, {"label" : "currencyEncoder", "tail" : ": Encoder[Currency]", "member" : "io.circe.Encoder.currencyEncoder", "link" : "io\/circe\/Encoder$.html#currencyEncoder:io.circe.Encoder[java.util.Currency]", "kind" : "implicit final lazy val"}, {"label" : "encodeZoneOffset", "tail" : ": Encoder[ZoneOffset]", "member" : "io.circe.Encoder.encodeZoneOffset", "link" : "io\/circe\/Encoder$.html#encodeZoneOffset:io.circe.Encoder[java.time.ZoneOffset]", "kind" : "implicit final lazy val"}, {"label" : "encodeZonedDateTime", "tail" : ": Encoder[ZonedDateTime]", "member" : "io.circe.Encoder.encodeZonedDateTime", "link" : "io\/circe\/Encoder$.html#encodeZonedDateTime:io.circe.Encoder[java.time.ZonedDateTime]", "kind" : "implicit final lazy val"}, {"label" : "encodeYearMonth", "tail" : ": Encoder[YearMonth]", "member" : "io.circe.Encoder.encodeYearMonth", "link" : "io\/circe\/Encoder$.html#encodeYearMonth:io.circe.Encoder[java.time.YearMonth]", "kind" : "implicit final lazy val"}, {"label" : "encodeYear", "tail" : ": Encoder[Year]", "member" : "io.circe.Encoder.encodeYear", "link" : "io\/circe\/Encoder$.html#encodeYear:io.circe.Encoder[java.time.Year]", "kind" : "implicit final lazy val"}, {"label" : "encodeOffsetDateTime", "tail" : ": Encoder[OffsetDateTime]", "member" : "io.circe.Encoder.encodeOffsetDateTime", "link" : "io\/circe\/Encoder$.html#encodeOffsetDateTime:io.circe.Encoder[java.time.OffsetDateTime]", "kind" : "implicit final lazy val"}, {"label" : "encodeOffsetTime", "tail" : ": Encoder[OffsetTime]", "member" : "io.circe.Encoder.encodeOffsetTime", "link" : "io\/circe\/Encoder$.html#encodeOffsetTime:io.circe.Encoder[java.time.OffsetTime]", "kind" : "implicit final lazy val"}, {"label" : "encodeMonthDay", "tail" : ": Encoder[MonthDay]", "member" : "io.circe.Encoder.encodeMonthDay", "link" : "io\/circe\/Encoder$.html#encodeMonthDay:io.circe.Encoder[java.time.MonthDay]", "kind" : "implicit final lazy val"}, {"label" : "encodeLocalDateTime", "tail" : ": Encoder[LocalDateTime]", "member" : "io.circe.Encoder.encodeLocalDateTime", "link" : "io\/circe\/Encoder$.html#encodeLocalDateTime:io.circe.Encoder[java.time.LocalDateTime]", "kind" : "implicit final lazy val"}, {"label" : "encodeLocalTime", "tail" : ": Encoder[LocalTime]", "member" : "io.circe.Encoder.encodeLocalTime", "link" : "io\/circe\/Encoder$.html#encodeLocalTime:io.circe.Encoder[java.time.LocalTime]", "kind" : "implicit final lazy val"}, {"label" : "encodeLocalDate", "tail" : ": Encoder[LocalDate]", "member" : "io.circe.Encoder.encodeLocalDate", "link" : "io\/circe\/Encoder$.html#encodeLocalDate:io.circe.Encoder[java.time.LocalDate]", "kind" : "implicit final lazy val"}, {"label" : "encodeZoneOffsetWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[ZoneOffset]", "member" : "io.circe.Encoder.encodeZoneOffsetWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeZoneOffsetWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.ZoneOffset]", "kind" : "final def"}, {"label" : "encodeZonedDateTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[ZonedDateTime]", "member" : "io.circe.Encoder.encodeZonedDateTimeWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeZonedDateTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.ZonedDateTime]", "kind" : "final def"}, {"label" : "encodeYearMonthWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[YearMonth]", "member" : "io.circe.Encoder.encodeYearMonthWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeYearMonthWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.YearMonth]", "kind" : "final def"}, {"label" : "encodeYearWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[Year]", "member" : "io.circe.Encoder.encodeYearWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeYearWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.Year]", "kind" : "final def"}, {"label" : "encodeOffsetDateTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[OffsetDateTime]", "member" : "io.circe.Encoder.encodeOffsetDateTimeWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeOffsetDateTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.OffsetDateTime]", "kind" : "final def"}, {"label" : "encodeOffsetTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[OffsetTime]", "member" : "io.circe.Encoder.encodeOffsetTimeWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeOffsetTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.OffsetTime]", "kind" : "final def"}, {"label" : "encodeMonthDayWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[MonthDay]", "member" : "io.circe.Encoder.encodeMonthDayWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeMonthDayWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.MonthDay]", "kind" : "final def"}, {"label" : "encodeLocalDateTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[LocalDateTime]", "member" : "io.circe.Encoder.encodeLocalDateTimeWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeLocalDateTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.LocalDateTime]", "kind" : "final def"}, {"label" : "encodeLocalTimeWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[LocalTime]", "member" : "io.circe.Encoder.encodeLocalTimeWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeLocalTimeWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.LocalTime]", "kind" : "final def"}, {"label" : "encodeLocalDateWithFormatter", "tail" : "(formatter: DateTimeFormatter): Encoder[LocalDate]", "member" : "io.circe.Encoder.encodeLocalDateWithFormatter", "link" : "io\/circe\/Encoder$.html#encodeLocalDateWithFormatter(formatter:java.time.format.DateTimeFormatter):io.circe.Encoder[java.time.LocalDate]", "kind" : "final def"}, {"label" : "encodeZoneId", "tail" : ": Encoder[ZoneId]", "member" : "io.circe.Encoder.encodeZoneId", "link" : "io\/circe\/Encoder$.html#encodeZoneId:io.circe.Encoder[java.time.ZoneId]", "kind" : "implicit final lazy val"}, {"label" : "encodePeriod", "tail" : ": Encoder[Period]", "member" : "io.circe.Encoder.encodePeriod", "link" : "io\/circe\/Encoder$.html#encodePeriod:io.circe.Encoder[java.time.Period]", "kind" : "implicit final lazy val"}, {"label" : "encodeInstant", "tail" : ": Encoder[Instant]", "member" : "io.circe.Encoder.encodeInstant", "link" : "io\/circe\/Encoder$.html#encodeInstant:io.circe.Encoder[java.time.Instant]", "kind" : "implicit final lazy val"}, {"label" : "encodeDuration", "tail" : ": Encoder[Duration]", "member" : "io.circe.Encoder.encodeDuration", "link" : "io\/circe\/Encoder$.html#encodeDuration:io.circe.Encoder[java.time.Duration]", "kind" : "implicit final lazy val"}, {"label" : "encoderContravariant", "tail" : ": Contravariant[Encoder]", "member" : "io.circe.Encoder.encoderContravariant", "link" : "io\/circe\/Encoder$.html#encoderContravariant:cats.Contravariant[io.circe.Encoder]", "kind" : "implicit final val"}, {"label" : "encodeValidated", "tail" : "(failureKey: String, successKey: String)(encodeE: Encoder[E], encodeA: Encoder[A]): AsObject[Validated[E, A]]", "member" : "io.circe.Encoder.encodeValidated", "link" : "io\/circe\/Encoder$.html#encodeValidated[E,A](failureKey:String,successKey:String)(implicitencodeE:io.circe.Encoder[E],implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsObject[cats.data.Validated[E,A]]", "kind" : "final def"}, {"label" : "encodeEither", "tail" : "(leftKey: String, rightKey: String)(encodeA: Encoder[A], encodeB: Encoder[B]): AsObject[Either[A, B]]", "member" : "io.circe.Encoder.encodeEither", "link" : "io\/circe\/Encoder$.html#encodeEither[A,B](leftKey:String,rightKey:String)(implicitencodeA:io.circe.Encoder[A],implicitencodeB:io.circe.Encoder[B]):io.circe.Encoder.AsObject[Either[A,B]]", "kind" : "final def"}, {"label" : "encodeMapLike", "tail" : "(encodeK: KeyEncoder[K], encodeV: Encoder[V], ev: (M[K, V]) ⇒ Iterable[(K, V)]): AsObject[M[K, V]]", "member" : "io.circe.Encoder.encodeMapLike", "link" : "io\/circe\/Encoder$.html#encodeMapLike[K,V,M[K,V]<:scala.collection.Map[K,V]](implicitencodeK:io.circe.KeyEncoder[K],implicitencodeV:io.circe.Encoder[V],implicitev:M[K,V]=>Iterable[(K,V)]):io.circe.Encoder.AsObject[M[K,V]]", "kind" : "implicit final def"}, {"label" : "encodeMap", "tail" : "(encodeK: KeyEncoder[K], encodeV: Encoder[V]): AsObject[Map[K, V]]", "member" : "io.circe.Encoder.encodeMap", "link" : "io\/circe\/Encoder$.html#encodeMap[K,V](implicitencodeK:io.circe.KeyEncoder[K],implicitencodeV:io.circe.Encoder[V]):io.circe.Encoder.AsObject[scala.collection.immutable.Map[K,V]]", "kind" : "implicit final def"}, {"label" : "encodeOneAnd", "tail" : "(encodeA: Encoder[A], ev: (C[A]) ⇒ Iterable[A]): AsArray[OneAnd[C, A]]", "member" : "io.circe.Encoder.encodeOneAnd", "link" : "io\/circe\/Encoder$.html#encodeOneAnd[A,C[_]](implicitencodeA:io.circe.Encoder[A],implicitev:C[A]=>Iterable[A]):io.circe.Encoder.AsArray[cats.data.OneAnd[C,A]]", "kind" : "implicit final def"}, {"label" : "encodeNonEmptyChain", "tail" : "(encodeA: Encoder[A]): AsArray[NonEmptyChain[A]]", "member" : "io.circe.Encoder.encodeNonEmptyChain", "link" : "io\/circe\/Encoder$.html#encodeNonEmptyChain[A](implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsArray[cats.data.NonEmptyChain[A]]", "kind" : "implicit final def"}, {"label" : "encodeNonEmptyMap", "tail" : "(encodeK: KeyEncoder[K], encodeV: Encoder[V]): AsObject[NonEmptyMap[K, V]]", "member" : "io.circe.Encoder.encodeNonEmptyMap", "link" : "io\/circe\/Encoder$.html#encodeNonEmptyMap[K,V](implicitencodeK:io.circe.KeyEncoder[K],implicitencodeV:io.circe.Encoder[V]):io.circe.Encoder.AsObject[cats.data.NonEmptyMap[K,V]]", "kind" : "implicit final def"}, {"label" : "encodeNonEmptySet", "tail" : "(encodeA: Encoder[A]): AsArray[NonEmptySet[A]]", "member" : "io.circe.Encoder.encodeNonEmptySet", "link" : "io\/circe\/Encoder$.html#encodeNonEmptySet[A](implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsArray[cats.data.NonEmptySet[A]]", "kind" : "implicit final def"}, {"label" : "encodeNonEmptyVector", "tail" : "(encodeA: Encoder[A]): AsArray[NonEmptyVector[A]]", "member" : "io.circe.Encoder.encodeNonEmptyVector", "link" : "io\/circe\/Encoder$.html#encodeNonEmptyVector[A](implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsArray[cats.data.NonEmptyVector[A]]", "kind" : "implicit final def"}, {"label" : "encodeNonEmptyList", "tail" : "(encodeA: Encoder[A]): AsArray[NonEmptyList[A]]", "member" : "io.circe.Encoder.encodeNonEmptyList", "link" : "io\/circe\/Encoder$.html#encodeNonEmptyList[A](implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsArray[cats.data.NonEmptyList[A]]", "kind" : "implicit final def"}, {"label" : "encodeChain", "tail" : "(encodeA: Encoder[A]): AsArray[Chain[A]]", "member" : "io.circe.Encoder.encodeChain", "link" : "io\/circe\/Encoder$.html#encodeChain[A](implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsArray[cats.data.Chain[A]]", "kind" : "implicit final def"}, {"label" : "encodeVector", "tail" : "(encodeA: Encoder[A]): AsArray[Vector[A]]", "member" : "io.circe.Encoder.encodeVector", "link" : "io\/circe\/Encoder$.html#encodeVector[A](implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsArray[Vector[A]]", "kind" : "implicit final def"}, {"label" : "encodeList", "tail" : "(encodeA: Encoder[A]): AsArray[List[A]]", "member" : "io.circe.Encoder.encodeList", "link" : "io\/circe\/Encoder$.html#encodeList[A](implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsArray[List[A]]", "kind" : "implicit final def"}, {"label" : "encodeSet", "tail" : "(encodeA: Encoder[A]): AsArray[Set[A]]", "member" : "io.circe.Encoder.encodeSet", "link" : "io\/circe\/Encoder$.html#encodeSet[A](implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsArray[scala.collection.immutable.Set[A]]", "kind" : "implicit final def"}, {"label" : "encodeSeq", "tail" : "(encodeA: Encoder[A]): AsArray[Seq[A]]", "member" : "io.circe.Encoder.encodeSeq", "link" : "io\/circe\/Encoder$.html#encodeSeq[A](implicitencodeA:io.circe.Encoder[A]):io.circe.Encoder.AsArray[Seq[A]]", "kind" : "implicit final def"}, {"label" : "encodeNone", "tail" : ": Encoder[None.type]", "member" : "io.circe.Encoder.encodeNone", "link" : "io\/circe\/Encoder$.html#encodeNone:io.circe.Encoder[None.type]", "kind" : "implicit final val"}, {"label" : "encodeSome", "tail" : "(e: Encoder[A]): Encoder[Some[A]]", "member" : "io.circe.Encoder.encodeSome", "link" : "io\/circe\/Encoder$.html#encodeSome[A](implicite:io.circe.Encoder[A]):io.circe.Encoder[Some[A]]", "kind" : "implicit final def"}, {"label" : "encodeOption", "tail" : "(e: Encoder[A]): Encoder[Option[A]]", "member" : "io.circe.Encoder.encodeOption", "link" : "io\/circe\/Encoder$.html#encodeOption[A](implicite:io.circe.Encoder[A]):io.circe.Encoder[Option[A]]", "kind" : "implicit final def"}, {"label" : "encodeUUID", "tail" : ": Encoder[UUID]", "member" : "io.circe.Encoder.encodeUUID", "link" : "io\/circe\/Encoder$.html#encodeUUID:io.circe.Encoder[java.util.UUID]", "kind" : "implicit final lazy val"}, {"label" : "encodeJavaBigDecimal", "tail" : ": Encoder[BigDecimal]", "member" : "io.circe.Encoder.encodeJavaBigDecimal", "link" : "io\/circe\/Encoder$.html#encodeJavaBigDecimal:io.circe.Encoder[java.math.BigDecimal]", "kind" : "implicit final lazy val"}, {"label" : "encodeBigDecimal", "tail" : ": Encoder[BigDecimal]", "member" : "io.circe.Encoder.encodeBigDecimal", "link" : "io\/circe\/Encoder$.html#encodeBigDecimal:io.circe.Encoder[BigDecimal]", "kind" : "implicit final val"}, {"label" : "encodeJavaBigInteger", "tail" : ": Encoder[BigInteger]", "member" : "io.circe.Encoder.encodeJavaBigInteger", "link" : "io\/circe\/Encoder$.html#encodeJavaBigInteger:io.circe.Encoder[java.math.BigInteger]", "kind" : "implicit final lazy val"}, {"label" : "encodeBigInt", "tail" : ": Encoder[BigInt]", "member" : "io.circe.Encoder.encodeBigInt", "link" : "io\/circe\/Encoder$.html#encodeBigInt:io.circe.Encoder[BigInt]", "kind" : "implicit final val"}, {"label" : "encodeJavaLong", "tail" : ": Encoder[Long]", "member" : "io.circe.Encoder.encodeJavaLong", "link" : "io\/circe\/Encoder$.html#encodeJavaLong:io.circe.Encoder[Long]", "kind" : "implicit final lazy val"}, {"label" : "encodeLong", "tail" : ": Encoder[Long]", "member" : "io.circe.Encoder.encodeLong", "link" : "io\/circe\/Encoder$.html#encodeLong:io.circe.Encoder[Long]", "kind" : "implicit final val"}, {"label" : "encodeJavaInteger", "tail" : ": Encoder[Integer]", "member" : "io.circe.Encoder.encodeJavaInteger", "link" : "io\/circe\/Encoder$.html#encodeJavaInteger:io.circe.Encoder[Integer]", "kind" : "implicit final lazy val"}, {"label" : "encodeInt", "tail" : ": Encoder[Int]", "member" : "io.circe.Encoder.encodeInt", "link" : "io\/circe\/Encoder$.html#encodeInt:io.circe.Encoder[Int]", "kind" : "implicit final val"}, {"label" : "encodeJavaShort", "tail" : ": Encoder[Short]", "member" : "io.circe.Encoder.encodeJavaShort", "link" : "io\/circe\/Encoder$.html#encodeJavaShort:io.circe.Encoder[Short]", "kind" : "implicit final lazy val"}, {"label" : "encodeShort", "tail" : ": Encoder[Short]", "member" : "io.circe.Encoder.encodeShort", "link" : "io\/circe\/Encoder$.html#encodeShort:io.circe.Encoder[Short]", "kind" : "implicit final val"}, {"label" : "encodeJavaByte", "tail" : ": Encoder[Byte]", "member" : "io.circe.Encoder.encodeJavaByte", "link" : "io\/circe\/Encoder$.html#encodeJavaByte:io.circe.Encoder[Byte]", "kind" : "implicit final lazy val"}, {"label" : "encodeByte", "tail" : ": Encoder[Byte]", "member" : "io.circe.Encoder.encodeByte", "link" : "io\/circe\/Encoder$.html#encodeByte:io.circe.Encoder[Byte]", "kind" : "implicit final val"}, {"label" : "encodeJavaDouble", "tail" : ": Encoder[Double]", "member" : "io.circe.Encoder.encodeJavaDouble", "link" : "io\/circe\/Encoder$.html#encodeJavaDouble:io.circe.Encoder[Double]", "kind" : "implicit final lazy val"}, {"label" : "encodeDouble", "tail" : ": Encoder[Double]", "member" : "io.circe.Encoder.encodeDouble", "link" : "io\/circe\/Encoder$.html#encodeDouble:io.circe.Encoder[Double]", "kind" : "implicit final val"}, {"label" : "encodeJavaFloat", "tail" : ": Encoder[Float]", "member" : "io.circe.Encoder.encodeJavaFloat", "link" : "io\/circe\/Encoder$.html#encodeJavaFloat:io.circe.Encoder[Float]", "kind" : "implicit final lazy val"}, {"label" : "encodeFloat", "tail" : ": Encoder[Float]", "member" : "io.circe.Encoder.encodeFloat", "link" : "io\/circe\/Encoder$.html#encodeFloat:io.circe.Encoder[Float]", "kind" : "implicit final val"}, {"label" : "encodeJavaCharacter", "tail" : ": Encoder[Character]", "member" : "io.circe.Encoder.encodeJavaCharacter", "link" : "io\/circe\/Encoder$.html#encodeJavaCharacter:io.circe.Encoder[Character]", "kind" : "implicit final lazy val"}, {"label" : "encodeChar", "tail" : ": Encoder[Char]", "member" : "io.circe.Encoder.encodeChar", "link" : "io\/circe\/Encoder$.html#encodeChar:io.circe.Encoder[Char]", "kind" : "implicit final val"}, {"label" : "encodeJavaBoolean", "tail" : ": Encoder[Boolean]", "member" : "io.circe.Encoder.encodeJavaBoolean", "link" : "io\/circe\/Encoder$.html#encodeJavaBoolean:io.circe.Encoder[Boolean]", "kind" : "implicit final lazy val"}, {"label" : "encodeBoolean", "tail" : ": Encoder[Boolean]", "member" : "io.circe.Encoder.encodeBoolean", "link" : "io\/circe\/Encoder$.html#encodeBoolean:io.circe.Encoder[Boolean]", "kind" : "implicit final val"}, {"label" : "encodeUnit", "tail" : ": AsObject[Unit]", "member" : "io.circe.Encoder.encodeUnit", "link" : "io\/circe\/Encoder$.html#encodeUnit:io.circe.Encoder.AsObject[Unit]", "kind" : "implicit final val"}, {"label" : "encodeString", "tail" : ": Encoder[String]", "member" : "io.circe.Encoder.encodeString", "link" : "io\/circe\/Encoder$.html#encodeString:io.circe.Encoder[String]", "kind" : "implicit final val"}, {"label" : "encodeJsonNumber", "tail" : ": Encoder[JsonNumber]", "member" : "io.circe.Encoder.encodeJsonNumber", "link" : "io\/circe\/Encoder$.html#encodeJsonNumber:io.circe.Encoder[io.circe.JsonNumber]", "kind" : "implicit final val"}, {"label" : "encodeJsonObject", "tail" : ": AsObject[JsonObject]", "member" : "io.circe.Encoder.encodeJsonObject", "link" : "io\/circe\/Encoder$.html#encodeJsonObject:io.circe.Encoder.AsObject[io.circe.JsonObject]", "kind" : "implicit final val"}, {"label" : "encodeJson", "tail" : ": Encoder[Json]", "member" : "io.circe.Encoder.encodeJson", "link" : "io\/circe\/Encoder$.html#encodeJson:io.circe.Encoder[io.circe.Json]", "kind" : "implicit final val"}, {"label" : "encodeFoldable", "tail" : "(e: Encoder[A], F: Foldable[F]): AsArray[F[A]]", "member" : "io.circe.Encoder.encodeFoldable", "link" : "io\/circe\/Encoder$.html#encodeFoldable[F[_],A](implicite:io.circe.Encoder[A],implicitF:cats.Foldable[F]):io.circe.Encoder.AsArray[F[A]]", "kind" : "final def"}, {"label" : "instance", "tail" : "(f: (A) ⇒ Json): Encoder[A]", "member" : "io.circe.Encoder.instance", "link" : "io\/circe\/Encoder$.html#instance[A](f:A=>io.circe.Json):io.circe.Encoder[A]", "kind" : "final def"}, {"label" : "apply", "tail" : "(instance: Encoder[A]): Encoder[A]", "member" : "io.circe.Encoder.apply", "link" : "io\/circe\/Encoder$.html#apply[A](implicitinstance:io.circe.Encoder[A]):io.circe.Encoder[A]", "kind" : "final def"}, {"label" : "encodeIterable", "tail" : "(encodeA: Encoder[A], ev: (C[A]) ⇒ Iterable[A]): AsArray[C[A]]", "member" : "io.circe.MidPriorityEncoders.encodeIterable", "link" : "io\/circe\/Encoder$.html#encodeIterable[A,C[_]](implicitencodeA:io.circe.Encoder[A],implicitev:C[A]=>Iterable[A]):io.circe.Encoder.AsArray[C[A]]", "kind" : "implicit final def"}, {"label" : "importedEncoder", "tail" : "(exported: Exported[Encoder[A]]): Encoder[A]", "member" : "io.circe.LowPriorityEncoders.importedEncoder", "link" : "io\/circe\/Encoder$.html#importedEncoder[A](implicitexported:io.circe.export.Exported[io.circe.Encoder[A]]):io.circe.Encoder[A]", "kind" : "implicit final def"}, {"label" : "encodeEnumeration", "tail" : "(enumeration: E): Encoder[EnumerationEncoders.encodeEnumeration.E.Value]", "member" : "io.circe.EnumerationEncoders.encodeEnumeration", "link" : "io\/circe\/Encoder$.html#encodeEnumeration[E<:Enumeration](enumeration:E):io.circe.Encoder[E#Value]", "kind" : "final def"}, {"label" : "forProduct22", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String, nameA19: String, nameA20: String, nameA21: String)(f: (Source) ⇒ Product22[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18], encodeA19: Encoder[A19], encodeA20: Encoder[A20], encodeA21: Encoder[A21]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct22", "link" : "io\/circe\/Encoder$.html#forProduct22[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String,nameA19:String,nameA20:String,nameA21:String)(f:Source=>Product22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18],implicitencodeA19:io.circe.Encoder[A19],implicitencodeA20:io.circe.Encoder[A20],implicitencodeA21:io.circe.Encoder[A21]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct21", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String, nameA19: String, nameA20: String)(f: (Source) ⇒ Product21[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18], encodeA19: Encoder[A19], encodeA20: Encoder[A20]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct21", "link" : "io\/circe\/Encoder$.html#forProduct21[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String,nameA19:String,nameA20:String)(f:Source=>Product21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18],implicitencodeA19:io.circe.Encoder[A19],implicitencodeA20:io.circe.Encoder[A20]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct20", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String, nameA19: String)(f: (Source) ⇒ Product20[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18], encodeA19: Encoder[A19]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct20", "link" : "io\/circe\/Encoder$.html#forProduct20[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String,nameA19:String)(f:Source=>Product20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18],implicitencodeA19:io.circe.Encoder[A19]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct19", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String, nameA18: String)(f: (Source) ⇒ Product19[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct19", "link" : "io\/circe\/Encoder$.html#forProduct19[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String,nameA18:String)(f:Source=>Product19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct18", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String, nameA17: String)(f: (Source) ⇒ Product18[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct18", "link" : "io\/circe\/Encoder$.html#forProduct18[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String,nameA17:String)(f:Source=>Product18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct17", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String, nameA16: String)(f: (Source) ⇒ Product17[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct17", "link" : "io\/circe\/Encoder$.html#forProduct17[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String,nameA16:String)(f:Source=>Product17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct16", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String, nameA15: String)(f: (Source) ⇒ Product16[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct16", "link" : "io\/circe\/Encoder$.html#forProduct16[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String,nameA15:String)(f:Source=>Product16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct15", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String, nameA14: String)(f: (Source) ⇒ Product15[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct15", "link" : "io\/circe\/Encoder$.html#forProduct15[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String,nameA14:String)(f:Source=>Product15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct14", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String, nameA13: String)(f: (Source) ⇒ Product14[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct14", "link" : "io\/circe\/Encoder$.html#forProduct14[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String,nameA13:String)(f:Source=>Product14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct13", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String, nameA12: String)(f: (Source) ⇒ Product13[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct13", "link" : "io\/circe\/Encoder$.html#forProduct13[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String,nameA12:String)(f:Source=>Product13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct12", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String, nameA11: String)(f: (Source) ⇒ Product12[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct12", "link" : "io\/circe\/Encoder$.html#forProduct12[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String,nameA11:String)(f:Source=>Product12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct11", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String, nameA10: String)(f: (Source) ⇒ Product11[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct11", "link" : "io\/circe\/Encoder$.html#forProduct11[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String,nameA10:String)(f:Source=>Product11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct10", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String, nameA9: String)(f: (Source) ⇒ Product10[A0, A1, A2, A3, A4, A5, A6, A7, A8, A9])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct10", "link" : "io\/circe\/Encoder$.html#forProduct10[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String,nameA9:String)(f:Source=>Product10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct9", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String, nameA8: String)(f: (Source) ⇒ Product9[A0, A1, A2, A3, A4, A5, A6, A7, A8])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct9", "link" : "io\/circe\/Encoder$.html#forProduct9[Source,A0,A1,A2,A3,A4,A5,A6,A7,A8](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String,nameA8:String)(f:Source=>Product9[A0,A1,A2,A3,A4,A5,A6,A7,A8])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct8", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String, nameA7: String)(f: (Source) ⇒ Product8[A0, A1, A2, A3, A4, A5, A6, A7])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct8", "link" : "io\/circe\/Encoder$.html#forProduct8[Source,A0,A1,A2,A3,A4,A5,A6,A7](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String,nameA7:String)(f:Source=>Product8[A0,A1,A2,A3,A4,A5,A6,A7])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct7", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String, nameA6: String)(f: (Source) ⇒ Product7[A0, A1, A2, A3, A4, A5, A6])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct7", "link" : "io\/circe\/Encoder$.html#forProduct7[Source,A0,A1,A2,A3,A4,A5,A6](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String,nameA6:String)(f:Source=>Product7[A0,A1,A2,A3,A4,A5,A6])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct6", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String, nameA5: String)(f: (Source) ⇒ Product6[A0, A1, A2, A3, A4, A5])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct6", "link" : "io\/circe\/Encoder$.html#forProduct6[Source,A0,A1,A2,A3,A4,A5](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String,nameA5:String)(f:Source=>Product6[A0,A1,A2,A3,A4,A5])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct5", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String, nameA4: String)(f: (Source) ⇒ Product5[A0, A1, A2, A3, A4])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct5", "link" : "io\/circe\/Encoder$.html#forProduct5[Source,A0,A1,A2,A3,A4](nameA0:String,nameA1:String,nameA2:String,nameA3:String,nameA4:String)(f:Source=>Product5[A0,A1,A2,A3,A4])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct4", "tail" : "(nameA0: String, nameA1: String, nameA2: String, nameA3: String)(f: (Source) ⇒ Product4[A0, A1, A2, A3])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct4", "link" : "io\/circe\/Encoder$.html#forProduct4[Source,A0,A1,A2,A3](nameA0:String,nameA1:String,nameA2:String,nameA3:String)(f:Source=>Product4[A0,A1,A2,A3])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct3", "tail" : "(nameA0: String, nameA1: String, nameA2: String)(f: (Source) ⇒ Product3[A0, A1, A2])(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct3", "link" : "io\/circe\/Encoder$.html#forProduct3[Source,A0,A1,A2](nameA0:String,nameA1:String,nameA2:String)(f:Source=>Product3[A0,A1,A2])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct2", "tail" : "(nameA0: String, nameA1: String)(f: (Source) ⇒ Product2[A0, A1])(encodeA0: Encoder[A0], encodeA1: Encoder[A1]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct2", "link" : "io\/circe\/Encoder$.html#forProduct2[Source,A0,A1](nameA0:String,nameA1:String)(f:Source=>Product2[A0,A1])(implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "forProduct1", "tail" : "(nameA0: String)(f: (Source) ⇒ A0)(encodeA0: Encoder[A0]): AsObject[Source]", "member" : "io.circe.ProductEncoders.forProduct1", "link" : "io\/circe\/Encoder$.html#forProduct1[Source,A0](nameA0:String)(f:Source=>A0)(implicitencodeA0:io.circe.Encoder[A0]):io.circe.Encoder.AsObject[Source]", "kind" : "final def"}, {"label" : "encodeTuple22", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18], encodeA19: Encoder[A19], encodeA20: Encoder[A20], encodeA21: Encoder[A21]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "io.circe.TupleEncoders.encodeTuple22", "link" : "io\/circe\/Encoder$.html#encodeTuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18],implicitencodeA19:io.circe.Encoder[A19],implicitencodeA20:io.circe.Encoder[A20],implicitencodeA21:io.circe.Encoder[A21]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "implicit final def"}, {"label" : "encodeTuple21", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18], encodeA19: Encoder[A19], encodeA20: Encoder[A20]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "io.circe.TupleEncoders.encodeTuple21", "link" : "io\/circe\/Encoder$.html#encodeTuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18],implicitencodeA19:io.circe.Encoder[A19],implicitencodeA20:io.circe.Encoder[A20]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "implicit final def"}, {"label" : "encodeTuple20", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18], encodeA19: Encoder[A19]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "io.circe.TupleEncoders.encodeTuple20", "link" : "io\/circe\/Encoder$.html#encodeTuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18],implicitencodeA19:io.circe.Encoder[A19]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "implicit final def"}, {"label" : "encodeTuple19", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17], encodeA18: Encoder[A18]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "io.circe.TupleEncoders.encodeTuple19", "link" : "io\/circe\/Encoder$.html#encodeTuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17],implicitencodeA18:io.circe.Encoder[A18]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "implicit final def"}, {"label" : "encodeTuple18", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16], encodeA17: Encoder[A17]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "io.circe.TupleEncoders.encodeTuple18", "link" : "io\/circe\/Encoder$.html#encodeTuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16],implicitencodeA17:io.circe.Encoder[A17]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "implicit final def"}, {"label" : "encodeTuple17", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15], encodeA16: Encoder[A16]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "io.circe.TupleEncoders.encodeTuple17", "link" : "io\/circe\/Encoder$.html#encodeTuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15],implicitencodeA16:io.circe.Encoder[A16]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "implicit final def"}, {"label" : "encodeTuple16", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14], encodeA15: Encoder[A15]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "io.circe.TupleEncoders.encodeTuple16", "link" : "io\/circe\/Encoder$.html#encodeTuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14],implicitencodeA15:io.circe.Encoder[A15]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "implicit final def"}, {"label" : "encodeTuple15", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13], encodeA14: Encoder[A14]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "io.circe.TupleEncoders.encodeTuple15", "link" : "io\/circe\/Encoder$.html#encodeTuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13],implicitencodeA14:io.circe.Encoder[A14]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "implicit final def"}, {"label" : "encodeTuple14", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12], encodeA13: Encoder[A13]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "io.circe.TupleEncoders.encodeTuple14", "link" : "io\/circe\/Encoder$.html#encodeTuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12],implicitencodeA13:io.circe.Encoder[A13]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "implicit final def"}, {"label" : "encodeTuple13", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11], encodeA12: Encoder[A12]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "io.circe.TupleEncoders.encodeTuple13", "link" : "io\/circe\/Encoder$.html#encodeTuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11],implicitencodeA12:io.circe.Encoder[A12]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "implicit final def"}, {"label" : "encodeTuple12", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10], encodeA11: Encoder[A11]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "io.circe.TupleEncoders.encodeTuple12", "link" : "io\/circe\/Encoder$.html#encodeTuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10],implicitencodeA11:io.circe.Encoder[A11]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "implicit final def"}, {"label" : "encodeTuple11", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9], encodeA10: Encoder[A10]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "io.circe.TupleEncoders.encodeTuple11", "link" : "io\/circe\/Encoder$.html#encodeTuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9],implicitencodeA10:io.circe.Encoder[A10]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "implicit final def"}, {"label" : "encodeTuple10", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8], encodeA9: Encoder[A9]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "io.circe.TupleEncoders.encodeTuple10", "link" : "io\/circe\/Encoder$.html#encodeTuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8],implicitencodeA9:io.circe.Encoder[A9]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "implicit final def"}, {"label" : "encodeTuple9", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7], encodeA8: Encoder[A8]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "io.circe.TupleEncoders.encodeTuple9", "link" : "io\/circe\/Encoder$.html#encodeTuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7],implicitencodeA8:io.circe.Encoder[A8]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "implicit final def"}, {"label" : "encodeTuple8", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6], encodeA7: Encoder[A7]): AsArray[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "io.circe.TupleEncoders.encodeTuple8", "link" : "io\/circe\/Encoder$.html#encodeTuple8[A0,A1,A2,A3,A4,A5,A6,A7](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6],implicitencodeA7:io.circe.Encoder[A7]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "implicit final def"}, {"label" : "encodeTuple7", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5], encodeA6: Encoder[A6]): AsArray[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "io.circe.TupleEncoders.encodeTuple7", "link" : "io\/circe\/Encoder$.html#encodeTuple7[A0,A1,A2,A3,A4,A5,A6](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5],implicitencodeA6:io.circe.Encoder[A6]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "implicit final def"}, {"label" : "encodeTuple6", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4], encodeA5: Encoder[A5]): AsArray[(A0, A1, A2, A3, A4, A5)]", "member" : "io.circe.TupleEncoders.encodeTuple6", "link" : "io\/circe\/Encoder$.html#encodeTuple6[A0,A1,A2,A3,A4,A5](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4],implicitencodeA5:io.circe.Encoder[A5]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4,A5)]", "kind" : "implicit final def"}, {"label" : "encodeTuple5", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3], encodeA4: Encoder[A4]): AsArray[(A0, A1, A2, A3, A4)]", "member" : "io.circe.TupleEncoders.encodeTuple5", "link" : "io\/circe\/Encoder$.html#encodeTuple5[A0,A1,A2,A3,A4](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3],implicitencodeA4:io.circe.Encoder[A4]):io.circe.Encoder.AsArray[(A0,A1,A2,A3,A4)]", "kind" : "implicit final def"}, {"label" : "encodeTuple4", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2], encodeA3: Encoder[A3]): AsArray[(A0, A1, A2, A3)]", "member" : "io.circe.TupleEncoders.encodeTuple4", "link" : "io\/circe\/Encoder$.html#encodeTuple4[A0,A1,A2,A3](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2],implicitencodeA3:io.circe.Encoder[A3]):io.circe.Encoder.AsArray[(A0,A1,A2,A3)]", "kind" : "implicit final def"}, {"label" : "encodeTuple3", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1], encodeA2: Encoder[A2]): AsArray[(A0, A1, A2)]", "member" : "io.circe.TupleEncoders.encodeTuple3", "link" : "io\/circe\/Encoder$.html#encodeTuple3[A0,A1,A2](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1],implicitencodeA2:io.circe.Encoder[A2]):io.circe.Encoder.AsArray[(A0,A1,A2)]", "kind" : "implicit final def"}, {"label" : "encodeTuple2", "tail" : "(encodeA0: Encoder[A0], encodeA1: Encoder[A1]): AsArray[(A0, A1)]", "member" : "io.circe.TupleEncoders.encodeTuple2", "link" : "io\/circe\/Encoder$.html#encodeTuple2[A0,A1](implicitencodeA0:io.circe.Encoder[A0],implicitencodeA1:io.circe.Encoder[A1]):io.circe.Encoder.AsArray[(A0,A1)]", "kind" : "implicit final def"}, {"label" : "encodeTuple1", "tail" : "(encodeA0: Encoder[A0]): AsArray[(A0)]", "member" : "io.circe.TupleEncoders.encodeTuple1", "link" : "io\/circe\/Encoder$.html#encodeTuple1[A0](implicitencodeA0:io.circe.Encoder[A0]):io.circe.Encoder.AsArray[(A0,)]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Encoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Encoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Encoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Encoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Encoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Encoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Encoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Encoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Encoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Encoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Encoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Encoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Encoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Encoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Encoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Encoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Encoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Encoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Encoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/Encoder.html", "kind" : "trait"}, {"name" : "io.circe.Error", "shortDescription" : "The base exception type for both decoding and parsing errors.", "object" : "io\/circe\/Error$.html", "members_class" : [{"label" : "getStackTraceString", "tail" : "(): String", "member" : "scala.Predef.RichException.getStackTraceString", "link" : "io\/circe\/Error.html#getStackTraceString:String", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/Error.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/Error.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Error) ⇒ Boolean, msg: ⇒ Any): Error", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Error.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Error) ⇒ Boolean): Error", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Error.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Error", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Error.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Error", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Error.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Error, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/Error.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Error, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/Error.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "io.circe.Error.fillInStackTrace", "link" : "io\/circe\/Error.html#fillInStackTrace():Throwable", "kind" : "final def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "io\/circe\/Error.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "io\/circe\/Error.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "io\/circe\/Error.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "io\/circe\/Error.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/Error.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/Error.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/Error.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "io\/circe\/Error.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "io\/circe\/Error.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "io\/circe\/Error.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "io\/circe\/Error.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "io\/circe\/Error.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Error.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Error.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Error.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Error.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Error.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Error.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Error.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Error.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Error.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Error.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Error.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Error.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Error.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Error.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Error.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Error.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Error.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Error.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "showError", "tail" : ": Show[Error]", "member" : "io.circe.Error.showError", "link" : "io\/circe\/Error$.html#showError:cats.Show[io.circe.Error]", "kind" : "implicit final val"}, {"label" : "eqError", "tail" : ": Eq[Error]", "member" : "io.circe.Error.eqError", "link" : "io\/circe\/Error$.html#eqError:cats.Eq[io.circe.Error]", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Error$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Error$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Error$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Error$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Error$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Error$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Error$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Error$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Error$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Error$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Error$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Error$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Error$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Error$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Error$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Error$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Error$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Error$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Error$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/Error.html", "kind" : "class"}, {"name" : "io.circe.Errors", "shortDescription" : "A convenience exception type for aggregating one or more decoding or parsingerrors.", "members_case class" : [{"label" : "getStackTraceString", "tail" : "(): String", "member" : "scala.Predef.RichException.getStackTraceString", "link" : "io\/circe\/Errors.html#getStackTraceString:String", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/Errors.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/Errors.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Errors) ⇒ Boolean, msg: ⇒ Any): Errors", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Errors.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Errors) ⇒ Boolean): Errors", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Errors.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Errors", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Errors.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Errors", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Errors.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Errors, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/Errors.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Errors, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/Errors.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "io.circe.Errors.fillInStackTrace", "link" : "io\/circe\/Errors.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "toList", "tail" : "(): List[Error]", "member" : "io.circe.Errors.toList", "link" : "io\/circe\/Errors.html#toList:List[io.circe.Error]", "kind" : "def"}, {"member" : "io.circe.Errors#<init>", "error" : "unsupported entity"}, {"label" : "errors", "tail" : ": NonEmptyList[Error]", "member" : "io.circe.Errors.errors", "link" : "io\/circe\/Errors.html#errors:cats.data.NonEmptyList[io.circe.Error]", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "io\/circe\/Errors.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "io\/circe\/Errors.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "io\/circe\/Errors.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "io\/circe\/Errors.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/Errors.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/Errors.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/Errors.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "io\/circe\/Errors.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "io\/circe\/Errors.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "io\/circe\/Errors.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "io\/circe\/Errors.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "io\/circe\/Errors.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Errors.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Errors.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Errors.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Errors.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Errors.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Errors.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Errors.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Errors.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Errors.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Errors.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Errors.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Errors.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Errors.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Errors.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Errors.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Errors.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/Errors.html", "kind" : "case class"}, {"name" : "io.circe.FailedCursor", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/FailedCursor.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/FailedCursor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FailedCursor) ⇒ Boolean, msg: ⇒ Any): FailedCursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/FailedCursor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FailedCursor) ⇒ Boolean): FailedCursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/FailedCursor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FailedCursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/FailedCursor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FailedCursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/FailedCursor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FailedCursor, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/FailedCursor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FailedCursor, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/FailedCursor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "field", "tail" : "(k: String): ACursor", "member" : "io.circe.FailedCursor.field", "link" : "io\/circe\/FailedCursor.html#field(k:String):io.circe.ACursor", "kind" : "def"}, {"label" : "delete", "tail" : "(): ACursor", "member" : "io.circe.FailedCursor.delete", "link" : "io\/circe\/FailedCursor.html#delete:io.circe.ACursor", "kind" : "def"}, {"label" : "last", "tail" : "(): ACursor", "member" : "io.circe.FailedCursor.last", "link" : "io\/circe\/FailedCursor.html#last:io.circe.ACursor", "kind" : "def"}, {"label" : "right", "tail" : "(): ACursor", "member" : "io.circe.FailedCursor.right", "link" : "io\/circe\/FailedCursor.html#right:io.circe.ACursor", "kind" : "def"}, {"label" : "left", "tail" : "(): ACursor", "member" : "io.circe.FailedCursor.left", "link" : "io\/circe\/FailedCursor.html#left:io.circe.ACursor", "kind" : "def"}, {"label" : "up", "tail" : "(): ACursor", "member" : "io.circe.FailedCursor.up", "link" : "io\/circe\/FailedCursor.html#up:io.circe.ACursor", "kind" : "def"}, {"label" : "downN", "tail" : "(n: Int): ACursor", "member" : "io.circe.FailedCursor.downN", "link" : "io\/circe\/FailedCursor.html#downN(n:Int):io.circe.ACursor", "kind" : "def"}, {"label" : "downField", "tail" : "(k: String): ACursor", "member" : "io.circe.FailedCursor.downField", "link" : "io\/circe\/FailedCursor.html#downField(k:String):io.circe.ACursor", "kind" : "def"}, {"label" : "downArray", "tail" : "(): ACursor", "member" : "io.circe.FailedCursor.downArray", "link" : "io\/circe\/FailedCursor.html#downArray:io.circe.ACursor", "kind" : "def"}, {"label" : "key", "tail" : "(): Option[String]", "member" : "io.circe.FailedCursor.key", "link" : "io\/circe\/FailedCursor.html#key:Option[String]", "kind" : "def"}, {"label" : "keys", "tail" : "(): Option[Iterable[String]]", "member" : "io.circe.FailedCursor.keys", "link" : "io\/circe\/FailedCursor.html#keys:Option[Iterable[String]]", "kind" : "def"}, {"label" : "index", "tail" : "(): Option[Int]", "member" : "io.circe.FailedCursor.index", "link" : "io\/circe\/FailedCursor.html#index:Option[Int]", "kind" : "def"}, {"label" : "values", "tail" : "(): Option[Iterable[Json]]", "member" : "io.circe.FailedCursor.values", "link" : "io\/circe\/FailedCursor.html#values:Option[Iterable[io.circe.Json]]", "kind" : "def"}, {"label" : "withFocusM", "tail" : "(f: (Json) ⇒ F[Json])(F: Applicative[F]): F[ACursor]", "member" : "io.circe.FailedCursor.withFocusM", "link" : "io\/circe\/FailedCursor.html#withFocusM[F[_]](f:io.circe.Json=>F[io.circe.Json])(implicitF:cats.Applicative[F]):F[io.circe.ACursor]", "kind" : "def"}, {"label" : "withFocus", "tail" : "(f: (Json) ⇒ Json): ACursor", "member" : "io.circe.FailedCursor.withFocus", "link" : "io\/circe\/FailedCursor.html#withFocus(f:io.circe.Json=>io.circe.Json):io.circe.ACursor", "kind" : "def"}, {"label" : "root", "tail" : "(): HCursor", "member" : "io.circe.FailedCursor.root", "link" : "io\/circe\/FailedCursor.html#root:io.circe.HCursor", "kind" : "def"}, {"label" : "top", "tail" : "(): Option[Json]", "member" : "io.circe.FailedCursor.top", "link" : "io\/circe\/FailedCursor.html#top:Option[io.circe.Json]", "kind" : "def"}, {"label" : "focus", "tail" : "(): Option[Json]", "member" : "io.circe.FailedCursor.focus", "link" : "io\/circe\/FailedCursor.html#focus:Option[io.circe.Json]", "kind" : "def"}, {"label" : "success", "tail" : "(): Option[HCursor]", "member" : "io.circe.FailedCursor.success", "link" : "io\/circe\/FailedCursor.html#success:Option[io.circe.HCursor]", "kind" : "def"}, {"label" : "succeeded", "tail" : "(): Boolean", "member" : "io.circe.FailedCursor.succeeded", "link" : "io\/circe\/FailedCursor.html#succeeded:Boolean", "kind" : "def"}, {"label" : "incorrectFocus", "tail" : "(): Boolean", "member" : "io.circe.FailedCursor.incorrectFocus", "link" : "io\/circe\/FailedCursor.html#incorrectFocus:Boolean", "kind" : "def"}, {"member" : "io.circe.FailedCursor#<init>", "error" : "unsupported entity"}, {"label" : "replay", "tail" : "(history: List[CursorOp]): ACursor", "member" : "io.circe.ACursor.replay", "link" : "io\/circe\/FailedCursor.html#replay(history:List[io.circe.CursorOp]):io.circe.ACursor", "kind" : "final def"}, {"label" : "replayOne", "tail" : "(op: CursorOp): ACursor", "member" : "io.circe.ACursor.replayOne", "link" : "io\/circe\/FailedCursor.html#replayOne(op:io.circe.CursorOp):io.circe.ACursor", "kind" : "final def"}, {"label" : "getOrElse", "tail" : "(k: String)(fallback: ⇒ A)(d: Decoder[A]): Result[A]", "member" : "io.circe.ACursor.getOrElse", "link" : "io\/circe\/FailedCursor.html#getOrElse[A](k:String)(fallback:=>A)(implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "get", "tail" : "(k: String)(d: Decoder[A]): Result[A]", "member" : "io.circe.ACursor.get", "link" : "io\/circe\/FailedCursor.html#get[A](k:String)(implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "as", "tail" : "(d: Decoder[A]): Result[A]", "member" : "io.circe.ACursor.as", "link" : "io\/circe\/FailedCursor.html#as[A](implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "set", "tail" : "(j: Json): ACursor", "member" : "io.circe.ACursor.set", "link" : "io\/circe\/FailedCursor.html#set(j:io.circe.Json):io.circe.ACursor", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Boolean", "member" : "io.circe.ACursor.failed", "link" : "io\/circe\/FailedCursor.html#failed:Boolean", "kind" : "final def"}, {"label" : "history", "tail" : "(): List[CursorOp]", "member" : "io.circe.ACursor.history", "link" : "io\/circe\/FailedCursor.html#history:List[io.circe.CursorOp]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/FailedCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/FailedCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/FailedCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/FailedCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/FailedCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/FailedCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/FailedCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/FailedCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/FailedCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/FailedCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/FailedCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/FailedCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/FailedCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/FailedCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/FailedCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/FailedCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/FailedCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/FailedCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/FailedCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/FailedCursor.html", "kind" : "class"}, {"name" : "io.circe.HCursor", "shortDescription" : "", "object" : "io\/circe\/HCursor$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/HCursor.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/HCursor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HCursor) ⇒ Boolean, msg: ⇒ Any): HCursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/HCursor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (HCursor) ⇒ Boolean): HCursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/HCursor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): HCursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/HCursor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): HCursor", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/HCursor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (HCursor, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/HCursor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (HCursor, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/HCursor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "fail", "tail" : "(op: CursorOp): ACursor", "member" : "io.circe.HCursor.fail", "link" : "io\/circe\/HCursor.html#fail(op:io.circe.CursorOp):io.circe.ACursor", "kind" : "final def"}, {"label" : "downN", "tail" : "(n: Int): ACursor", "member" : "io.circe.HCursor.downN", "link" : "io\/circe\/HCursor.html#downN(n:Int):io.circe.ACursor", "kind" : "final def"}, {"label" : "downField", "tail" : "(k: String): ACursor", "member" : "io.circe.HCursor.downField", "link" : "io\/circe\/HCursor.html#downField(k:String):io.circe.ACursor", "kind" : "final def"}, {"label" : "find", "tail" : "(p: (Json) ⇒ Boolean): ACursor", "member" : "io.circe.HCursor.find", "link" : "io\/circe\/HCursor.html#find(p:io.circe.Json=>Boolean):io.circe.ACursor", "kind" : "final def"}, {"label" : "downArray", "tail" : "(): ACursor", "member" : "io.circe.HCursor.downArray", "link" : "io\/circe\/HCursor.html#downArray:io.circe.ACursor", "kind" : "final def"}, {"label" : "root", "tail" : "(): HCursor", "member" : "io.circe.HCursor.root", "link" : "io\/circe\/HCursor.html#root:io.circe.HCursor", "kind" : "final def"}, {"label" : "top", "tail" : "(): Option[Json]", "member" : "io.circe.HCursor.top", "link" : "io\/circe\/HCursor.html#top:Option[io.circe.Json]", "kind" : "final def"}, {"label" : "keys", "tail" : "(): Option[Iterable[String]]", "member" : "io.circe.HCursor.keys", "link" : "io\/circe\/HCursor.html#keys:Option[Iterable[String]]", "kind" : "final def"}, {"label" : "values", "tail" : "(): Option[Iterable[Json]]", "member" : "io.circe.HCursor.values", "link" : "io\/circe\/HCursor.html#values:Option[Iterable[io.circe.Json]]", "kind" : "final def"}, {"label" : "focus", "tail" : "(): Option[Json]", "member" : "io.circe.HCursor.focus", "link" : "io\/circe\/HCursor.html#focus:Option[io.circe.Json]", "kind" : "final def"}, {"label" : "success", "tail" : "(): Option[HCursor]", "member" : "io.circe.HCursor.success", "link" : "io\/circe\/HCursor.html#success:Option[io.circe.HCursor]", "kind" : "final def"}, {"label" : "succeeded", "tail" : "(): Boolean", "member" : "io.circe.HCursor.succeeded", "link" : "io\/circe\/HCursor.html#succeeded:Boolean", "kind" : "final def"}, {"label" : "withFocusM", "tail" : "(f: (Json) ⇒ F[Json])(F: Applicative[F]): F[ACursor]", "member" : "io.circe.HCursor.withFocusM", "link" : "io\/circe\/HCursor.html#withFocusM[F[_]](f:io.circe.Json=>F[io.circe.Json])(implicitF:cats.Applicative[F]):F[io.circe.ACursor]", "kind" : "final def"}, {"label" : "withFocus", "tail" : "(f: (Json) ⇒ Json): ACursor", "member" : "io.circe.HCursor.withFocus", "link" : "io\/circe\/HCursor.html#withFocus(f:io.circe.Json=>io.circe.Json):io.circe.ACursor", "kind" : "final def"}, {"member" : "io.circe.HCursor#<init>", "error" : "unsupported entity"}, {"label" : "replay", "tail" : "(history: List[CursorOp]): ACursor", "member" : "io.circe.ACursor.replay", "link" : "io\/circe\/HCursor.html#replay(history:List[io.circe.CursorOp]):io.circe.ACursor", "kind" : "final def"}, {"label" : "replayOne", "tail" : "(op: CursorOp): ACursor", "member" : "io.circe.ACursor.replayOne", "link" : "io\/circe\/HCursor.html#replayOne(op:io.circe.CursorOp):io.circe.ACursor", "kind" : "final def"}, {"label" : "getOrElse", "tail" : "(k: String)(fallback: ⇒ A)(d: Decoder[A]): Result[A]", "member" : "io.circe.ACursor.getOrElse", "link" : "io\/circe\/HCursor.html#getOrElse[A](k:String)(fallback:=>A)(implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "get", "tail" : "(k: String)(d: Decoder[A]): Result[A]", "member" : "io.circe.ACursor.get", "link" : "io\/circe\/HCursor.html#get[A](k:String)(implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "as", "tail" : "(d: Decoder[A]): Result[A]", "member" : "io.circe.ACursor.as", "link" : "io\/circe\/HCursor.html#as[A](implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "key", "tail" : "(): Option[String]", "member" : "io.circe.ACursor.key", "link" : "io\/circe\/HCursor.html#key:Option[String]", "kind" : "def"}, {"label" : "index", "tail" : "(): Option[Int]", "member" : "io.circe.ACursor.index", "link" : "io\/circe\/HCursor.html#index:Option[Int]", "kind" : "def"}, {"label" : "set", "tail" : "(j: Json): ACursor", "member" : "io.circe.ACursor.set", "link" : "io\/circe\/HCursor.html#set(j:io.circe.Json):io.circe.ACursor", "kind" : "final def"}, {"label" : "failed", "tail" : "(): Boolean", "member" : "io.circe.ACursor.failed", "link" : "io\/circe\/HCursor.html#failed:Boolean", "kind" : "final def"}, {"label" : "history", "tail" : "(): List[CursorOp]", "member" : "io.circe.ACursor.history", "link" : "io\/circe\/HCursor.html#history:List[io.circe.CursorOp]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/HCursor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/HCursor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/HCursor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/HCursor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/HCursor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/HCursor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/HCursor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/HCursor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/HCursor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/HCursor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/HCursor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/HCursor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/HCursor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/HCursor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/HCursor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/HCursor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/HCursor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/HCursor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/HCursor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "addOp", "tail" : "(cursor: HCursor, op: CursorOp): HCursor", "member" : "io.circe.HCursor.addOp", "link" : "io\/circe\/HCursor.html#addOp(cursor:io.circe.HCursor,op:io.circe.CursorOp):io.circe.HCursor", "kind" : "abstract def"}, {"label" : "replace", "tail" : "(newValue: Json, cursor: HCursor, op: CursorOp): HCursor", "member" : "io.circe.HCursor.replace", "link" : "io\/circe\/HCursor.html#replace(newValue:io.circe.Json,cursor:io.circe.HCursor,op:io.circe.CursorOp):io.circe.HCursor", "kind" : "abstract def"}, {"label" : "value", "tail" : "(): Json", "member" : "io.circe.HCursor.value", "link" : "io\/circe\/HCursor.html#value:io.circe.Json", "kind" : "abstract def"}, {"label" : "field", "tail" : "(k: String): ACursor", "member" : "io.circe.ACursor.field", "link" : "io\/circe\/HCursor.html#field(k:String):io.circe.ACursor", "kind" : "abstract def"}, {"label" : "right", "tail" : "(): ACursor", "member" : "io.circe.ACursor.right", "link" : "io\/circe\/HCursor.html#right:io.circe.ACursor", "kind" : "abstract def"}, {"label" : "left", "tail" : "(): ACursor", "member" : "io.circe.ACursor.left", "link" : "io\/circe\/HCursor.html#left:io.circe.ACursor", "kind" : "abstract def"}, {"label" : "up", "tail" : "(): ACursor", "member" : "io.circe.ACursor.up", "link" : "io\/circe\/HCursor.html#up:io.circe.ACursor", "kind" : "abstract def"}, {"label" : "delete", "tail" : "(): ACursor", "member" : "io.circe.ACursor.delete", "link" : "io\/circe\/HCursor.html#delete:io.circe.ACursor", "kind" : "abstract def"}], "members_object" : [{"label" : "fromJson", "tail" : "(value: Json): HCursor", "member" : "io.circe.HCursor.fromJson", "link" : "io\/circe\/HCursor$.html#fromJson(value:io.circe.Json):io.circe.HCursor", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/HCursor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/HCursor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/HCursor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/HCursor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/HCursor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/HCursor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/HCursor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/HCursor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/HCursor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/HCursor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/HCursor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/HCursor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/HCursor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/HCursor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/HCursor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/HCursor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/HCursor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/HCursor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/HCursor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/HCursor.html", "kind" : "class"}, {"name" : "io.circe.Json", "shortDescription" : "A data type representing possible JSON values.", "object" : "io\/circe\/Json$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/Json.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/Json.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Json) ⇒ Boolean, msg: ⇒ Any): Json", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Json.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Json) ⇒ Boolean): Json", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Json.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Json", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Json.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Json", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Json.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Json, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/Json.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Json, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/Json.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "findAllByKey", "tail" : "(key: String): List[Json]", "member" : "io.circe.Json.findAllByKey", "link" : "io\/circe\/Json.html#findAllByKey(key:String):List[io.circe.Json]", "kind" : "final def"}, {"label" : "\\\\", "tail" : "(key: String): List[Json]", "member" : "io.circe.Json.\\\\", "link" : "io\/circe\/Json.html#\\\\(key:String):List[io.circe.Json]", "kind" : "final def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "io.circe.Json.equals", "link" : "io\/circe\/Json.html#equals(that:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "io.circe.Json.toString", "link" : "io\/circe\/Json.html#toString():String", "kind" : "final def"}, {"label" : "dropEmptyValues", "tail" : "(): Json", "member" : "io.circe.Json.dropEmptyValues", "link" : "io\/circe\/Json.html#dropEmptyValues:io.circe.Json", "kind" : "def"}, {"label" : "deepDropNullValues", "tail" : "(): Json", "member" : "io.circe.Json.deepDropNullValues", "link" : "io\/circe\/Json.html#deepDropNullValues:io.circe.Json", "kind" : "def"}, {"label" : "dropNullValues", "tail" : "(): Json", "member" : "io.circe.Json.dropNullValues", "link" : "io\/circe\/Json.html#dropNullValues:io.circe.Json", "kind" : "def"}, {"label" : "deepMerge", "tail" : "(that: Json): Json", "member" : "io.circe.Json.deepMerge", "link" : "io\/circe\/Json.html#deepMerge(that:io.circe.Json):io.circe.Json", "kind" : "def"}, {"label" : "spaces4SortKeys", "tail" : "(): String", "member" : "io.circe.Json.spaces4SortKeys", "link" : "io\/circe\/Json.html#spaces4SortKeys:String", "kind" : "final def"}, {"label" : "spaces2SortKeys", "tail" : "(): String", "member" : "io.circe.Json.spaces2SortKeys", "link" : "io\/circe\/Json.html#spaces2SortKeys:String", "kind" : "final def"}, {"label" : "noSpacesSortKeys", "tail" : "(): String", "member" : "io.circe.Json.noSpacesSortKeys", "link" : "io\/circe\/Json.html#noSpacesSortKeys:String", "kind" : "final def"}, {"label" : "spaces4", "tail" : "(): String", "member" : "io.circe.Json.spaces4", "link" : "io\/circe\/Json.html#spaces4:String", "kind" : "final def"}, {"label" : "spaces2", "tail" : "(): String", "member" : "io.circe.Json.spaces2", "link" : "io\/circe\/Json.html#spaces2:String", "kind" : "final def"}, {"label" : "noSpaces", "tail" : "(): String", "member" : "io.circe.Json.noSpaces", "link" : "io\/circe\/Json.html#noSpaces:String", "kind" : "final def"}, {"label" : "printWith", "tail" : "(p: Printer): String", "member" : "io.circe.Json.printWith", "link" : "io\/circe\/Json.html#printWith(p:io.circe.Printer):String", "kind" : "final def"}, {"label" : "as", "tail" : "(d: Decoder[A]): Result[A]", "member" : "io.circe.Json.as", "link" : "io\/circe\/Json.html#as[A](implicitd:io.circe.Decoder[A]):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "io.circe.Json.name", "link" : "io\/circe\/Json.html#name:String", "kind" : "final def"}, {"label" : "hcursor", "tail" : "(): HCursor", "member" : "io.circe.Json.hcursor", "link" : "io\/circe\/Json.html#hcursor:io.circe.HCursor", "kind" : "final def"}, {"label" : "arrayOrObject", "tail" : "(or: ⇒ X, jsonArray: (Vector[Json]) ⇒ X, jsonObject: (JsonObject) ⇒ X): X", "member" : "io.circe.Json.arrayOrObject", "link" : "io\/circe\/Json.html#arrayOrObject[X](or:=>X,jsonArray:Vector[io.circe.Json]=>X,jsonObject:io.circe.JsonObject=>X):X", "kind" : "final def"}, {"label" : "fold", "tail" : "(jsonNull: ⇒ X, jsonBoolean: (Boolean) ⇒ X, jsonNumber: (JsonNumber) ⇒ X, jsonString: (String) ⇒ X, jsonArray: (Vector[Json]) ⇒ X, jsonObject: (JsonObject) ⇒ X): X", "member" : "io.circe.Json.fold", "link" : "io\/circe\/Json.html#fold[X](jsonNull:=>X,jsonBoolean:Boolean=>X,jsonNumber:io.circe.JsonNumber=>X,jsonString:String=>X,jsonArray:Vector[io.circe.Json]=>X,jsonObject:io.circe.JsonObject=>X):X", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "io\/circe\/Json.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "io\/circe\/Json.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Json.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Json.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Json.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Json.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Json.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Json.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Json.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Json.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Json.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Json.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Json.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Json.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Json.html#clone():Object", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Json.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Json.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Json.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Json.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapObject", "tail" : "(f: (JsonObject) ⇒ JsonObject): Json", "member" : "io.circe.Json.mapObject", "link" : "io\/circe\/Json.html#mapObject(f:io.circe.JsonObject=>io.circe.JsonObject):io.circe.Json", "kind" : "abstract def"}, {"label" : "mapArray", "tail" : "(f: (Vector[Json]) ⇒ Vector[Json]): Json", "member" : "io.circe.Json.mapArray", "link" : "io\/circe\/Json.html#mapArray(f:Vector[io.circe.Json]=>Vector[io.circe.Json]):io.circe.Json", "kind" : "abstract def"}, {"label" : "mapString", "tail" : "(f: (String) ⇒ String): Json", "member" : "io.circe.Json.mapString", "link" : "io\/circe\/Json.html#mapString(f:String=>String):io.circe.Json", "kind" : "abstract def"}, {"label" : "mapNumber", "tail" : "(f: (JsonNumber) ⇒ JsonNumber): Json", "member" : "io.circe.Json.mapNumber", "link" : "io\/circe\/Json.html#mapNumber(f:io.circe.JsonNumber=>io.circe.JsonNumber):io.circe.Json", "kind" : "abstract def"}, {"label" : "mapBoolean", "tail" : "(f: (Boolean) ⇒ Boolean): Json", "member" : "io.circe.Json.mapBoolean", "link" : "io\/circe\/Json.html#mapBoolean(f:Boolean=>Boolean):io.circe.Json", "kind" : "abstract def"}, {"label" : "withObject", "tail" : "(f: (JsonObject) ⇒ Json): Json", "member" : "io.circe.Json.withObject", "link" : "io\/circe\/Json.html#withObject(f:io.circe.JsonObject=>io.circe.Json):io.circe.Json", "kind" : "abstract def"}, {"label" : "withArray", "tail" : "(f: (Vector[Json]) ⇒ Json): Json", "member" : "io.circe.Json.withArray", "link" : "io\/circe\/Json.html#withArray(f:Vector[io.circe.Json]=>io.circe.Json):io.circe.Json", "kind" : "abstract def"}, {"label" : "withString", "tail" : "(f: (String) ⇒ Json): Json", "member" : "io.circe.Json.withString", "link" : "io\/circe\/Json.html#withString(f:String=>io.circe.Json):io.circe.Json", "kind" : "abstract def"}, {"label" : "withNumber", "tail" : "(f: (JsonNumber) ⇒ Json): Json", "member" : "io.circe.Json.withNumber", "link" : "io\/circe\/Json.html#withNumber(f:io.circe.JsonNumber=>io.circe.Json):io.circe.Json", "kind" : "abstract def"}, {"label" : "withBoolean", "tail" : "(f: (Boolean) ⇒ Json): Json", "member" : "io.circe.Json.withBoolean", "link" : "io\/circe\/Json.html#withBoolean(f:Boolean=>io.circe.Json):io.circe.Json", "kind" : "abstract def"}, {"label" : "withNull", "tail" : "(f: ⇒ Json): Json", "member" : "io.circe.Json.withNull", "link" : "io\/circe\/Json.html#withNull(f:=>io.circe.Json):io.circe.Json", "kind" : "abstract def"}, {"label" : "asObject", "tail" : "(): Option[JsonObject]", "member" : "io.circe.Json.asObject", "link" : "io\/circe\/Json.html#asObject:Option[io.circe.JsonObject]", "kind" : "abstract def"}, {"label" : "asArray", "tail" : "(): Option[Vector[Json]]", "member" : "io.circe.Json.asArray", "link" : "io\/circe\/Json.html#asArray:Option[Vector[io.circe.Json]]", "kind" : "abstract def"}, {"label" : "asString", "tail" : "(): Option[String]", "member" : "io.circe.Json.asString", "link" : "io\/circe\/Json.html#asString:Option[String]", "kind" : "abstract def"}, {"label" : "asNumber", "tail" : "(): Option[JsonNumber]", "member" : "io.circe.Json.asNumber", "link" : "io\/circe\/Json.html#asNumber:Option[io.circe.JsonNumber]", "kind" : "abstract def"}, {"label" : "asBoolean", "tail" : "(): Option[Boolean]", "member" : "io.circe.Json.asBoolean", "link" : "io\/circe\/Json.html#asBoolean:Option[Boolean]", "kind" : "abstract def"}, {"label" : "asNull", "tail" : "(): Option[Unit]", "member" : "io.circe.Json.asNull", "link" : "io\/circe\/Json.html#asNull:Option[Unit]", "kind" : "abstract def"}, {"label" : "isObject", "tail" : "(): Boolean", "member" : "io.circe.Json.isObject", "link" : "io\/circe\/Json.html#isObject:Boolean", "kind" : "abstract def"}, {"label" : "isArray", "tail" : "(): Boolean", "member" : "io.circe.Json.isArray", "link" : "io\/circe\/Json.html#isArray:Boolean", "kind" : "abstract def"}, {"label" : "isString", "tail" : "(): Boolean", "member" : "io.circe.Json.isString", "link" : "io\/circe\/Json.html#isString:Boolean", "kind" : "abstract def"}, {"label" : "isNumber", "tail" : "(): Boolean", "member" : "io.circe.Json.isNumber", "link" : "io\/circe\/Json.html#isNumber:Boolean", "kind" : "abstract def"}, {"label" : "isBoolean", "tail" : "(): Boolean", "member" : "io.circe.Json.isBoolean", "link" : "io\/circe\/Json.html#isBoolean:Boolean", "kind" : "abstract def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "io.circe.Json.isNull", "link" : "io\/circe\/Json.html#isNull:Boolean", "kind" : "abstract def"}, {"label" : "foldWith", "tail" : "(folder: Folder[X]): X", "member" : "io.circe.Json.foldWith", "link" : "io\/circe\/Json.html#foldWith[X](folder:io.circe.Json.Folder[X]):X", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "io\/circe\/Json.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "io\/circe\/Json.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "io\/circe\/Json.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "showJson", "tail" : ": Show[Json]", "member" : "io.circe.Json.showJson", "link" : "io\/circe\/Json$.html#showJson:cats.Show[io.circe.Json]", "kind" : "implicit final val"}, {"label" : "eqJson", "tail" : ": Eq[Json]", "member" : "io.circe.Json.eqJson", "link" : "io\/circe\/Json$.html#eqJson:cats.Eq[io.circe.Json]", "kind" : "implicit final val"}, {"label" : "fromBigDecimal", "tail" : "(value: BigDecimal): Json", "member" : "io.circe.Json.fromBigDecimal", "link" : "io\/circe\/Json$.html#fromBigDecimal(value:BigDecimal):io.circe.Json", "kind" : "final def"}, {"label" : "fromBigInt", "tail" : "(value: BigInt): Json", "member" : "io.circe.Json.fromBigInt", "link" : "io\/circe\/Json$.html#fromBigInt(value:BigInt):io.circe.Json", "kind" : "final def"}, {"label" : "fromFloatOrString", "tail" : "(value: Float): Json", "member" : "io.circe.Json.fromFloatOrString", "link" : "io\/circe\/Json$.html#fromFloatOrString(value:Float):io.circe.Json", "kind" : "final def"}, {"label" : "fromDoubleOrString", "tail" : "(value: Double): Json", "member" : "io.circe.Json.fromDoubleOrString", "link" : "io\/circe\/Json$.html#fromDoubleOrString(value:Double):io.circe.Json", "kind" : "final def"}, {"label" : "fromFloatOrNull", "tail" : "(value: Float): Json", "member" : "io.circe.Json.fromFloatOrNull", "link" : "io\/circe\/Json$.html#fromFloatOrNull(value:Float):io.circe.Json", "kind" : "final def"}, {"label" : "fromDoubleOrNull", "tail" : "(value: Double): Json", "member" : "io.circe.Json.fromDoubleOrNull", "link" : "io\/circe\/Json$.html#fromDoubleOrNull(value:Double):io.circe.Json", "kind" : "final def"}, {"label" : "fromFloat", "tail" : "(value: Float): Option[Json]", "member" : "io.circe.Json.fromFloat", "link" : "io\/circe\/Json$.html#fromFloat(value:Float):Option[io.circe.Json]", "kind" : "final def"}, {"label" : "fromDouble", "tail" : "(value: Double): Option[Json]", "member" : "io.circe.Json.fromDouble", "link" : "io\/circe\/Json$.html#fromDouble(value:Double):Option[io.circe.Json]", "kind" : "final def"}, {"label" : "fromLong", "tail" : "(value: Long): Json", "member" : "io.circe.Json.fromLong", "link" : "io\/circe\/Json$.html#fromLong(value:Long):io.circe.Json", "kind" : "final def"}, {"label" : "fromInt", "tail" : "(value: Int): Json", "member" : "io.circe.Json.fromInt", "link" : "io\/circe\/Json$.html#fromInt(value:Int):io.circe.Json", "kind" : "final def"}, {"label" : "fromBoolean", "tail" : "(value: Boolean): Json", "member" : "io.circe.Json.fromBoolean", "link" : "io\/circe\/Json$.html#fromBoolean(value:Boolean):io.circe.Json", "kind" : "final def"}, {"label" : "fromString", "tail" : "(value: String): Json", "member" : "io.circe.Json.fromString", "link" : "io\/circe\/Json$.html#fromString(value:String):io.circe.Json", "kind" : "final def"}, {"label" : "fromJsonNumber", "tail" : "(value: JsonNumber): Json", "member" : "io.circe.Json.fromJsonNumber", "link" : "io\/circe\/Json$.html#fromJsonNumber(value:io.circe.JsonNumber):io.circe.Json", "kind" : "final def"}, {"label" : "fromJsonObject", "tail" : "(value: JsonObject): Json", "member" : "io.circe.Json.fromJsonObject", "link" : "io\/circe\/Json$.html#fromJsonObject(value:io.circe.JsonObject):io.circe.Json", "kind" : "final def"}, {"label" : "fromValues", "tail" : "(values: Iterable[Json]): Json", "member" : "io.circe.Json.fromValues", "link" : "io\/circe\/Json$.html#fromValues(values:Iterable[io.circe.Json]):io.circe.Json", "kind" : "final def"}, {"label" : "fromFields", "tail" : "(fields: Iterable[(String, Json)]): Json", "member" : "io.circe.Json.fromFields", "link" : "io\/circe\/Json$.html#fromFields(fields:Iterable[(String,io.circe.Json)]):io.circe.Json", "kind" : "final def"}, {"label" : "arr", "tail" : "(values: Json*): Json", "member" : "io.circe.Json.arr", "link" : "io\/circe\/Json$.html#arr(values:io.circe.Json*):io.circe.Json", "kind" : "final def"}, {"label" : "obj", "tail" : "(fields: (String, Json)*): Json", "member" : "io.circe.Json.obj", "link" : "io\/circe\/Json$.html#obj(fields:(String,io.circe.Json)*):io.circe.Json", "kind" : "final def"}, {"label" : "False", "tail" : ": Json", "member" : "io.circe.Json.False", "link" : "io\/circe\/Json$.html#False:io.circe.Json", "kind" : "final val"}, {"label" : "True", "tail" : ": Json", "member" : "io.circe.Json.True", "link" : "io\/circe\/Json$.html#True:io.circe.Json", "kind" : "final val"}, {"label" : "Null", "tail" : ": Json", "member" : "io.circe.Json.Null", "link" : "io\/circe\/Json$.html#Null:io.circe.Json", "kind" : "final val"}, {"label" : "Folder", "tail" : "", "member" : "io.circe.Json.Folder", "link" : "io\/circe\/Json$.html#Folder[X]extendsSerializable", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Json$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Json$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Json$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Json$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Json$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Json$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Json$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Json$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Json$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Json$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Json$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Json$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Json$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Json$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Json$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Json$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Json$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Json$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Json$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/Json.html", "kind" : "class"}, {"name" : "io.circe.JsonNumber", "shortDescription" : "A JSON number with optimization by cases.", "object" : "io\/circe\/JsonNumber$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/JsonNumber.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/JsonNumber.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonNumber) ⇒ Boolean, msg: ⇒ Any): JsonNumber", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/JsonNumber.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonNumber) ⇒ Boolean): JsonNumber", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/JsonNumber.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JsonNumber", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/JsonNumber.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonNumber", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/JsonNumber.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonNumber, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/JsonNumber.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonNumber, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/JsonNumber.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "io.circe.JsonNumber.hashCode", "link" : "io\/circe\/JsonNumber.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "io.circe.JsonNumber.equals", "link" : "io\/circe\/JsonNumber.html#equals(that:Any):Boolean", "kind" : "final def"}, {"label" : "toInt", "tail" : "(): Option[Int]", "member" : "io.circe.JsonNumber.toInt", "link" : "io\/circe\/JsonNumber.html#toInt:Option[Int]", "kind" : "final def"}, {"label" : "toShort", "tail" : "(): Option[Short]", "member" : "io.circe.JsonNumber.toShort", "link" : "io\/circe\/JsonNumber.html#toShort:Option[Short]", "kind" : "final def"}, {"label" : "toByte", "tail" : "(): Option[Byte]", "member" : "io.circe.JsonNumber.toByte", "link" : "io\/circe\/JsonNumber.html#toByte:Option[Byte]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/JsonNumber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/JsonNumber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/JsonNumber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/JsonNumber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/JsonNumber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/JsonNumber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/JsonNumber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonNumber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonNumber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonNumber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/JsonNumber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/JsonNumber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/JsonNumber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/JsonNumber.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/JsonNumber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/JsonNumber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/JsonNumber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toLong", "tail" : "(): Option[Long]", "member" : "io.circe.JsonNumber.toLong", "link" : "io\/circe\/JsonNumber.html#toLong:Option[Long]", "kind" : "abstract def"}, {"label" : "toFloat", "tail" : "(): Float", "member" : "io.circe.JsonNumber.toFloat", "link" : "io\/circe\/JsonNumber.html#toFloat:Float", "kind" : "abstract def"}, {"label" : "toDouble", "tail" : "(): Double", "member" : "io.circe.JsonNumber.toDouble", "link" : "io\/circe\/JsonNumber.html#toDouble:Double", "kind" : "abstract def"}, {"label" : "toBigInt", "tail" : "(): Option[BigInt]", "member" : "io.circe.JsonNumber.toBigInt", "link" : "io\/circe\/JsonNumber.html#toBigInt:Option[BigInt]", "kind" : "abstract def"}, {"label" : "toBigDecimal", "tail" : "(): Option[BigDecimal]", "member" : "io.circe.JsonNumber.toBigDecimal", "link" : "io\/circe\/JsonNumber.html#toBigDecimal:Option[BigDecimal]", "kind" : "abstract def"}], "members_object" : [{"label" : "eqJsonNumber", "tail" : ": Eq[JsonNumber]", "member" : "io.circe.JsonNumber.eqJsonNumber", "link" : "io\/circe\/JsonNumber$.html#eqJsonNumber:cats.kernel.Eq[io.circe.JsonNumber]", "kind" : "implicit final val"}, {"label" : "fromString", "tail" : "(value: String): Option[JsonNumber]", "member" : "io.circe.JsonNumber.fromString", "link" : "io\/circe\/JsonNumber$.html#fromString(value:String):Option[io.circe.JsonNumber]", "kind" : "final def"}, {"label" : "fromIntegralStringUnsafe", "tail" : "(value: String): JsonNumber", "member" : "io.circe.JsonNumber.fromIntegralStringUnsafe", "link" : "io\/circe\/JsonNumber$.html#fromIntegralStringUnsafe(value:String):io.circe.JsonNumber", "kind" : "final def"}, {"label" : "fromDecimalStringUnsafe", "tail" : "(value: String): JsonNumber", "member" : "io.circe.JsonNumber.fromDecimalStringUnsafe", "link" : "io\/circe\/JsonNumber$.html#fromDecimalStringUnsafe(value:String):io.circe.JsonNumber", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/JsonNumber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/JsonNumber$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/JsonNumber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/JsonNumber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/JsonNumber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/JsonNumber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/JsonNumber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonNumber$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonNumber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonNumber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/JsonNumber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/JsonNumber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/JsonNumber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/JsonNumber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/JsonNumber$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/JsonNumber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/JsonNumber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/JsonNumber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/JsonNumber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/JsonNumber.html", "kind" : "class"}, {"name" : "io.circe.JsonObject", "shortDescription" : "A mapping from keys to JSON values that maintains insertion order.", "object" : "io\/circe\/JsonObject$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/JsonObject.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/JsonObject.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonObject) ⇒ Boolean, msg: ⇒ Any): JsonObject", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/JsonObject.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonObject) ⇒ Boolean): JsonObject", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/JsonObject.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JsonObject", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/JsonObject.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonObject", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/JsonObject.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonObject, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/JsonObject.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonObject, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/JsonObject.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "io.circe.JsonObject.hashCode", "link" : "io\/circe\/JsonObject.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "io.circe.JsonObject.equals", "link" : "io\/circe\/JsonObject.html#equals(that:Any):Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "io.circe.JsonObject.toString", "link" : "io\/circe\/JsonObject.html#toString():String", "kind" : "final def"}, {"label" : "deepMerge", "tail" : "(that: JsonObject): JsonObject", "member" : "io.circe.JsonObject.deepMerge", "link" : "io\/circe\/JsonObject.html#deepMerge(that:io.circe.JsonObject):io.circe.JsonObject", "kind" : "def"}, {"label" : "filterKeys", "tail" : "(pred: (String) ⇒ Boolean): JsonObject", "member" : "io.circe.JsonObject.filterKeys", "link" : "io\/circe\/JsonObject.html#filterKeys(pred:String=>Boolean):io.circe.JsonObject", "kind" : "final def"}, {"label" : "filter", "tail" : "(pred: ((String, Json)) ⇒ Boolean): JsonObject", "member" : "io.circe.JsonObject.filter", "link" : "io\/circe\/JsonObject.html#filter(pred:((String,io.circe.Json))=>Boolean):io.circe.JsonObject", "kind" : "final def"}, {"label" : "toVector", "tail" : "(): Vector[(String, Json)]", "member" : "io.circe.JsonObject.toVector", "link" : "io\/circe\/JsonObject.html#toVector:Vector[(String,io.circe.Json)]", "kind" : "final def"}, {"label" : "toList", "tail" : "(): List[(String, Json)]", "member" : "io.circe.JsonObject.toList", "link" : "io\/circe\/JsonObject.html#toList:List[(String,io.circe.Json)]", "kind" : "final def"}, {"label" : "kleisli", "tail" : "(): Kleisli[Option, String, Json]", "member" : "io.circe.JsonObject.kleisli", "link" : "io\/circe\/JsonObject.html#kleisli:cats.data.Kleisli[Option,String,io.circe.Json]", "kind" : "final def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "io.circe.JsonObject.nonEmpty", "link" : "io\/circe\/JsonObject.html#nonEmpty:Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/JsonObject.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/JsonObject.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/JsonObject.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/JsonObject.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/JsonObject.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/JsonObject.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/JsonObject.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonObject.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonObject.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonObject.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/JsonObject.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/JsonObject.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/JsonObject.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/JsonObject.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/JsonObject.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/JsonObject.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapValues", "tail" : "(f: (Json) ⇒ Json): JsonObject", "member" : "io.circe.JsonObject.mapValues", "link" : "io\/circe\/JsonObject.html#mapValues(f:io.circe.Json=>io.circe.Json):io.circe.JsonObject", "kind" : "abstract def"}, {"label" : "traverse", "tail" : "(f: (Json) ⇒ F[Json])(F: Applicative[F]): F[JsonObject]", "member" : "io.circe.JsonObject.traverse", "link" : "io\/circe\/JsonObject.html#traverse[F[_]](f:io.circe.Json=>F[io.circe.Json])(implicitF:cats.Applicative[F]):F[io.circe.JsonObject]", "kind" : "abstract def"}, {"label" : "remove", "tail" : "(key: String): JsonObject", "member" : "io.circe.JsonObject.remove", "link" : "io\/circe\/JsonObject.html#remove(key:String):io.circe.JsonObject", "kind" : "abstract def"}, {"label" : "+:", "tail" : "(field: (String, Json)): JsonObject", "member" : "io.circe.JsonObject.+:", "link" : "io\/circe\/JsonObject.html#+:(field:(String,io.circe.Json)):io.circe.JsonObject", "kind" : "abstract def"}, {"label" : "add", "tail" : "(key: String, value: Json): JsonObject", "member" : "io.circe.JsonObject.add", "link" : "io\/circe\/JsonObject.html#add(key:String,value:io.circe.Json):io.circe.JsonObject", "kind" : "abstract def"}, {"label" : "toIterable", "tail" : "(): Iterable[(String, Json)]", "member" : "io.circe.JsonObject.toIterable", "link" : "io\/circe\/JsonObject.html#toIterable:Iterable[(String,io.circe.Json)]", "kind" : "abstract def"}, {"label" : "toMap", "tail" : "(): Map[String, Json]", "member" : "io.circe.JsonObject.toMap", "link" : "io\/circe\/JsonObject.html#toMap:scala.collection.immutable.Map[String,io.circe.Json]", "kind" : "abstract def"}, {"label" : "values", "tail" : "(): Iterable[Json]", "member" : "io.circe.JsonObject.values", "link" : "io\/circe\/JsonObject.html#values:Iterable[io.circe.Json]", "kind" : "abstract def"}, {"label" : "keys", "tail" : "(): Iterable[String]", "member" : "io.circe.JsonObject.keys", "link" : "io\/circe\/JsonObject.html#keys:Iterable[String]", "kind" : "abstract def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "io.circe.JsonObject.isEmpty", "link" : "io\/circe\/JsonObject.html#isEmpty:Boolean", "kind" : "abstract def"}, {"label" : "size", "tail" : "(): Int", "member" : "io.circe.JsonObject.size", "link" : "io\/circe\/JsonObject.html#size:Int", "kind" : "abstract def"}, {"label" : "contains", "tail" : "(key: String): Boolean", "member" : "io.circe.JsonObject.contains", "link" : "io\/circe\/JsonObject.html#contains(key:String):Boolean", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(key: String): Option[Json]", "member" : "io.circe.JsonObject.apply", "link" : "io\/circe\/JsonObject.html#apply(key:String):Option[io.circe.Json]", "kind" : "abstract def"}], "members_object" : [{"label" : "eqJsonObject", "tail" : ": Eq[JsonObject]", "member" : "io.circe.JsonObject.eqJsonObject", "link" : "io\/circe\/JsonObject$.html#eqJsonObject:cats.Eq[io.circe.JsonObject]", "kind" : "implicit final val"}, {"label" : "showJsonObject", "tail" : ": Show[JsonObject]", "member" : "io.circe.JsonObject.showJsonObject", "link" : "io\/circe\/JsonObject$.html#showJsonObject:cats.Show[io.circe.JsonObject]", "kind" : "implicit final val"}, {"label" : "singleton", "tail" : "(key: String, value: Json): JsonObject", "member" : "io.circe.JsonObject.singleton", "link" : "io\/circe\/JsonObject$.html#singleton(key:String,value:io.circe.Json):io.circe.JsonObject", "kind" : "final def"}, {"label" : "empty", "tail" : ": JsonObject", "member" : "io.circe.JsonObject.empty", "link" : "io\/circe\/JsonObject$.html#empty:io.circe.JsonObject", "kind" : "final val"}, {"label" : "fromMap", "tail" : "(map: Map[String, Json]): JsonObject", "member" : "io.circe.JsonObject.fromMap", "link" : "io\/circe\/JsonObject$.html#fromMap(map:scala.collection.immutable.Map[String,io.circe.Json]):io.circe.JsonObject", "kind" : "final def"}, {"label" : "fromIterable", "tail" : "(fields: Iterable[(String, Json)]): JsonObject", "member" : "io.circe.JsonObject.fromIterable", "link" : "io\/circe\/JsonObject$.html#fromIterable(fields:Iterable[(String,io.circe.Json)]):io.circe.JsonObject", "kind" : "final def"}, {"label" : "fromFoldable", "tail" : "(fields: F[(String, Json)])(F: Foldable[F]): JsonObject", "member" : "io.circe.JsonObject.fromFoldable", "link" : "io\/circe\/JsonObject$.html#fromFoldable[F[_]](fields:F[(String,io.circe.Json)])(implicitF:cats.Foldable[F]):io.circe.JsonObject", "kind" : "final def"}, {"label" : "apply", "tail" : "(fields: (String, Json)*): JsonObject", "member" : "io.circe.JsonObject.apply", "link" : "io\/circe\/JsonObject$.html#apply(fields:(String,io.circe.Json)*):io.circe.JsonObject", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/JsonObject$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/JsonObject$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/JsonObject$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/JsonObject$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/JsonObject$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/JsonObject$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/JsonObject$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonObject$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonObject$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/JsonObject$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/JsonObject$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/JsonObject$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/JsonObject$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/JsonObject$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/JsonObject$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/JsonObject$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/JsonObject$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/JsonObject$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/JsonObject$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/JsonObject.html", "kind" : "class"}, {"name" : "io.circe.KeyDecoder", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/KeyDecoder.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/KeyDecoder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyDecoder[A]) ⇒ Boolean, msg: ⇒ Any): KeyDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/KeyDecoder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyDecoder[A]) ⇒ Boolean): KeyDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/KeyDecoder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): KeyDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/KeyDecoder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): KeyDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/KeyDecoder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (KeyDecoder[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/KeyDecoder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (KeyDecoder[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/KeyDecoder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ KeyDecoder[B]): KeyDecoder[B]", "member" : "io.circe.KeyDecoder.flatMap", "link" : "io\/circe\/KeyDecoder.html#flatMap[B](f:A=>io.circe.KeyDecoder[B]):io.circe.KeyDecoder[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): KeyDecoder[B]", "member" : "io.circe.KeyDecoder.map", "link" : "io\/circe\/KeyDecoder.html#map[B](f:A=>B):io.circe.KeyDecoder[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/KeyDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/KeyDecoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/KeyDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/KeyDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/KeyDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/KeyDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/KeyDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/KeyDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/KeyDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/KeyDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/KeyDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/KeyDecoder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/KeyDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/KeyDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/KeyDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/KeyDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(key: String): Option[A]", "member" : "io.circe.KeyDecoder.apply", "link" : "io\/circe\/KeyDecoder.html#apply(key:String):Option[A]", "kind" : "abstract def"}], "shortDescription" : "A type class that provides a conversion from a string used as a JSON key to avalue of type A.", "object" : "io\/circe\/KeyDecoder$.html", "members_object" : [{"label" : "keyDecoderInstances", "tail" : ": MonadError[KeyDecoder, Unit]", "member" : "io.circe.KeyDecoder.keyDecoderInstances", "link" : "io\/circe\/KeyDecoder$.html#keyDecoderInstances:cats.MonadError[io.circe.KeyDecoder,Unit]", "kind" : "implicit val"}, {"label" : "decodeKeyLong", "tail" : ": KeyDecoder[Long]", "member" : "io.circe.KeyDecoder.decodeKeyLong", "link" : "io\/circe\/KeyDecoder$.html#decodeKeyLong:io.circe.KeyDecoder[Long]", "kind" : "implicit val"}, {"label" : "decodeKeyInt", "tail" : ": KeyDecoder[Int]", "member" : "io.circe.KeyDecoder.decodeKeyInt", "link" : "io\/circe\/KeyDecoder$.html#decodeKeyInt:io.circe.KeyDecoder[Int]", "kind" : "implicit val"}, {"label" : "decodeKeyShort", "tail" : ": KeyDecoder[Short]", "member" : "io.circe.KeyDecoder.decodeKeyShort", "link" : "io\/circe\/KeyDecoder$.html#decodeKeyShort:io.circe.KeyDecoder[Short]", "kind" : "implicit val"}, {"label" : "decodeKeyByte", "tail" : ": KeyDecoder[Byte]", "member" : "io.circe.KeyDecoder.decodeKeyByte", "link" : "io\/circe\/KeyDecoder$.html#decodeKeyByte:io.circe.KeyDecoder[Byte]", "kind" : "implicit val"}, {"label" : "decodeKeyUUID", "tail" : ": KeyDecoder[UUID]", "member" : "io.circe.KeyDecoder.decodeKeyUUID", "link" : "io\/circe\/KeyDecoder$.html#decodeKeyUUID:io.circe.KeyDecoder[java.util.UUID]", "kind" : "implicit val"}, {"label" : "decodeKeySymbol", "tail" : ": KeyDecoder[Symbol]", "member" : "io.circe.KeyDecoder.decodeKeySymbol", "link" : "io\/circe\/KeyDecoder$.html#decodeKeySymbol:io.circe.KeyDecoder[Symbol]", "kind" : "implicit val"}, {"label" : "decodeKeyString", "tail" : ": KeyDecoder[String]", "member" : "io.circe.KeyDecoder.decodeKeyString", "link" : "io\/circe\/KeyDecoder$.html#decodeKeyString:io.circe.KeyDecoder[String]", "kind" : "implicit val"}, {"label" : "instance", "tail" : "(f: (String) ⇒ Option[A]): KeyDecoder[A]", "member" : "io.circe.KeyDecoder.instance", "link" : "io\/circe\/KeyDecoder$.html#instance[A](f:String=>Option[A]):io.circe.KeyDecoder[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(A: KeyDecoder[A]): KeyDecoder[A]", "member" : "io.circe.KeyDecoder.apply", "link" : "io\/circe\/KeyDecoder$.html#apply[A](implicitA:io.circe.KeyDecoder[A]):io.circe.KeyDecoder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/KeyDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/KeyDecoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/KeyDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/KeyDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/KeyDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/KeyDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/KeyDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/KeyDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/KeyDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/KeyDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/KeyDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/KeyDecoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/KeyDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/KeyDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/KeyDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/KeyDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/KeyDecoder.html", "kind" : "trait"}, {"name" : "io.circe.KeyEncoder", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/KeyEncoder.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/KeyEncoder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyEncoder[A]) ⇒ Boolean, msg: ⇒ Any): KeyEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/KeyEncoder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyEncoder[A]) ⇒ Boolean): KeyEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/KeyEncoder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): KeyEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/KeyEncoder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): KeyEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/KeyEncoder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (KeyEncoder[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/KeyEncoder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (KeyEncoder[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/KeyEncoder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (B) ⇒ A): KeyEncoder[B]", "member" : "io.circe.KeyEncoder.contramap", "link" : "io\/circe\/KeyEncoder.html#contramap[B](f:B=>A):io.circe.KeyEncoder[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/KeyEncoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/KeyEncoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/KeyEncoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/KeyEncoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/KeyEncoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/KeyEncoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/KeyEncoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyEncoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyEncoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyEncoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/KeyEncoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/KeyEncoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/KeyEncoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/KeyEncoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/KeyEncoder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/KeyEncoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/KeyEncoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/KeyEncoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/KeyEncoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(key: A): String", "member" : "io.circe.KeyEncoder.apply", "link" : "io\/circe\/KeyEncoder.html#apply(key:A):String", "kind" : "abstract def"}], "shortDescription" : "A type class that provides a conversion from a value of type A to a string.", "object" : "io\/circe\/KeyEncoder$.html", "members_object" : [{"label" : "keyEncoderContravariant", "tail" : ": Contravariant[KeyEncoder]", "member" : "io.circe.KeyEncoder.keyEncoderContravariant", "link" : "io\/circe\/KeyEncoder$.html#keyEncoderContravariant:cats.Contravariant[io.circe.KeyEncoder]", "kind" : "implicit val"}, {"label" : "encodeKeyLong", "tail" : ": KeyEncoder[Long]", "member" : "io.circe.KeyEncoder.encodeKeyLong", "link" : "io\/circe\/KeyEncoder$.html#encodeKeyLong:io.circe.KeyEncoder[Long]", "kind" : "implicit val"}, {"label" : "encodeKeyInt", "tail" : ": KeyEncoder[Int]", "member" : "io.circe.KeyEncoder.encodeKeyInt", "link" : "io\/circe\/KeyEncoder$.html#encodeKeyInt:io.circe.KeyEncoder[Int]", "kind" : "implicit val"}, {"label" : "encodeKeyShort", "tail" : ": KeyEncoder[Short]", "member" : "io.circe.KeyEncoder.encodeKeyShort", "link" : "io\/circe\/KeyEncoder$.html#encodeKeyShort:io.circe.KeyEncoder[Short]", "kind" : "implicit val"}, {"label" : "encodeKeyByte", "tail" : ": KeyEncoder[Byte]", "member" : "io.circe.KeyEncoder.encodeKeyByte", "link" : "io\/circe\/KeyEncoder$.html#encodeKeyByte:io.circe.KeyEncoder[Byte]", "kind" : "implicit val"}, {"label" : "encodeKeyUUID", "tail" : ": KeyEncoder[UUID]", "member" : "io.circe.KeyEncoder.encodeKeyUUID", "link" : "io\/circe\/KeyEncoder$.html#encodeKeyUUID:io.circe.KeyEncoder[java.util.UUID]", "kind" : "implicit val"}, {"label" : "encodeKeySymbol", "tail" : ": KeyEncoder[Symbol]", "member" : "io.circe.KeyEncoder.encodeKeySymbol", "link" : "io\/circe\/KeyEncoder$.html#encodeKeySymbol:io.circe.KeyEncoder[Symbol]", "kind" : "implicit val"}, {"label" : "encodeKeyString", "tail" : ": KeyEncoder[String]", "member" : "io.circe.KeyEncoder.encodeKeyString", "link" : "io\/circe\/KeyEncoder$.html#encodeKeyString:io.circe.KeyEncoder[String]", "kind" : "implicit val"}, {"label" : "instance", "tail" : "(f: (A) ⇒ String): KeyEncoder[A]", "member" : "io.circe.KeyEncoder.instance", "link" : "io\/circe\/KeyEncoder$.html#instance[A](f:A=>String):io.circe.KeyEncoder[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(A: KeyEncoder[A]): KeyEncoder[A]", "member" : "io.circe.KeyEncoder.apply", "link" : "io\/circe\/KeyEncoder$.html#apply[A](implicitA:io.circe.KeyEncoder[A]):io.circe.KeyEncoder[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/KeyEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/KeyEncoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/KeyEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/KeyEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/KeyEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/KeyEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/KeyEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/KeyEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/KeyEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/KeyEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/KeyEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/KeyEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/KeyEncoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/KeyEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/KeyEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/KeyEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/KeyEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/KeyEncoder.html", "kind" : "trait"}, {"name" : "io.circe.Parser", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/Parser.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/Parser.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Parser) ⇒ Boolean, msg: ⇒ Any): Parser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Parser.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Parser) ⇒ Boolean): Parser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Parser.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Parser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Parser.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Parser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Parser.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Parser, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/Parser.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Parser, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/Parser.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "decodeAccumulating", "tail" : "(input: String)(arg0: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.Parser.decodeAccumulating", "link" : "io\/circe\/Parser.html#decodeAccumulating[A](input:String)(implicitevidence$2:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "decode", "tail" : "(input: String)(arg0: Decoder[A]): Either[Error, A]", "member" : "io.circe.Parser.decode", "link" : "io\/circe\/Parser.html#decode[A](input:String)(implicitevidence$1:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "finishDecodeAccumulating", "tail" : "(input: Either[ParsingFailure, Json])(decoder: Decoder[A]): ValidatedNel[Error, A]", "member" : "io.circe.Parser.finishDecodeAccumulating", "link" : "io\/circe\/Parser.html#finishDecodeAccumulating[A](input:Either[io.circe.ParsingFailure,io.circe.Json])(implicitdecoder:io.circe.Decoder[A]):cats.data.ValidatedNel[io.circe.Error,A]", "kind" : "final def"}, {"label" : "finishDecode", "tail" : "(input: Either[ParsingFailure, Json])(decoder: Decoder[A]): Either[Error, A]", "member" : "io.circe.Parser.finishDecode", "link" : "io\/circe\/Parser.html#finishDecode[A](input:Either[io.circe.ParsingFailure,io.circe.Json])(implicitdecoder:io.circe.Decoder[A]):Either[io.circe.Error,A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Parser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Parser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Parser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Parser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Parser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Parser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Parser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Parser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Parser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Parser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Parser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Parser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Parser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Parser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Parser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Parser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Parser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Parser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Parser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "parse", "tail" : "(input: String): Either[ParsingFailure, Json]", "member" : "io.circe.Parser.parse", "link" : "io\/circe\/Parser.html#parse(input:String):Either[io.circe.ParsingFailure,io.circe.Json]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "io\/circe\/Parser.html", "kind" : "trait"}, {"name" : "io.circe.ParsingFailure", "shortDescription" : "An exception representing a parsing failure and wrapping the exceptionprovided by the parsing library.", "object" : "io\/circe\/ParsingFailure$.html", "members_object" : [{"label" : "showParsingFailure", "tail" : ": Show[ParsingFailure]", "member" : "io.circe.ParsingFailure.showParsingFailure", "link" : "io\/circe\/ParsingFailure$.html#showParsingFailure:cats.Show[io.circe.ParsingFailure]", "kind" : "implicit final val"}, {"label" : "eqParsingFailure", "tail" : ": Eq[ParsingFailure]", "member" : "io.circe.ParsingFailure.eqParsingFailure", "link" : "io\/circe\/ParsingFailure$.html#eqParsingFailure:cats.Eq[io.circe.ParsingFailure]", "kind" : "implicit final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/ParsingFailure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/ParsingFailure$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/ParsingFailure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/ParsingFailure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/ParsingFailure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/ParsingFailure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/ParsingFailure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ParsingFailure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ParsingFailure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ParsingFailure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/ParsingFailure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/ParsingFailure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/ParsingFailure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/ParsingFailure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/ParsingFailure$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/ParsingFailure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/ParsingFailure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/ParsingFailure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/ParsingFailure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getStackTraceString", "tail" : "(): String", "member" : "scala.Predef.RichException.getStackTraceString", "link" : "io\/circe\/ParsingFailure.html#getStackTraceString:String", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/ParsingFailure.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/ParsingFailure.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParsingFailure) ⇒ Boolean, msg: ⇒ Any): ParsingFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/ParsingFailure.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParsingFailure) ⇒ Boolean): ParsingFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/ParsingFailure.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ParsingFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/ParsingFailure.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ParsingFailure", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/ParsingFailure.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ParsingFailure, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/ParsingFailure.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ParsingFailure, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/ParsingFailure.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "io.circe.ParsingFailure.getMessage", "link" : "io\/circe\/ParsingFailure.html#getMessage():String", "kind" : "final def"}, {"member" : "io.circe.ParsingFailure#<init>", "error" : "unsupported entity"}, {"label" : "underlying", "tail" : ": Throwable", "member" : "io.circe.ParsingFailure.underlying", "link" : "io\/circe\/ParsingFailure.html#underlying:Throwable", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "io.circe.ParsingFailure.message", "link" : "io\/circe\/ParsingFailure.html#message:String", "kind" : "val"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "io.circe.Error.fillInStackTrace", "link" : "io\/circe\/ParsingFailure.html#fillInStackTrace():Throwable", "kind" : "final def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "io\/circe\/ParsingFailure.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "io\/circe\/ParsingFailure.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "io\/circe\/ParsingFailure.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "io\/circe\/ParsingFailure.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/ParsingFailure.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/ParsingFailure.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "io\/circe\/ParsingFailure.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "io\/circe\/ParsingFailure.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "io\/circe\/ParsingFailure.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "io\/circe\/ParsingFailure.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "io\/circe\/ParsingFailure.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/ParsingFailure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/ParsingFailure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/ParsingFailure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/ParsingFailure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/ParsingFailure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/ParsingFailure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/ParsingFailure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ParsingFailure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ParsingFailure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/ParsingFailure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/ParsingFailure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/ParsingFailure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/ParsingFailure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/ParsingFailure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/ParsingFailure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/ParsingFailure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/ParsingFailure.html", "kind" : "case class"}, {"name" : "io.circe.Printer", "shortDescription" : "A pretty-printer for JSON values.", "object" : "io\/circe\/Printer$.html", "members_object" : [{"label" : "spaces4SortKeys", "tail" : ": Printer", "member" : "io.circe.Printer.spaces4SortKeys", "link" : "io\/circe\/Printer$.html#spaces4SortKeys:io.circe.Printer", "kind" : "final val"}, {"label" : "spaces4", "tail" : ": Printer", "member" : "io.circe.Printer.spaces4", "link" : "io\/circe\/Printer$.html#spaces4:io.circe.Printer", "kind" : "final val"}, {"label" : "spaces2SortKeys", "tail" : ": Printer", "member" : "io.circe.Printer.spaces2SortKeys", "link" : "io\/circe\/Printer$.html#spaces2SortKeys:io.circe.Printer", "kind" : "final val"}, {"label" : "spaces2", "tail" : ": Printer", "member" : "io.circe.Printer.spaces2", "link" : "io\/circe\/Printer$.html#spaces2:io.circe.Printer", "kind" : "final val"}, {"label" : "indented", "tail" : "(indent: String, sortKeys: Boolean): Printer", "member" : "io.circe.Printer.indented", "link" : "io\/circe\/Printer$.html#indented(indent:String,sortKeys:Boolean):io.circe.Printer", "kind" : "final def"}, {"label" : "noSpacesSortKeys", "tail" : ": Printer", "member" : "io.circe.Printer.noSpacesSortKeys", "link" : "io\/circe\/Printer$.html#noSpacesSortKeys:io.circe.Printer", "kind" : "final val"}, {"label" : "noSpaces", "tail" : ": Printer", "member" : "io.circe.Printer.noSpaces", "link" : "io\/circe\/Printer$.html#noSpaces:io.circe.Printer", "kind" : "final val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Printer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Printer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Printer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Printer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Printer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Printer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Printer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Printer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Printer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Printer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Printer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Printer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/Printer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Printer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/Printer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/Printer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Printer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Printer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Printer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/Printer.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/Printer.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Printer) ⇒ Boolean, msg: ⇒ Any): Printer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Printer.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Printer) ⇒ Boolean): Printer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Printer.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Printer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Printer.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Printer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/Printer.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Printer, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/Printer.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Printer, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/Printer.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "withSortedKeys", "tail" : "(): Printer", "member" : "io.circe.Printer.withSortedKeys", "link" : "io\/circe\/Printer.html#withSortedKeys:io.circe.Printer", "kind" : "final def"}, {"label" : "printToByteBuffer", "tail" : "(json: Json): ByteBuffer", "member" : "io.circe.Printer.printToByteBuffer", "link" : "io\/circe\/Printer.html#printToByteBuffer(json:io.circe.Json):java.nio.ByteBuffer", "kind" : "final def"}, {"label" : "printToByteBuffer", "tail" : "(json: Json, cs: Charset): ByteBuffer", "member" : "io.circe.Printer.printToByteBuffer", "link" : "io\/circe\/Printer.html#printToByteBuffer(json:io.circe.Json,cs:java.nio.charset.Charset):java.nio.ByteBuffer", "kind" : "final def"}, {"label" : "print", "tail" : "(json: Json): String", "member" : "io.circe.Printer.print", "link" : "io\/circe\/Printer.html#print(json:io.circe.Json):String", "kind" : "final def"}, {"member" : "io.circe.Printer#<init>", "error" : "unsupported entity"}, {"label" : "sortKeys", "tail" : ": Boolean", "member" : "io.circe.Printer.sortKeys", "link" : "io\/circe\/Printer.html#sortKeys:Boolean", "kind" : "val"}, {"label" : "escapeNonAscii", "tail" : ": Boolean", "member" : "io.circe.Printer.escapeNonAscii", "link" : "io\/circe\/Printer.html#escapeNonAscii:Boolean", "kind" : "val"}, {"label" : "predictSize", "tail" : ": Boolean", "member" : "io.circe.Printer.predictSize", "link" : "io\/circe\/Printer.html#predictSize:Boolean", "kind" : "val"}, {"label" : "reuseWriters", "tail" : ": Boolean", "member" : "io.circe.Printer.reuseWriters", "link" : "io\/circe\/Printer.html#reuseWriters:Boolean", "kind" : "val"}, {"label" : "colonRight", "tail" : ": String", "member" : "io.circe.Printer.colonRight", "link" : "io\/circe\/Printer.html#colonRight:String", "kind" : "val"}, {"label" : "colonLeft", "tail" : ": String", "member" : "io.circe.Printer.colonLeft", "link" : "io\/circe\/Printer.html#colonLeft:String", "kind" : "val"}, {"label" : "objectCommaRight", "tail" : ": String", "member" : "io.circe.Printer.objectCommaRight", "link" : "io\/circe\/Printer.html#objectCommaRight:String", "kind" : "val"}, {"label" : "objectCommaLeft", "tail" : ": String", "member" : "io.circe.Printer.objectCommaLeft", "link" : "io\/circe\/Printer.html#objectCommaLeft:String", "kind" : "val"}, {"label" : "arrayCommaRight", "tail" : ": String", "member" : "io.circe.Printer.arrayCommaRight", "link" : "io\/circe\/Printer.html#arrayCommaRight:String", "kind" : "val"}, {"label" : "arrayCommaLeft", "tail" : ": String", "member" : "io.circe.Printer.arrayCommaLeft", "link" : "io\/circe\/Printer.html#arrayCommaLeft:String", "kind" : "val"}, {"label" : "lrbracketsEmpty", "tail" : ": String", "member" : "io.circe.Printer.lrbracketsEmpty", "link" : "io\/circe\/Printer.html#lrbracketsEmpty:String", "kind" : "val"}, {"label" : "rbracketRight", "tail" : ": String", "member" : "io.circe.Printer.rbracketRight", "link" : "io\/circe\/Printer.html#rbracketRight:String", "kind" : "val"}, {"label" : "rbracketLeft", "tail" : ": String", "member" : "io.circe.Printer.rbracketLeft", "link" : "io\/circe\/Printer.html#rbracketLeft:String", "kind" : "val"}, {"label" : "lbracketRight", "tail" : ": String", "member" : "io.circe.Printer.lbracketRight", "link" : "io\/circe\/Printer.html#lbracketRight:String", "kind" : "val"}, {"label" : "lbracketLeft", "tail" : ": String", "member" : "io.circe.Printer.lbracketLeft", "link" : "io\/circe\/Printer.html#lbracketLeft:String", "kind" : "val"}, {"label" : "rbraceRight", "tail" : ": String", "member" : "io.circe.Printer.rbraceRight", "link" : "io\/circe\/Printer.html#rbraceRight:String", "kind" : "val"}, {"label" : "rbraceLeft", "tail" : ": String", "member" : "io.circe.Printer.rbraceLeft", "link" : "io\/circe\/Printer.html#rbraceLeft:String", "kind" : "val"}, {"label" : "lbraceRight", "tail" : ": String", "member" : "io.circe.Printer.lbraceRight", "link" : "io\/circe\/Printer.html#lbraceRight:String", "kind" : "val"}, {"label" : "lbraceLeft", "tail" : ": String", "member" : "io.circe.Printer.lbraceLeft", "link" : "io\/circe\/Printer.html#lbraceLeft:String", "kind" : "val"}, {"label" : "indent", "tail" : ": String", "member" : "io.circe.Printer.indent", "link" : "io\/circe\/Printer.html#indent:String", "kind" : "val"}, {"label" : "dropNullValues", "tail" : ": Boolean", "member" : "io.circe.Printer.dropNullValues", "link" : "io\/circe\/Printer.html#dropNullValues:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/Printer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/Printer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/Printer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/Printer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/Printer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/Printer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/Printer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Printer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Printer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/Printer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/Printer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/Printer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/Printer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/Printer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/Printer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/Printer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/Printer.html", "kind" : "case class"}], "io.circe.generic.util" : [{"name" : "io.circe.generic.util.PatchWithOptions", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatchWithOptions[R]) ⇒ Boolean, msg: ⇒ Any): PatchWithOptions[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PatchWithOptions[R]) ⇒ Boolean): PatchWithOptions[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PatchWithOptions[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PatchWithOptions[R]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PatchWithOptions[R], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PatchWithOptions[R], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(r: R, o: Out): R", "member" : "io.circe.generic.util.PatchWithOptions.apply", "link" : "io\/circe\/generic\/util\/PatchWithOptions.html#apply(r:R,o:PatchWithOptions.this.Out):R", "kind" : "abstract def"}, {"member" : "io.circe.generic.util.PatchWithOptions.Out", "error" : "unsupported entity"}], "shortDescription" : "", "object" : "io\/circe\/generic\/util\/PatchWithOptions$.html", "members_object" : [{"label" : "hconsPatchWithOptions", "tail" : "(tailPatch: PatchWithOptions[T]): Aux[::[FieldType[K, V], T], ::[FieldType[K, Option[V]], Out]]", "member" : "io.circe.generic.util.PatchWithOptions.hconsPatchWithOptions", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#hconsPatchWithOptions[K<:Symbol,V,T<:shapeless.HList](implicittailPatch:io.circe.generic.util.PatchWithOptions[T]):io.circe.generic.util.PatchWithOptions.Aux[shapeless.labelled.FieldType[K,V]::T,shapeless.labelled.FieldType[K,Option[V]]::tailPatch.Out]", "kind" : "implicit final def"}, {"label" : "hnilPatchWithOptions", "tail" : ": Aux[HNil, HNil]", "member" : "io.circe.generic.util.PatchWithOptions.hnilPatchWithOptions", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#hnilPatchWithOptions:io.circe.generic.util.PatchWithOptions.Aux[shapeless.HNil,shapeless.HNil]", "kind" : "implicit final val"}, {"label" : "Aux", "tail" : "", "member" : "io.circe.generic.util.PatchWithOptions.Aux", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#Aux[R<:shapeless.HList,Out0<:shapeless.HList]=io.circe.generic.util.PatchWithOptions[R]{typeOut=Out0}", "kind" : "final type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/util\/PatchWithOptions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/generic\/util\/PatchWithOptions.html", "kind" : "trait"}], "io.circe.testing" : [{"name" : "io.circe.testing.ArbitraryInstances", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/ArbitraryInstances.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/ArbitraryInstances.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArbitraryInstances) ⇒ Boolean, msg: ⇒ Any): ArbitraryInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ArbitraryInstances.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ArbitraryInstances) ⇒ Boolean): ArbitraryInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ArbitraryInstances.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ArbitraryInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ArbitraryInstances.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ArbitraryInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ArbitraryInstances.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ArbitraryInstances, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/ArbitraryInstances.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ArbitraryInstances, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/ArbitraryInstances.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "arbitraryAsArrayEncoder", "tail" : "(arg0: Cogen[A]): Arbitrary[AsArray[A]]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryAsArrayEncoder", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryAsArrayEncoder[A](implicitevidence$6:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[io.circe.Encoder.AsArray[A]]", "kind" : "implicit def"}, {"label" : "arbitraryAsObjectEncoder", "tail" : "(arg0: Cogen[A]): Arbitrary[AsObject[A]]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryAsObjectEncoder", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryAsObjectEncoder[A](implicitevidence$5:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[io.circe.Encoder.AsObject[A]]", "kind" : "implicit def"}, {"label" : "arbitraryDecoder", "tail" : "(arg0: Arbitrary[A]): Arbitrary[Decoder[A]]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryDecoder", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryDecoder[A](implicitevidence$4:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[io.circe.Decoder[A]]", "kind" : "implicit def"}, {"label" : "arbitraryEncoder", "tail" : "(arg0: Cogen[A]): Arbitrary[Encoder[A]]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryEncoder", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryEncoder[A](implicitevidence$3:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[io.circe.Encoder[A]]", "kind" : "implicit def"}, {"label" : "arbitraryKeyDecoder", "tail" : "(arg0: Arbitrary[A]): Arbitrary[KeyDecoder[A]]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryKeyDecoder", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryKeyDecoder[A](implicitevidence$2:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[io.circe.KeyDecoder[A]]", "kind" : "implicit def"}, {"label" : "arbitraryKeyEncoder", "tail" : "(arg0: Cogen[A]): Arbitrary[KeyEncoder[A]]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryKeyEncoder", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryKeyEncoder[A](implicitevidence$1:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[io.circe.KeyEncoder[A]]", "kind" : "implicit def"}, {"label" : "arbitraryDecodingFailure", "tail" : ": Arbitrary[DecodingFailure]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryDecodingFailure", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryDecodingFailure:org.scalacheck.Arbitrary[io.circe.DecodingFailure]", "kind" : "implicit val"}, {"label" : "arbitraryJsonObject", "tail" : ": Arbitrary[JsonObject]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryJsonObject", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryJsonObject:org.scalacheck.Arbitrary[io.circe.JsonObject]", "kind" : "implicit val"}, {"label" : "arbitraryJson", "tail" : ": Arbitrary[Json]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryJson", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryJson:org.scalacheck.Arbitrary[io.circe.Json]", "kind" : "implicit val"}, {"label" : "arbitraryJsonNumber", "tail" : ": Arbitrary[JsonNumber]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryJsonNumber", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryJsonNumber:org.scalacheck.Arbitrary[io.circe.JsonNumber]", "kind" : "implicit val"}, {"label" : "arbitraryBiggerDecimal", "tail" : ": Arbitrary[BiggerDecimal]", "member" : "io.circe.testing.ArbitraryInstances.arbitraryBiggerDecimal", "link" : "io\/circe\/testing\/ArbitraryInstances.html#arbitraryBiggerDecimal:org.scalacheck.Arbitrary[io.circe.numbers.BiggerDecimal]", "kind" : "implicit val"}, {"label" : "maxJsonObjectSize", "tail" : "(): Int", "member" : "io.circe.testing.ArbitraryInstances.maxJsonObjectSize", "link" : "io\/circe\/testing\/ArbitraryInstances.html#maxJsonObjectSize:Int", "kind" : "def"}, {"label" : "maxJsonArraySize", "tail" : "(): Int", "member" : "io.circe.testing.ArbitraryInstances.maxJsonArraySize", "link" : "io\/circe\/testing\/ArbitraryInstances.html#maxJsonArraySize:Int", "kind" : "def"}, {"label" : "maxJsonDepth", "tail" : "(): Int", "member" : "io.circe.testing.ArbitraryInstances.maxJsonDepth", "link" : "io\/circe\/testing\/ArbitraryInstances.html#maxJsonDepth:Int", "kind" : "def"}, {"label" : "shrinkJson", "tail" : ": Shrink[Json]", "member" : "io.circe.testing.ShrinkInstances.shrinkJson", "link" : "io\/circe\/testing\/ArbitraryInstances.html#shrinkJson:org.scalacheck.Shrink[io.circe.Json]", "kind" : "implicit val"}, {"label" : "shrinkJsonObject", "tail" : ": Shrink[JsonObject]", "member" : "io.circe.testing.ShrinkInstances.shrinkJsonObject", "link" : "io\/circe\/testing\/ArbitraryInstances.html#shrinkJsonObject:org.scalacheck.Shrink[io.circe.JsonObject]", "kind" : "implicit val"}, {"label" : "shrinkJsonNumber", "tail" : ": Shrink[JsonNumber]", "member" : "io.circe.testing.ShrinkInstances.shrinkJsonNumber", "link" : "io\/circe\/testing\/ArbitraryInstances.html#shrinkJsonNumber:org.scalacheck.Shrink[io.circe.JsonNumber]", "kind" : "implicit val"}, {"label" : "cogenJsonObject", "tail" : ": Cogen[JsonObject]", "member" : "io.circe.testing.CogenInstances.cogenJsonObject", "link" : "io\/circe\/testing\/ArbitraryInstances.html#cogenJsonObject:org.scalacheck.Cogen[io.circe.JsonObject]", "kind" : "implicit val"}, {"label" : "cogenJsonNumber", "tail" : ": Cogen[JsonNumber]", "member" : "io.circe.testing.CogenInstances.cogenJsonNumber", "link" : "io\/circe\/testing\/ArbitraryInstances.html#cogenJsonNumber:org.scalacheck.Cogen[io.circe.JsonNumber]", "kind" : "implicit val"}, {"label" : "cogenJson", "tail" : ": Cogen[Json]", "member" : "io.circe.testing.CogenInstances.cogenJson", "link" : "io\/circe\/testing\/ArbitraryInstances.html#cogenJson:org.scalacheck.Cogen[io.circe.Json]", "kind" : "implicit val"}, {"label" : "cogenDecodingFailure", "tail" : ": Cogen[DecodingFailure]", "member" : "io.circe.testing.CogenInstances.cogenDecodingFailure", "link" : "io\/circe\/testing\/ArbitraryInstances.html#cogenDecodingFailure:org.scalacheck.Cogen[io.circe.DecodingFailure]", "kind" : "implicit val"}, {"label" : "transformJsonNumber", "tail" : "(n: JsonNumber): JsonNumber", "member" : "io.circe.testing.ArbitraryJsonNumberTransformer.transformJsonNumber", "link" : "io\/circe\/testing\/ArbitraryInstances.html#transformJsonNumber(n:io.circe.JsonNumber):io.circe.JsonNumber", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/ArbitraryInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/circe\/testing\/ArbitraryInstances.html", "kind" : "trait"}, {"name" : "io.circe.testing.CodecLaws", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/CodecLaws.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/CodecLaws.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CodecLaws[A]) ⇒ Boolean, msg: ⇒ Any): CodecLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/CodecLaws.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CodecLaws[A]) ⇒ Boolean): CodecLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/CodecLaws.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CodecLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/CodecLaws.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CodecLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/CodecLaws.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CodecLaws[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/CodecLaws.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CodecLaws[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/CodecLaws.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "codecAccumulatingConsistency", "tail" : "(json: Json): IsEq[Result[A]]", "member" : "io.circe.testing.CodecLaws.codecAccumulatingConsistency", "link" : "io\/circe\/testing\/CodecLaws.html#codecAccumulatingConsistency(json:io.circe.Json):cats.laws.IsEq[io.circe.Decoder.Result[A]]", "kind" : "def"}, {"label" : "codecRoundTrip", "tail" : "(a: A): IsEq[Result[A]]", "member" : "io.circe.testing.CodecLaws.codecRoundTrip", "link" : "io\/circe\/testing\/CodecLaws.html#codecRoundTrip(a:A):cats.laws.IsEq[io.circe.Decoder.Result[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/CodecLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/CodecLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/CodecLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/CodecLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/CodecLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/CodecLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/CodecLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/CodecLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/CodecLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/CodecLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/CodecLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/CodecLaws.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/CodecLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/CodecLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/CodecLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/CodecLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encode", "tail" : "(): Encoder[A]", "member" : "io.circe.testing.CodecLaws.encode", "link" : "io\/circe\/testing\/CodecLaws.html#encode:io.circe.Encoder[A]", "kind" : "abstract def"}, {"label" : "decode", "tail" : "(): Decoder[A]", "member" : "io.circe.testing.CodecLaws.decode", "link" : "io\/circe\/testing\/CodecLaws.html#decode:io.circe.Decoder[A]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/circe\/testing\/CodecLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(decodeA: Decoder[A], encodeA: Encoder[A]): CodecLaws[A]", "member" : "io.circe.testing.CodecLaws.apply", "link" : "io\/circe\/testing\/CodecLaws$.html#apply[A](implicitdecodeA:io.circe.Decoder[A],implicitencodeA:io.circe.Encoder[A]):io.circe.testing.CodecLaws[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/CodecLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/CodecLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/CodecLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/CodecLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/CodecLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/CodecLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/CodecLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/CodecLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/CodecLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/CodecLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/CodecLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/CodecLaws$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/CodecLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/CodecLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/CodecLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/CodecLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/testing\/CodecLaws.html", "kind" : "trait"}, {"name" : "io.circe.testing.CodecTests", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/CodecTests.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/CodecTests.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CodecTests[A]) ⇒ Boolean, msg: ⇒ Any): CodecTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/CodecTests.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CodecTests[A]) ⇒ Boolean): CodecTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/CodecTests.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CodecTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/CodecTests.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CodecTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/CodecTests.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CodecTests[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/CodecTests.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CodecTests[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/CodecTests.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "io\/circe\/testing\/CodecTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "io\/circe\/testing\/CodecTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "io\/circe\/testing\/CodecTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "io\/circe\/testing\/CodecTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "unserializableCodec", "tail" : "(arbitraryA: Arbitrary[A], shrinkA: Shrink[A], eqA: Eq[A], arbitraryJson: Arbitrary[Json], shrinkJson: Shrink[Json]): RuleSet", "member" : "io.circe.testing.CodecTests.unserializableCodec", "link" : "io\/circe\/testing\/CodecTests.html#unserializableCodec(implicitarbitraryA:org.scalacheck.Arbitrary[A],implicitshrinkA:org.scalacheck.Shrink[A],impliciteqA:cats.kernel.Eq[A],implicitarbitraryJson:org.scalacheck.Arbitrary[io.circe.Json],implicitshrinkJson:org.scalacheck.Shrink[io.circe.Json]):CodecTests.this.RuleSet", "kind" : "def"}, {"label" : "codec", "tail" : "(arbitraryA: Arbitrary[A], shrinkA: Shrink[A], eqA: Eq[A], arbitraryJson: Arbitrary[Json], shrinkJson: Shrink[Json]): RuleSet", "member" : "io.circe.testing.CodecTests.codec", "link" : "io\/circe\/testing\/CodecTests.html#codec(implicitarbitraryA:org.scalacheck.Arbitrary[A],implicitshrinkA:org.scalacheck.Shrink[A],impliciteqA:cats.kernel.Eq[A],implicitarbitraryJson:org.scalacheck.Arbitrary[io.circe.Json],implicitshrinkJson:org.scalacheck.Shrink[io.circe.Json]):CodecTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "io\/circe\/testing\/CodecTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/CodecTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/CodecTests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/CodecTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/CodecTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/CodecTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/CodecTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/CodecTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/CodecTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/CodecTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/CodecTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/CodecTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/CodecTests.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/CodecTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/CodecTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/CodecTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/CodecTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): CodecLaws[A]", "member" : "io.circe.testing.CodecTests.laws", "link" : "io\/circe\/testing\/CodecTests.html#laws:io.circe.testing.CodecLaws[A]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/circe\/testing\/CodecTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: Decoder[A], arg1: Encoder[A]): CodecTests[A]", "member" : "io.circe.testing.CodecTests.apply", "link" : "io\/circe\/testing\/CodecTests$.html#apply[A](implicitevidence$1:io.circe.Decoder[A],implicitevidence$2:io.circe.Encoder[A]):io.circe.testing.CodecTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/CodecTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/CodecTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/CodecTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/CodecTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/CodecTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/CodecTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/CodecTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/CodecTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/CodecTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/CodecTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/CodecTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/CodecTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/CodecTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/CodecTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/CodecTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/CodecTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/CodecTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/testing\/CodecTests.html", "kind" : "trait"}, {"name" : "io.circe.testing.EqInstances", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/EqInstances.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/EqInstances.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EqInstances) ⇒ Boolean, msg: ⇒ Any): EqInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/EqInstances.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EqInstances) ⇒ Boolean): EqInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/EqInstances.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): EqInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/EqInstances.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EqInstances", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/EqInstances.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EqInstances, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/EqInstances.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EqInstances, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/EqInstances.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "eqAsArrayEncoder", "tail" : "(arg0: Arbitrary[A]): Eq[AsArray[A]]", "member" : "io.circe.testing.EqInstances.eqAsArrayEncoder", "link" : "io\/circe\/testing\/EqInstances.html#eqAsArrayEncoder[A](implicitevidence$6:org.scalacheck.Arbitrary[A]):cats.kernel.Eq[io.circe.Encoder.AsArray[A]]", "kind" : "implicit def"}, {"label" : "eqAsObjectEncoder", "tail" : "(arg0: Arbitrary[A]): Eq[AsObject[A]]", "member" : "io.circe.testing.EqInstances.eqAsObjectEncoder", "link" : "io\/circe\/testing\/EqInstances.html#eqAsObjectEncoder[A](implicitevidence$5:org.scalacheck.Arbitrary[A]):cats.kernel.Eq[io.circe.Encoder.AsObject[A]]", "kind" : "implicit def"}, {"label" : "eqDecoder", "tail" : "(arg0: Eq[A]): Eq[Decoder[A]]", "member" : "io.circe.testing.EqInstances.eqDecoder", "link" : "io\/circe\/testing\/EqInstances.html#eqDecoder[A](implicitevidence$4:cats.kernel.Eq[A]):cats.kernel.Eq[io.circe.Decoder[A]]", "kind" : "implicit def"}, {"label" : "eqEncoder", "tail" : "(arg0: Arbitrary[A]): Eq[Encoder[A]]", "member" : "io.circe.testing.EqInstances.eqEncoder", "link" : "io\/circe\/testing\/EqInstances.html#eqEncoder[A](implicitevidence$3:org.scalacheck.Arbitrary[A]):cats.kernel.Eq[io.circe.Encoder[A]]", "kind" : "implicit def"}, {"label" : "eqKeyDecoder", "tail" : "(arg0: Eq[A]): Eq[KeyDecoder[A]]", "member" : "io.circe.testing.EqInstances.eqKeyDecoder", "link" : "io\/circe\/testing\/EqInstances.html#eqKeyDecoder[A](implicitevidence$2:cats.kernel.Eq[A]):cats.kernel.Eq[io.circe.KeyDecoder[A]]", "kind" : "implicit def"}, {"label" : "eqKeyEncoder", "tail" : "(arg0: Arbitrary[A]): Eq[KeyEncoder[A]]", "member" : "io.circe.testing.EqInstances.eqKeyEncoder", "link" : "io\/circe\/testing\/EqInstances.html#eqKeyEncoder[A](implicitevidence$1:org.scalacheck.Arbitrary[A]):cats.kernel.Eq[io.circe.KeyEncoder[A]]", "kind" : "implicit def"}, {"label" : "codecEqualityCheckCount", "tail" : "(): Int", "member" : "io.circe.testing.EqInstances.codecEqualityCheckCount", "link" : "io\/circe\/testing\/EqInstances.html#codecEqualityCheckCount:Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/EqInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/EqInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/EqInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/EqInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/EqInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/EqInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/EqInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/EqInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/EqInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/EqInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/EqInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/EqInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/EqInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/EqInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/EqInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/EqInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/EqInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/EqInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/EqInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "io\/circe\/testing\/EqInstances.html", "kind" : "trait"}, {"name" : "io.circe.testing.KeyCodecLaws", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/KeyCodecLaws.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/KeyCodecLaws.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyCodecLaws[A]) ⇒ Boolean, msg: ⇒ Any): KeyCodecLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/KeyCodecLaws.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyCodecLaws[A]) ⇒ Boolean): KeyCodecLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/KeyCodecLaws.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): KeyCodecLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/KeyCodecLaws.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): KeyCodecLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/KeyCodecLaws.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (KeyCodecLaws[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/KeyCodecLaws.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (KeyCodecLaws[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/KeyCodecLaws.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "keyCodecRoundTrip", "tail" : "(a: A): IsEq[Option[A]]", "member" : "io.circe.testing.KeyCodecLaws.keyCodecRoundTrip", "link" : "io\/circe\/testing\/KeyCodecLaws.html#keyCodecRoundTrip(a:A):cats.kernel.laws.IsEq[Option[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/KeyCodecLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/KeyCodecLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/KeyCodecLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/KeyCodecLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/KeyCodecLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/KeyCodecLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/KeyCodecLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/KeyCodecLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/KeyCodecLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/KeyCodecLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/KeyCodecLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/KeyCodecLaws.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/KeyCodecLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/KeyCodecLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/KeyCodecLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/KeyCodecLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encodeKey", "tail" : "(): KeyEncoder[A]", "member" : "io.circe.testing.KeyCodecLaws.encodeKey", "link" : "io\/circe\/testing\/KeyCodecLaws.html#encodeKey:io.circe.KeyEncoder[A]", "kind" : "abstract def"}, {"label" : "decodeKey", "tail" : "(): KeyDecoder[A]", "member" : "io.circe.testing.KeyCodecLaws.decodeKey", "link" : "io\/circe\/testing\/KeyCodecLaws.html#decodeKey:io.circe.KeyDecoder[A]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/circe\/testing\/KeyCodecLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: KeyDecoder[A], arg1: KeyEncoder[A]): KeyCodecLaws[A]", "member" : "io.circe.testing.KeyCodecLaws.apply", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#apply[A](implicitevidence$1:io.circe.KeyDecoder[A],implicitevidence$2:io.circe.KeyEncoder[A]):io.circe.testing.KeyCodecLaws[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/KeyCodecLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/KeyCodecLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/testing\/KeyCodecLaws.html", "kind" : "trait"}, {"name" : "io.circe.testing.KeyCodecTests", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/KeyCodecTests.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/KeyCodecTests.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyCodecTests[A]) ⇒ Boolean, msg: ⇒ Any): KeyCodecTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/KeyCodecTests.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (KeyCodecTests[A]) ⇒ Boolean): KeyCodecTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/KeyCodecTests.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): KeyCodecTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/KeyCodecTests.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): KeyCodecTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/KeyCodecTests.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (KeyCodecTests[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/KeyCodecTests.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (KeyCodecTests[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/KeyCodecTests.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "io\/circe\/testing\/KeyCodecTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "io\/circe\/testing\/KeyCodecTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "io\/circe\/testing\/KeyCodecTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "io\/circe\/testing\/KeyCodecTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "unserializableKeyCodec", "tail" : "(arbitraryA: Arbitrary[A], shrinkA: Shrink[A], eqA: Eq[A], arbitraryString: Arbitrary[String], shrinkString: Shrink[String]): RuleSet", "member" : "io.circe.testing.KeyCodecTests.unserializableKeyCodec", "link" : "io\/circe\/testing\/KeyCodecTests.html#unserializableKeyCodec(implicitarbitraryA:org.scalacheck.Arbitrary[A],implicitshrinkA:org.scalacheck.Shrink[A],impliciteqA:cats.kernel.Eq[A],implicitarbitraryString:org.scalacheck.Arbitrary[String],implicitshrinkString:org.scalacheck.Shrink[String]):KeyCodecTests.this.RuleSet", "kind" : "def"}, {"label" : "keyCodec", "tail" : "(arbitraryA: Arbitrary[A], shrinkA: Shrink[A], eqA: Eq[A], arbitraryString: Arbitrary[String], shrinkString: Shrink[String]): RuleSet", "member" : "io.circe.testing.KeyCodecTests.keyCodec", "link" : "io\/circe\/testing\/KeyCodecTests.html#keyCodec(implicitarbitraryA:org.scalacheck.Arbitrary[A],implicitshrinkA:org.scalacheck.Shrink[A],impliciteqA:cats.kernel.Eq[A],implicitarbitraryString:org.scalacheck.Arbitrary[String],implicitshrinkString:org.scalacheck.Shrink[String]):KeyCodecTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "io\/circe\/testing\/KeyCodecTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/KeyCodecTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/KeyCodecTests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/KeyCodecTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/KeyCodecTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/KeyCodecTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/KeyCodecTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/KeyCodecTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/KeyCodecTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/KeyCodecTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/KeyCodecTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/KeyCodecTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/KeyCodecTests.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/KeyCodecTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/KeyCodecTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/KeyCodecTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/KeyCodecTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): KeyCodecLaws[A]", "member" : "io.circe.testing.KeyCodecTests.laws", "link" : "io\/circe\/testing\/KeyCodecTests.html#laws:io.circe.testing.KeyCodecLaws[A]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/circe\/testing\/KeyCodecTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: KeyDecoder[A], arg1: KeyEncoder[A]): KeyCodecTests[A]", "member" : "io.circe.testing.KeyCodecTests.apply", "link" : "io\/circe\/testing\/KeyCodecTests$.html#apply[A](implicitevidence$3:io.circe.KeyDecoder[A],implicitevidence$4:io.circe.KeyEncoder[A]):io.circe.testing.KeyCodecTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/KeyCodecTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/KeyCodecTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/KeyCodecTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/KeyCodecTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/KeyCodecTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/KeyCodecTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/KeyCodecTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/KeyCodecTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/KeyCodecTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/KeyCodecTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/KeyCodecTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/KeyCodecTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/KeyCodecTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/KeyCodecTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/KeyCodecTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/KeyCodecTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/KeyCodecTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/testing\/KeyCodecTests.html", "kind" : "trait"}, {"name" : "io.circe.testing.ParserLaws", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/ParserLaws.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/ParserLaws.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParserLaws[P]) ⇒ Boolean, msg: ⇒ Any): ParserLaws[P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ParserLaws.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParserLaws[P]) ⇒ Boolean): ParserLaws[P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ParserLaws.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ParserLaws[P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ParserLaws.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ParserLaws[P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ParserLaws.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ParserLaws[P], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/ParserLaws.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ParserLaws[P], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/ParserLaws.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "decodingAccumulatingRoundTrip", "tail" : "(json: Json)(encode: (Json) ⇒ A, decode: (P) ⇒ (A) ⇒ ValidatedNel[Error, Json]): IsEq[ValidatedNel[Error, Json]]", "member" : "io.circe.testing.ParserLaws.decodingAccumulatingRoundTrip", "link" : "io\/circe\/testing\/ParserLaws.html#decodingAccumulatingRoundTrip[A](json:io.circe.Json)(encode:io.circe.Json=>A,decode:P=>(A=>cats.data.ValidatedNel[io.circe.Error,io.circe.Json])):cats.laws.IsEq[cats.data.ValidatedNel[io.circe.Error,io.circe.Json]]", "kind" : "def"}, {"label" : "decodingRoundTrip", "tail" : "(json: Json)(encode: (Json) ⇒ A, decode: (P) ⇒ (A) ⇒ Either[Error, Json]): IsEq[Either[Error, Json]]", "member" : "io.circe.testing.ParserLaws.decodingRoundTrip", "link" : "io\/circe\/testing\/ParserLaws.html#decodingRoundTrip[A](json:io.circe.Json)(encode:io.circe.Json=>A,decode:P=>(A=>Either[io.circe.Error,io.circe.Json])):cats.laws.IsEq[Either[io.circe.Error,io.circe.Json]]", "kind" : "def"}, {"label" : "parsingRoundTrip", "tail" : "(json: Json)(encode: (Json) ⇒ A, decode: (P) ⇒ (A) ⇒ Either[ParsingFailure, Json]): IsEq[Either[ParsingFailure, Json]]", "member" : "io.circe.testing.ParserLaws.parsingRoundTrip", "link" : "io\/circe\/testing\/ParserLaws.html#parsingRoundTrip[A](json:io.circe.Json)(encode:io.circe.Json=>A,decode:P=>(A=>Either[io.circe.ParsingFailure,io.circe.Json])):cats.laws.IsEq[Either[io.circe.ParsingFailure,io.circe.Json]]", "kind" : "def"}, {"member" : "io.circe.testing.ParserLaws#<init>", "error" : "unsupported entity"}, {"label" : "parser", "tail" : ": P", "member" : "io.circe.testing.ParserLaws.parser", "link" : "io\/circe\/testing\/ParserLaws.html#parser:P", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/ParserLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/ParserLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/ParserLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/ParserLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/ParserLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/ParserLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/ParserLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/ParserLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/ParserLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/ParserLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/ParserLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/ParserLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/ParserLaws.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/ParserLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/ParserLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/ParserLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/testing\/ParserLaws.html", "kind" : "case class"}, {"name" : "io.circe.testing.ParserTests", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/ParserTests.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/ParserTests.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParserTests[P]) ⇒ Boolean, msg: ⇒ Any): ParserTests[P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ParserTests.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ParserTests[P]) ⇒ Boolean): ParserTests[P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ParserTests.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ParserTests[P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ParserTests.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ParserTests[P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/ParserTests.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ParserTests[P], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/ParserTests.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ParserTests[P], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/ParserTests.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "io\/circe\/testing\/ParserTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "io\/circe\/testing\/ParserTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "io\/circe\/testing\/ParserTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "io\/circe\/testing\/ParserTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "fromFunction", "tail" : "(name: String)(serialize: (String) ⇒ A, parse: (P) ⇒ (A) ⇒ Either[ParsingFailure, Json], decode: (P) ⇒ (A) ⇒ Either[Error, Json], decodeAccumulating: (P) ⇒ (A) ⇒ ValidatedNel[Error, Json])(arbitraryJson: Arbitrary[Json], shrinkJson: Shrink[Json]): RuleSet", "member" : "io.circe.testing.ParserTests.fromFunction", "link" : "io\/circe\/testing\/ParserTests.html#fromFunction[A](name:String)(serialize:String=>A,parse:P=>(A=>Either[io.circe.ParsingFailure,io.circe.Json]),decode:P=>(A=>Either[io.circe.Error,io.circe.Json]),decodeAccumulating:P=>(A=>cats.data.ValidatedNel[io.circe.Error,io.circe.Json]))(implicitarbitraryJson:org.scalacheck.Arbitrary[io.circe.Json],implicitshrinkJson:org.scalacheck.Shrink[io.circe.Json]):ParserTests.this.RuleSet", "kind" : "def"}, {"label" : "fromString", "tail" : "(arbitraryJson: Arbitrary[Json], shrinkJson: Shrink[Json]): RuleSet", "member" : "io.circe.testing.ParserTests.fromString", "link" : "io\/circe\/testing\/ParserTests.html#fromString(implicitarbitraryJson:org.scalacheck.Arbitrary[io.circe.Json],implicitshrinkJson:org.scalacheck.Shrink[io.circe.Json]):ParserTests.this.RuleSet", "kind" : "def"}, {"label" : "laws", "tail" : "(): ParserLaws[P]", "member" : "io.circe.testing.ParserTests.laws", "link" : "io\/circe\/testing\/ParserTests.html#laws:io.circe.testing.ParserLaws[P]", "kind" : "def"}, {"member" : "io.circe.testing.ParserTests#<init>", "error" : "unsupported entity"}, {"label" : "p", "tail" : ": P", "member" : "io.circe.testing.ParserTests.p", "link" : "io\/circe\/testing\/ParserTests.html#p:P", "kind" : "val"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "io\/circe\/testing\/ParserTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/ParserTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/ParserTests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/ParserTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/ParserTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/ParserTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/ParserTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/ParserTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/ParserTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/ParserTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/ParserTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/ParserTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/ParserTests.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/ParserTests.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/ParserTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/ParserTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/ParserTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/testing\/ParserTests.html", "kind" : "case class"}, {"name" : "io.circe.testing.PrinterLaws", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/PrinterLaws.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/PrinterLaws.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PrinterLaws[A]) ⇒ Boolean, msg: ⇒ Any): PrinterLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/PrinterLaws.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PrinterLaws[A]) ⇒ Boolean): PrinterLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/PrinterLaws.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PrinterLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/PrinterLaws.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PrinterLaws[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/PrinterLaws.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PrinterLaws[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/PrinterLaws.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PrinterLaws[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/PrinterLaws.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "printerRoundTrip", "tail" : "(printer: Printer, parser: Parser, a: A): IsEq[Option[A]]", "member" : "io.circe.testing.PrinterLaws.printerRoundTrip", "link" : "io\/circe\/testing\/PrinterLaws.html#printerRoundTrip(printer:io.circe.Printer,parser:io.circe.Parser,a:A):cats.laws.IsEq[Option[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/PrinterLaws.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/PrinterLaws.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/PrinterLaws.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/PrinterLaws.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/PrinterLaws.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/PrinterLaws.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/PrinterLaws.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterLaws.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterLaws.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterLaws.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/PrinterLaws.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/PrinterLaws.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/PrinterLaws.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/PrinterLaws.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/PrinterLaws.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/PrinterLaws.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/PrinterLaws.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/PrinterLaws.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/PrinterLaws.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encode", "tail" : "(): Encoder[A]", "member" : "io.circe.testing.PrinterLaws.encode", "link" : "io\/circe\/testing\/PrinterLaws.html#encode:io.circe.Encoder[A]", "kind" : "abstract def"}, {"label" : "decode", "tail" : "(): Decoder[A]", "member" : "io.circe.testing.PrinterLaws.decode", "link" : "io\/circe\/testing\/PrinterLaws.html#decode:io.circe.Decoder[A]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/circe\/testing\/PrinterLaws$.html", "members_object" : [{"label" : "apply", "tail" : "(decodeA: Decoder[A], encodeA: Encoder[A]): PrinterLaws[A]", "member" : "io.circe.testing.PrinterLaws.apply", "link" : "io\/circe\/testing\/PrinterLaws$.html#apply[A](implicitdecodeA:io.circe.Decoder[A],implicitencodeA:io.circe.Encoder[A]):io.circe.testing.PrinterLaws[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/PrinterLaws$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/PrinterLaws$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/PrinterLaws$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/PrinterLaws$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/PrinterLaws$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/PrinterLaws$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/PrinterLaws$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterLaws$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterLaws$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterLaws$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/PrinterLaws$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/PrinterLaws$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/PrinterLaws$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/PrinterLaws$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/PrinterLaws$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/PrinterLaws$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/PrinterLaws$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/PrinterLaws$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/PrinterLaws$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/testing\/PrinterLaws.html", "kind" : "trait"}, {"name" : "io.circe.testing.PrinterTests", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/testing\/PrinterTests.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/testing\/PrinterTests.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PrinterTests[A]) ⇒ Boolean, msg: ⇒ Any): PrinterTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/PrinterTests.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PrinterTests[A]) ⇒ Boolean): PrinterTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/PrinterTests.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PrinterTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/PrinterTests.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PrinterTests[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/testing\/PrinterTests.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PrinterTests[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/testing\/PrinterTests.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PrinterTests[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/testing\/PrinterTests.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "SimpleRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.SimpleRuleSet", "link" : "io\/circe\/testing\/PrinterTests.html#SimpleRuleSetextendsLaws.this.DefaultRuleSet", "kind" : "class"}, {"label" : "DefaultRuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.DefaultRuleSet", "link" : "io\/circe\/testing\/PrinterTests.html#DefaultRuleSetextendsLaws.this.RuleSetwithLaws.this.HasOneParent", "kind" : "class"}, {"label" : "HasOneParent", "tail" : "", "member" : "org.typelevel.discipline.Laws.HasOneParent", "link" : "io\/circe\/testing\/PrinterTests.html#HasOneParentextendsAnyRef", "kind" : "trait"}, {"label" : "RuleSet", "tail" : "", "member" : "org.typelevel.discipline.Laws.RuleSet", "link" : "io\/circe\/testing\/PrinterTests.html#RuleSetextendsAnyRef", "kind" : "trait"}, {"label" : "printer", "tail" : "(printer: Printer, parser: Parser)(arbitraryA: Arbitrary[A], shrinkA: Shrink[A], eqA: Eq[A]): RuleSet", "member" : "io.circe.testing.PrinterTests.printer", "link" : "io\/circe\/testing\/PrinterTests.html#printer(printer:io.circe.Printer,parser:io.circe.Parser)(implicitarbitraryA:org.scalacheck.Arbitrary[A],implicitshrinkA:org.scalacheck.Shrink[A],impliciteqA:cats.kernel.Eq[A]):PrinterTests.this.RuleSet", "kind" : "def"}, {"label" : "emptyRuleSet", "tail" : "(): RuleSet", "member" : "org.typelevel.discipline.Laws.emptyRuleSet", "link" : "io\/circe\/testing\/PrinterTests.html#emptyRuleSet:Laws.this.RuleSet", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/PrinterTests.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/PrinterTests.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/PrinterTests.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/PrinterTests.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/PrinterTests.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/PrinterTests.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/PrinterTests.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterTests.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterTests.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterTests.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/PrinterTests.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/PrinterTests.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/PrinterTests.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/PrinterTests.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/PrinterTests.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/PrinterTests.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/PrinterTests.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/PrinterTests.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/PrinterTests.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "laws", "tail" : "(): PrinterLaws[A]", "member" : "io.circe.testing.PrinterTests.laws", "link" : "io\/circe\/testing\/PrinterTests.html#laws:io.circe.testing.PrinterLaws[A]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "io\/circe\/testing\/PrinterTests$.html", "members_object" : [{"label" : "apply", "tail" : "(decodeA: Decoder[A], encodeA: Encoder[A]): PrinterTests[A]", "member" : "io.circe.testing.PrinterTests.apply", "link" : "io\/circe\/testing\/PrinterTests$.html#apply[A](implicitdecodeA:io.circe.Decoder[A],implicitencodeA:io.circe.Encoder[A]):io.circe.testing.PrinterTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/testing\/PrinterTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/testing\/PrinterTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/testing\/PrinterTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/testing\/PrinterTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/testing\/PrinterTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/testing\/PrinterTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/testing\/PrinterTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/testing\/PrinterTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/testing\/PrinterTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/testing\/PrinterTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/testing\/PrinterTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/testing\/PrinterTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/testing\/PrinterTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/testing\/PrinterTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/testing\/PrinterTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/testing\/PrinterTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/testing\/PrinterTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "io\/circe\/testing\/PrinterTests.html", "kind" : "trait"}], "io.circe.generic.codec" : [{"name" : "io.circe.generic.codec.DerivedAsObjectCodec", "shortDescription" : "", "object" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DerivedAsObjectCodec[A]) ⇒ Boolean, msg: ⇒ Any): DerivedAsObjectCodec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DerivedAsObjectCodec[A]) ⇒ Boolean): DerivedAsObjectCodec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DerivedAsObjectCodec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DerivedAsObjectCodec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DerivedAsObjectCodec[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DerivedAsObjectCodec[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.generic.codec.DerivedAsObjectCodec#<init>", "error" : "unsupported entity"}, {"label" : "mapJsonObject", "tail" : "(f: (JsonObject) ⇒ JsonObject): AsObject[A]", "member" : "io.circe.Encoder.AsObject.mapJsonObject", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#mapJsonObject(f:io.circe.JsonObject=>io.circe.JsonObject):io.circe.Encoder.AsObject[A]", "kind" : "final def"}, {"label" : "contramapObject", "tail" : "(f: (B) ⇒ A): AsObject[B]", "member" : "io.circe.Encoder.AsObject.contramapObject", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#contramapObject[B](f:B=>A):io.circe.Encoder.AsObject[B]", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): Json", "member" : "io.circe.Encoder.AsObject.apply", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#apply(a:A):io.circe.Json", "kind" : "final def"}, {"label" : "iemap", "tail" : "(f: (A) ⇒ Either[String, B])(g: (B) ⇒ A): Codec[B]", "member" : "io.circe.Codec.iemap", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#iemap[B](f:A=>Either[String,B])(g:B=>A):io.circe.Codec[B]", "kind" : "def"}, {"label" : "mapJson", "tail" : "(f: (Json) ⇒ Json): Encoder[A]", "member" : "io.circe.Encoder.mapJson", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#mapJson(f:io.circe.Json=>io.circe.Json):io.circe.Encoder[A]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) ⇒ A): Encoder[B]", "member" : "io.circe.Encoder.contramap", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#contramap[B](f:B=>A):io.circe.Encoder[B]", "kind" : "final def"}, {"label" : "emapTry", "tail" : "(f: (A) ⇒ Try[B]): Decoder[B]", "member" : "io.circe.Decoder.emapTry", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#emapTry[B](f:A=>scala.util.Try[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "emap", "tail" : "(f: (A) ⇒ Either[String, B]): Decoder[B]", "member" : "io.circe.Decoder.emap", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#emap[B](f:A=>Either[String,B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "at", "tail" : "(field: String): Decoder[A]", "member" : "io.circe.Decoder.at", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#at(field:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "prepare", "tail" : "(f: (ACursor) ⇒ ACursor): Decoder[A]", "member" : "io.circe.Decoder.prepare", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#prepare(f:io.circe.ACursor=>io.circe.ACursor):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "either", "tail" : "(decodeB: Decoder[B]): Decoder[Either[A, B]]", "member" : "io.circe.Decoder.either", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#either[B](decodeB:io.circe.Decoder[B]):io.circe.Decoder[Either[A,B]]", "kind" : "final def"}, {"label" : "or", "tail" : "(d: ⇒ Decoder[AA]): Decoder[AA]", "member" : "io.circe.Decoder.or", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#or[AA>:A](d:=>io.circe.Decoder[AA]):io.circe.Decoder[AA]", "kind" : "final def"}, {"label" : "product", "tail" : "(fb: Decoder[B]): Decoder[(A, B)]", "member" : "io.circe.Decoder.product", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#product[B](fb:io.circe.Decoder[B]):io.circe.Decoder[(A,B)]", "kind" : "final def"}, {"label" : "kleisli", "tail" : "(): Kleisli[Result, HCursor, A]", "member" : "io.circe.Decoder.kleisli", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#kleisli:cats.data.Kleisli[io.circe.Decoder.Result,io.circe.HCursor,A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(pred: (HCursor) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#validate(pred:io.circe.HCursor=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(errors: (HCursor) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#validate(errors:io.circe.HCursor=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(errors: (A) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#ensure(errors:A=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(pred: (A) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#ensure(pred:A=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "withErrorMessage", "tail" : "(message: String): Decoder[A]", "member" : "io.circe.Decoder.withErrorMessage", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#withErrorMessage(message:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "handleErrorWith", "tail" : "(f: (DecodingFailure) ⇒ Decoder[A]): Decoder[A]", "member" : "io.circe.Decoder.handleErrorWith", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#handleErrorWith(f:io.circe.DecodingFailure=>io.circe.Decoder[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Decoder[B]): Decoder[B]", "member" : "io.circe.Decoder.flatMap", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#flatMap[B](f:A=>io.circe.Decoder[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Decoder[B]", "member" : "io.circe.Decoder.map", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#map[B](f:A=>B):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "decodeJson", "tail" : "(j: Json): Result[A]", "member" : "io.circe.Decoder.decodeJson", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#decodeJson(j:io.circe.Json):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "tryDecodeAccumulating", "tail" : "(c: ACursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.tryDecodeAccumulating", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#tryDecodeAccumulating(c:io.circe.ACursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "tryDecode", "tail" : "(c: ACursor): Result[A]", "member" : "io.circe.Decoder.tryDecode", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#tryDecode(c:io.circe.ACursor):io.circe.Decoder.Result[A]", "kind" : "def"}, {"label" : "decodeAccumulating", "tail" : "(c: HCursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.decodeAccumulating", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#decodeAccumulating(c:io.circe.HCursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encodeObject", "tail" : "(a: A): JsonObject", "member" : "io.circe.Encoder.AsObject.encodeObject", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#encodeObject(a:A):io.circe.JsonObject", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(c: HCursor): Result[A]", "member" : "io.circe.Decoder.apply", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html#apply(c:io.circe.HCursor):io.circe.Decoder.Result[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "deriveCodec", "tail" : "(gen: Aux[A, R], codec: Lazy[ReprAsObjectCodec[R]]): DerivedAsObjectCodec[A]", "member" : "io.circe.generic.codec.DerivedAsObjectCodec.deriveCodec", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#deriveCodec[A,R](implicitgen:shapeless.LabelledGeneric.Aux[A,R],implicitcodec:shapeless.Lazy[io.circe.generic.codec.ReprAsObjectCodec[R]]):io.circe.generic.codec.DerivedAsObjectCodec[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/generic\/codec\/DerivedAsObjectCodec.html", "kind" : "class"}, {"name" : "io.circe.generic.codec.ReprAsObjectCodec", "shortDescription" : "A codec for a generic representation of a case class or ADT.", "object" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReprAsObjectCodec[A]) ⇒ Boolean, msg: ⇒ Any): ReprAsObjectCodec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReprAsObjectCodec[A]) ⇒ Boolean): ReprAsObjectCodec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ReprAsObjectCodec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReprAsObjectCodec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReprAsObjectCodec[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReprAsObjectCodec[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.generic.codec.ReprAsObjectCodec#<init>", "error" : "unsupported entity"}, {"label" : "mapJsonObject", "tail" : "(f: (JsonObject) ⇒ JsonObject): AsObject[A]", "member" : "io.circe.Encoder.AsObject.mapJsonObject", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#mapJsonObject(f:io.circe.JsonObject=>io.circe.JsonObject):io.circe.Encoder.AsObject[A]", "kind" : "final def"}, {"label" : "contramapObject", "tail" : "(f: (B) ⇒ A): AsObject[B]", "member" : "io.circe.Encoder.AsObject.contramapObject", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#contramapObject[B](f:B=>A):io.circe.Encoder.AsObject[B]", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): Json", "member" : "io.circe.Encoder.AsObject.apply", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#apply(a:A):io.circe.Json", "kind" : "final def"}, {"label" : "iemap", "tail" : "(f: (A) ⇒ Either[String, B])(g: (B) ⇒ A): Codec[B]", "member" : "io.circe.Codec.iemap", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#iemap[B](f:A=>Either[String,B])(g:B=>A):io.circe.Codec[B]", "kind" : "def"}, {"label" : "mapJson", "tail" : "(f: (Json) ⇒ Json): Encoder[A]", "member" : "io.circe.Encoder.mapJson", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#mapJson(f:io.circe.Json=>io.circe.Json):io.circe.Encoder[A]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) ⇒ A): Encoder[B]", "member" : "io.circe.Encoder.contramap", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#contramap[B](f:B=>A):io.circe.Encoder[B]", "kind" : "final def"}, {"label" : "emapTry", "tail" : "(f: (A) ⇒ Try[B]): Decoder[B]", "member" : "io.circe.Decoder.emapTry", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#emapTry[B](f:A=>scala.util.Try[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "emap", "tail" : "(f: (A) ⇒ Either[String, B]): Decoder[B]", "member" : "io.circe.Decoder.emap", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#emap[B](f:A=>Either[String,B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "at", "tail" : "(field: String): Decoder[A]", "member" : "io.circe.Decoder.at", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#at(field:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "prepare", "tail" : "(f: (ACursor) ⇒ ACursor): Decoder[A]", "member" : "io.circe.Decoder.prepare", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#prepare(f:io.circe.ACursor=>io.circe.ACursor):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "either", "tail" : "(decodeB: Decoder[B]): Decoder[Either[A, B]]", "member" : "io.circe.Decoder.either", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#either[B](decodeB:io.circe.Decoder[B]):io.circe.Decoder[Either[A,B]]", "kind" : "final def"}, {"label" : "or", "tail" : "(d: ⇒ Decoder[AA]): Decoder[AA]", "member" : "io.circe.Decoder.or", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#or[AA>:A](d:=>io.circe.Decoder[AA]):io.circe.Decoder[AA]", "kind" : "final def"}, {"label" : "product", "tail" : "(fb: Decoder[B]): Decoder[(A, B)]", "member" : "io.circe.Decoder.product", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#product[B](fb:io.circe.Decoder[B]):io.circe.Decoder[(A,B)]", "kind" : "final def"}, {"label" : "kleisli", "tail" : "(): Kleisli[Result, HCursor, A]", "member" : "io.circe.Decoder.kleisli", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#kleisli:cats.data.Kleisli[io.circe.Decoder.Result,io.circe.HCursor,A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(pred: (HCursor) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#validate(pred:io.circe.HCursor=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(errors: (HCursor) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#validate(errors:io.circe.HCursor=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(errors: (A) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#ensure(errors:A=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(pred: (A) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#ensure(pred:A=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "withErrorMessage", "tail" : "(message: String): Decoder[A]", "member" : "io.circe.Decoder.withErrorMessage", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#withErrorMessage(message:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "handleErrorWith", "tail" : "(f: (DecodingFailure) ⇒ Decoder[A]): Decoder[A]", "member" : "io.circe.Decoder.handleErrorWith", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#handleErrorWith(f:io.circe.DecodingFailure=>io.circe.Decoder[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Decoder[B]): Decoder[B]", "member" : "io.circe.Decoder.flatMap", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#flatMap[B](f:A=>io.circe.Decoder[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Decoder[B]", "member" : "io.circe.Decoder.map", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#map[B](f:A=>B):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "decodeJson", "tail" : "(j: Json): Result[A]", "member" : "io.circe.Decoder.decodeJson", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#decodeJson(j:io.circe.Json):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "tryDecodeAccumulating", "tail" : "(c: ACursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.tryDecodeAccumulating", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#tryDecodeAccumulating(c:io.circe.ACursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "tryDecode", "tail" : "(c: ACursor): Result[A]", "member" : "io.circe.Decoder.tryDecode", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#tryDecode(c:io.circe.ACursor):io.circe.Decoder.Result[A]", "kind" : "def"}, {"label" : "decodeAccumulating", "tail" : "(c: HCursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.decodeAccumulating", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#decodeAccumulating(c:io.circe.HCursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encodeObject", "tail" : "(a: A): JsonObject", "member" : "io.circe.Encoder.AsObject.encodeObject", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#encodeObject(a:A):io.circe.JsonObject", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(c: HCursor): Result[A]", "member" : "io.circe.Decoder.apply", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html#apply(c:io.circe.HCursor):io.circe.Decoder.Result[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "hnilReprCodec", "tail" : ": ReprAsObjectCodec[HNil]", "member" : "io.circe.generic.codec.ReprAsObjectCodec.hnilReprCodec", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#hnilReprCodec:io.circe.generic.codec.ReprAsObjectCodec[shapeless.HNil]", "kind" : "val"}, {"label" : "deriveReprAsObjectCodec", "tail" : "(): ReprAsObjectCodec[R]", "member" : "io.circe.generic.codec.ReprAsObjectCodec.deriveReprAsObjectCodec", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#deriveReprAsObjectCodec[R]:io.circe.generic.codec.ReprAsObjectCodec[R]", "kind" : "implicit macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/codec\/ReprAsObjectCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/generic\/codec\/ReprAsObjectCodec.html", "kind" : "class"}], "io.circe.numbers" : [{"name" : "io.circe.numbers.BiggerDecimal", "shortDescription" : "Represents a large decimal number.", "object" : "io\/circe\/numbers\/BiggerDecimal$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/numbers\/BiggerDecimal.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/numbers\/BiggerDecimal.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BiggerDecimal) ⇒ Boolean, msg: ⇒ Any): BiggerDecimal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/BiggerDecimal.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BiggerDecimal) ⇒ Boolean): BiggerDecimal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/BiggerDecimal.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): BiggerDecimal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/BiggerDecimal.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BiggerDecimal", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/numbers\/BiggerDecimal.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BiggerDecimal, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/numbers\/BiggerDecimal.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BiggerDecimal, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/numbers\/BiggerDecimal.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toBigInteger", "tail" : "(): Option[BigInteger]", "member" : "io.circe.numbers.BiggerDecimal.toBigInteger", "link" : "io\/circe\/numbers\/BiggerDecimal.html#toBigInteger:Option[java.math.BigInteger]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/numbers\/BiggerDecimal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/numbers\/BiggerDecimal.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/numbers\/BiggerDecimal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/numbers\/BiggerDecimal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/numbers\/BiggerDecimal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/numbers\/BiggerDecimal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/numbers\/BiggerDecimal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/BiggerDecimal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/BiggerDecimal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/BiggerDecimal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/numbers\/BiggerDecimal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/numbers\/BiggerDecimal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/numbers\/BiggerDecimal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/numbers\/BiggerDecimal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/numbers\/BiggerDecimal.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/numbers\/BiggerDecimal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/numbers\/BiggerDecimal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/numbers\/BiggerDecimal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/numbers\/BiggerDecimal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toLong", "tail" : "(): Option[Long]", "member" : "io.circe.numbers.BiggerDecimal.toLong", "link" : "io\/circe\/numbers\/BiggerDecimal.html#toLong:Option[Long]", "kind" : "abstract def"}, {"label" : "toFloat", "tail" : "(): Float", "member" : "io.circe.numbers.BiggerDecimal.toFloat", "link" : "io\/circe\/numbers\/BiggerDecimal.html#toFloat:Float", "kind" : "abstract def"}, {"label" : "toDouble", "tail" : "(): Double", "member" : "io.circe.numbers.BiggerDecimal.toDouble", "link" : "io\/circe\/numbers\/BiggerDecimal.html#toDouble:Double", "kind" : "abstract def"}, {"label" : "toBigIntegerWithMaxDigits", "tail" : "(maxDigits: BigInteger): Option[BigInteger]", "member" : "io.circe.numbers.BiggerDecimal.toBigIntegerWithMaxDigits", "link" : "io\/circe\/numbers\/BiggerDecimal.html#toBigIntegerWithMaxDigits(maxDigits:java.math.BigInteger):Option[java.math.BigInteger]", "kind" : "abstract def"}, {"label" : "toBigDecimal", "tail" : "(): Option[BigDecimal]", "member" : "io.circe.numbers.BiggerDecimal.toBigDecimal", "link" : "io\/circe\/numbers\/BiggerDecimal.html#toBigDecimal:Option[java.math.BigDecimal]", "kind" : "abstract def"}, {"label" : "signum", "tail" : "(): Int", "member" : "io.circe.numbers.BiggerDecimal.signum", "link" : "io\/circe\/numbers\/BiggerDecimal.html#signum:Int", "kind" : "abstract def"}, {"label" : "isNegativeZero", "tail" : "(): Boolean", "member" : "io.circe.numbers.BiggerDecimal.isNegativeZero", "link" : "io\/circe\/numbers\/BiggerDecimal.html#isNegativeZero:Boolean", "kind" : "abstract def"}, {"label" : "isWhole", "tail" : "(): Boolean", "member" : "io.circe.numbers.BiggerDecimal.isWhole", "link" : "io\/circe\/numbers\/BiggerDecimal.html#isWhole:Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "parseBiggerDecimalUnsafe", "tail" : "(input: String): BiggerDecimal", "member" : "io.circe.numbers.BiggerDecimal.parseBiggerDecimalUnsafe", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#parseBiggerDecimalUnsafe(input:String):io.circe.numbers.BiggerDecimal", "kind" : "def"}, {"label" : "parseBiggerDecimal", "tail" : "(input: String): Option[BiggerDecimal]", "member" : "io.circe.numbers.BiggerDecimal.parseBiggerDecimal", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#parseBiggerDecimal(input:String):Option[io.circe.numbers.BiggerDecimal]", "kind" : "def"}, {"label" : "integralIsValidLong", "tail" : "(s: String): Boolean", "member" : "io.circe.numbers.BiggerDecimal.integralIsValidLong", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#integralIsValidLong(s:String):Boolean", "kind" : "def"}, {"label" : "fromFloat", "tail" : "(f: Float): BiggerDecimal", "member" : "io.circe.numbers.BiggerDecimal.fromFloat", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#fromFloat(f:Float):io.circe.numbers.BiggerDecimal", "kind" : "def"}, {"label" : "fromDoubleUnsafe", "tail" : "(d: Double): BiggerDecimal", "member" : "io.circe.numbers.BiggerDecimal.fromDoubleUnsafe", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#fromDoubleUnsafe(d:Double):io.circe.numbers.BiggerDecimal", "kind" : "def"}, {"label" : "fromLong", "tail" : "(d: Long): BiggerDecimal", "member" : "io.circe.numbers.BiggerDecimal.fromLong", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#fromLong(d:Long):io.circe.numbers.BiggerDecimal", "kind" : "def"}, {"label" : "fromBigDecimal", "tail" : "(d: BigDecimal): BiggerDecimal", "member" : "io.circe.numbers.BiggerDecimal.fromBigDecimal", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#fromBigDecimal(d:java.math.BigDecimal):io.circe.numbers.BiggerDecimal", "kind" : "def"}, {"label" : "fromBigInteger", "tail" : "(i: BigInteger): BiggerDecimal", "member" : "io.circe.numbers.BiggerDecimal.fromBigInteger", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#fromBigInteger(i:java.math.BigInteger):io.circe.numbers.BiggerDecimal", "kind" : "def"}, {"label" : "NegativeZero", "tail" : ": BiggerDecimal", "member" : "io.circe.numbers.BiggerDecimal.NegativeZero", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#NegativeZero:io.circe.numbers.BiggerDecimal", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/numbers\/BiggerDecimal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/numbers\/BiggerDecimal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/numbers\/BiggerDecimal.html", "kind" : "class"}], "io" : [], "io.circe.pointer.literal" : [{"name" : "io.circe.pointer.literal.PointerStringContext", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PointerStringContext) ⇒ Boolean, msg: ⇒ Any): PointerStringContext", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PointerStringContext) ⇒ Boolean): PointerStringContext", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PointerStringContext", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PointerStringContext", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PointerStringContext, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PointerStringContext, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "pointer", "tail" : "(args: Any*): Pointer", "member" : "io.circe.pointer.literal.PointerStringContext.pointer", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#pointer(args:Any*):io.circe.pointer.Pointer", "kind" : "final macro def"}, {"member" : "io.circe.pointer.literal.PointerStringContext#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/pointer\/literal\/package$$PointerStringContext.html", "kind" : "class"}], "io.circe.generic.encoding" : [{"name" : "io.circe.generic.encoding.DerivedAsObjectEncoder", "shortDescription" : "", "object" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DerivedAsObjectEncoder[A]) ⇒ Boolean, msg: ⇒ Any): DerivedAsObjectEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DerivedAsObjectEncoder[A]) ⇒ Boolean): DerivedAsObjectEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DerivedAsObjectEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DerivedAsObjectEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DerivedAsObjectEncoder[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DerivedAsObjectEncoder[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.generic.encoding.DerivedAsObjectEncoder#<init>", "error" : "unsupported entity"}, {"label" : "mapJsonObject", "tail" : "(f: (JsonObject) ⇒ JsonObject): AsObject[A]", "member" : "io.circe.Encoder.AsObject.mapJsonObject", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#mapJsonObject(f:io.circe.JsonObject=>io.circe.JsonObject):io.circe.Encoder.AsObject[A]", "kind" : "final def"}, {"label" : "contramapObject", "tail" : "(f: (B) ⇒ A): AsObject[B]", "member" : "io.circe.Encoder.AsObject.contramapObject", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#contramapObject[B](f:B=>A):io.circe.Encoder.AsObject[B]", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): Json", "member" : "io.circe.Encoder.AsObject.apply", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#apply(a:A):io.circe.Json", "kind" : "final def"}, {"label" : "mapJson", "tail" : "(f: (Json) ⇒ Json): Encoder[A]", "member" : "io.circe.Encoder.mapJson", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#mapJson(f:io.circe.Json=>io.circe.Json):io.circe.Encoder[A]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) ⇒ A): Encoder[B]", "member" : "io.circe.Encoder.contramap", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#contramap[B](f:B=>A):io.circe.Encoder[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encodeObject", "tail" : "(a: A): JsonObject", "member" : "io.circe.Encoder.AsObject.encodeObject", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html#encodeObject(a:A):io.circe.JsonObject", "kind" : "abstract def"}], "members_object" : [{"label" : "deriveEncoder", "tail" : "(gen: Aux[A, R], encode: Lazy[ReprAsObjectEncoder[R]]): DerivedAsObjectEncoder[A]", "member" : "io.circe.generic.encoding.DerivedAsObjectEncoder.deriveEncoder", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#deriveEncoder[A,R](implicitgen:shapeless.LabelledGeneric.Aux[A,R],implicitencode:shapeless.Lazy[io.circe.generic.encoding.ReprAsObjectEncoder[R]]):io.circe.generic.encoding.DerivedAsObjectEncoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/generic\/encoding\/DerivedAsObjectEncoder.html", "kind" : "class"}, {"name" : "io.circe.generic.encoding.ReprAsObjectEncoder", "shortDescription" : "An encoder for a generic representation of a case class or ADT.", "object" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReprAsObjectEncoder[A]) ⇒ Boolean, msg: ⇒ Any): ReprAsObjectEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReprAsObjectEncoder[A]) ⇒ Boolean): ReprAsObjectEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ReprAsObjectEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReprAsObjectEncoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReprAsObjectEncoder[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReprAsObjectEncoder[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.generic.encoding.ReprAsObjectEncoder#<init>", "error" : "unsupported entity"}, {"label" : "mapJsonObject", "tail" : "(f: (JsonObject) ⇒ JsonObject): AsObject[A]", "member" : "io.circe.Encoder.AsObject.mapJsonObject", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#mapJsonObject(f:io.circe.JsonObject=>io.circe.JsonObject):io.circe.Encoder.AsObject[A]", "kind" : "final def"}, {"label" : "contramapObject", "tail" : "(f: (B) ⇒ A): AsObject[B]", "member" : "io.circe.Encoder.AsObject.contramapObject", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#contramapObject[B](f:B=>A):io.circe.Encoder.AsObject[B]", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): Json", "member" : "io.circe.Encoder.AsObject.apply", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#apply(a:A):io.circe.Json", "kind" : "final def"}, {"label" : "mapJson", "tail" : "(f: (Json) ⇒ Json): Encoder[A]", "member" : "io.circe.Encoder.mapJson", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#mapJson(f:io.circe.Json=>io.circe.Json):io.circe.Encoder[A]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) ⇒ A): Encoder[B]", "member" : "io.circe.Encoder.contramap", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#contramap[B](f:B=>A):io.circe.Encoder[B]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "encodeObject", "tail" : "(a: A): JsonObject", "member" : "io.circe.Encoder.AsObject.encodeObject", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html#encodeObject(a:A):io.circe.JsonObject", "kind" : "abstract def"}], "members_object" : [{"label" : "deriveReprAsObjectEncoder", "tail" : "(): ReprAsObjectEncoder[R]", "member" : "io.circe.generic.encoding.ReprAsObjectEncoder.deriveReprAsObjectEncoder", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#deriveReprAsObjectEncoder[R]:io.circe.generic.encoding.ReprAsObjectEncoder[R]", "kind" : "implicit macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/generic\/encoding\/ReprAsObjectEncoder.html", "kind" : "class"}], "io.circe.benchmark" : [{"name" : "io.circe.benchmark.AtBenchmark", "shortDescription" : "Compare the performance of various ways of folding JSON values.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/AtBenchmark.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/AtBenchmark.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtBenchmark) ⇒ Boolean, msg: ⇒ Any): AtBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/AtBenchmark.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtBenchmark) ⇒ Boolean): AtBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/AtBenchmark.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AtBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/AtBenchmark.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AtBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/AtBenchmark.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AtBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/AtBenchmark.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AtBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/AtBenchmark.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "at", "tail" : "(): Result[List[(String, Int)]]", "member" : "io.circe.benchmark.AtBenchmark.at", "link" : "io\/circe\/benchmark\/AtBenchmark.html#at:io.circe.Decoder.Result[List[(String,Int)]]", "kind" : "def"}, {"label" : "doc", "tail" : ": Json", "member" : "io.circe.benchmark.AtBenchmark.doc", "link" : "io\/circe\/benchmark\/AtBenchmark.html#doc:io.circe.Json", "kind" : "val"}, {"label" : "item", "tail" : ": Json", "member" : "io.circe.benchmark.AtBenchmark.item", "link" : "io\/circe\/benchmark\/AtBenchmark.html#item:io.circe.Json", "kind" : "val"}, {"member" : "io.circe.benchmark.AtBenchmark#<init>", "error" : "unsupported entity"}, {"label" : "helloWorldJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.helloWorldJson", "link" : "io\/circe\/benchmark\/AtBenchmark.html#helloWorldJson:io.circe.Json", "kind" : "val"}, {"label" : "foosJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.foosJson", "link" : "io\/circe\/benchmark\/AtBenchmark.html#foosJson:io.circe.Json", "kind" : "val"}, {"label" : "booleansJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.booleansJson", "link" : "io\/circe\/benchmark\/AtBenchmark.html#booleansJson:io.circe.Json", "kind" : "val"}, {"label" : "intsJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.intsJson", "link" : "io\/circe\/benchmark\/AtBenchmark.html#intsJson:io.circe.Json", "kind" : "val"}, {"label" : "foos", "tail" : ": Map[String, Foo]", "member" : "io.circe.benchmark.ExampleData.foos", "link" : "io\/circe\/benchmark\/AtBenchmark.html#foos:Map[String,io.circe.benchmark.Foo]", "kind" : "val"}, {"label" : "booleans", "tail" : ": List[Boolean]", "member" : "io.circe.benchmark.ExampleData.booleans", "link" : "io\/circe\/benchmark\/AtBenchmark.html#booleans:List[Boolean]", "kind" : "val"}, {"label" : "ints", "tail" : ": List[Int]", "member" : "io.circe.benchmark.ExampleData.ints", "link" : "io\/circe\/benchmark\/AtBenchmark.html#ints:List[Int]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/AtBenchmark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/AtBenchmark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/AtBenchmark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/AtBenchmark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/AtBenchmark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/AtBenchmark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/AtBenchmark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/AtBenchmark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/AtBenchmark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/AtBenchmark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/AtBenchmark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/AtBenchmark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/AtBenchmark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/AtBenchmark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/AtBenchmark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/AtBenchmark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/AtBenchmark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/AtBenchmark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/AtBenchmark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/AtBenchmark.html", "kind" : "class"}, {"name" : "io.circe.benchmark.ExampleData", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/ExampleData.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/ExampleData.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExampleData) ⇒ Boolean, msg: ⇒ Any): ExampleData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/ExampleData.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExampleData) ⇒ Boolean): ExampleData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/ExampleData.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExampleData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/ExampleData.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExampleData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/ExampleData.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExampleData, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/ExampleData.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExampleData, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/ExampleData.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "helloWorldJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.helloWorldJson", "link" : "io\/circe\/benchmark\/ExampleData.html#helloWorldJson:io.circe.Json", "kind" : "val"}, {"label" : "foosJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.foosJson", "link" : "io\/circe\/benchmark\/ExampleData.html#foosJson:io.circe.Json", "kind" : "val"}, {"label" : "booleansJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.booleansJson", "link" : "io\/circe\/benchmark\/ExampleData.html#booleansJson:io.circe.Json", "kind" : "val"}, {"label" : "intsJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.intsJson", "link" : "io\/circe\/benchmark\/ExampleData.html#intsJson:io.circe.Json", "kind" : "val"}, {"label" : "foos", "tail" : ": Map[String, Foo]", "member" : "io.circe.benchmark.ExampleData.foos", "link" : "io\/circe\/benchmark\/ExampleData.html#foos:Map[String,io.circe.benchmark.Foo]", "kind" : "val"}, {"label" : "booleans", "tail" : ": List[Boolean]", "member" : "io.circe.benchmark.ExampleData.booleans", "link" : "io\/circe\/benchmark\/ExampleData.html#booleans:List[Boolean]", "kind" : "val"}, {"label" : "ints", "tail" : ": List[Int]", "member" : "io.circe.benchmark.ExampleData.ints", "link" : "io\/circe\/benchmark\/ExampleData.html#ints:List[Int]", "kind" : "val"}, {"member" : "io.circe.benchmark.ExampleData#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/ExampleData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/ExampleData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/ExampleData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/ExampleData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/ExampleData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/ExampleData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/ExampleData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/ExampleData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/ExampleData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/ExampleData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/ExampleData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/ExampleData.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/ExampleData.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/ExampleData.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/ExampleData.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/ExampleData.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/ExampleData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/ExampleData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/ExampleData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/ExampleData.html", "kind" : "class"}, {"name" : "io.circe.benchmark.FoldingBenchmark", "shortDescription" : "Compare the performance of various ways of folding JSON values.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FoldingBenchmark) ⇒ Boolean, msg: ⇒ Any): FoldingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FoldingBenchmark) ⇒ Boolean): FoldingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FoldingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FoldingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FoldingBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FoldingBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "withPatternMatch", "tail" : "(): Int", "member" : "io.circe.benchmark.FoldingBenchmark.withPatternMatch", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#withPatternMatch:Int", "kind" : "def"}, {"label" : "withFold", "tail" : "(): Int", "member" : "io.circe.benchmark.FoldingBenchmark.withFold", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#withFold:Int", "kind" : "def"}, {"label" : "withFoldWith", "tail" : "(): Int", "member" : "io.circe.benchmark.FoldingBenchmark.withFoldWith", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#withFoldWith:Int", "kind" : "def"}, {"label" : "doc", "tail" : ": Json", "member" : "io.circe.benchmark.FoldingBenchmark.doc", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#doc:io.circe.Json", "kind" : "val"}, {"member" : "io.circe.benchmark.FoldingBenchmark#<init>", "error" : "unsupported entity"}, {"label" : "helloWorldJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.helloWorldJson", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#helloWorldJson:io.circe.Json", "kind" : "val"}, {"label" : "foosJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.foosJson", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#foosJson:io.circe.Json", "kind" : "val"}, {"label" : "booleansJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.booleansJson", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#booleansJson:io.circe.Json", "kind" : "val"}, {"label" : "intsJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.intsJson", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#intsJson:io.circe.Json", "kind" : "val"}, {"label" : "foos", "tail" : ": Map[String, Foo]", "member" : "io.circe.benchmark.ExampleData.foos", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#foos:Map[String,io.circe.benchmark.Foo]", "kind" : "val"}, {"label" : "booleans", "tail" : ": List[Boolean]", "member" : "io.circe.benchmark.ExampleData.booleans", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#booleans:List[Boolean]", "kind" : "val"}, {"label" : "ints", "tail" : ": List[Int]", "member" : "io.circe.benchmark.ExampleData.ints", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#ints:List[Int]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/FoldingBenchmark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/FoldingBenchmark.html", "kind" : "class"}, {"name" : "io.circe.benchmark.Foo", "shortDescription" : "", "object" : "io\/circe\/benchmark\/Foo$.html", "members_object" : [{"label" : "eqFoo", "tail" : ": Eq[Foo]", "member" : "io.circe.benchmark.Foo.eqFoo", "link" : "io\/circe\/benchmark\/Foo$.html#eqFoo:cats.kernel.Eq[io.circe.benchmark.Foo]", "kind" : "implicit val"}, {"label" : "encodeFoo", "tail" : ": Encoder[Foo]", "member" : "io.circe.benchmark.Foo.encodeFoo", "link" : "io\/circe\/benchmark\/Foo$.html#encodeFoo:io.circe.Encoder[io.circe.benchmark.Foo]", "kind" : "implicit val"}, {"label" : "decodeFoo", "tail" : ": Decoder[Foo]", "member" : "io.circe.benchmark.Foo.decodeFoo", "link" : "io\/circe\/benchmark\/Foo$.html#decodeFoo:io.circe.Decoder[io.circe.benchmark.Foo]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/Foo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/Foo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/Foo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/Foo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/Foo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/Foo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/Foo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/Foo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/Foo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/Foo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/Foo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/Foo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/Foo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/Foo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/Foo$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/Foo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/Foo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/Foo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/Foo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/Foo.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/Foo.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Foo) ⇒ Boolean, msg: ⇒ Any): Foo", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/Foo.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Foo) ⇒ Boolean): Foo", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/Foo.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Foo", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/Foo.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Foo", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/Foo.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Foo, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/Foo.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Foo, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/Foo.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.benchmark.Foo#<init>", "error" : "unsupported entity"}, {"label" : "bs", "tail" : ": List[Boolean]", "member" : "io.circe.benchmark.Foo.bs", "link" : "io\/circe\/benchmark\/Foo.html#bs:List[Boolean]", "kind" : "val"}, {"label" : "l", "tail" : ": Long", "member" : "io.circe.benchmark.Foo.l", "link" : "io\/circe\/benchmark\/Foo.html#l:Long", "kind" : "val"}, {"label" : "i", "tail" : ": Int", "member" : "io.circe.benchmark.Foo.i", "link" : "io\/circe\/benchmark\/Foo.html#i:Int", "kind" : "val"}, {"label" : "d", "tail" : ": Double", "member" : "io.circe.benchmark.Foo.d", "link" : "io\/circe\/benchmark\/Foo.html#d:Double", "kind" : "val"}, {"label" : "s", "tail" : ": String", "member" : "io.circe.benchmark.Foo.s", "link" : "io\/circe\/benchmark\/Foo.html#s:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/Foo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/Foo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/Foo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/Foo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/Foo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/Foo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/Foo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/Foo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/Foo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/Foo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/Foo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/Foo.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/Foo.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/Foo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/Foo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/Foo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "io\/circe\/benchmark\/Foo.html", "kind" : "case class"}, {"name" : "io.circe.benchmark.GenericDerivationBenchmark", "shortDescription" : "Compare the performance of derived and non-derived codecs.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (GenericDerivationBenchmark) ⇒ Boolean, msg: ⇒ Any): GenericDerivationBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (GenericDerivationBenchmark) ⇒ Boolean): GenericDerivationBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): GenericDerivationBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): GenericDerivationBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (GenericDerivationBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (GenericDerivationBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "encodeNonDerived", "tail" : "(): Json", "member" : "io.circe.benchmark.GenericDerivationBenchmark.encodeNonDerived", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#encodeNonDerived:io.circe.Json", "kind" : "def"}, {"label" : "encodeDerived", "tail" : "(): Json", "member" : "io.circe.benchmark.GenericDerivationBenchmark.encodeDerived", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#encodeDerived:io.circe.Json", "kind" : "def"}, {"label" : "decodeNonDerived", "tail" : "(): Result[Foo]", "member" : "io.circe.benchmark.GenericDerivationBenchmark.decodeNonDerived", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#decodeNonDerived:io.circe.Decoder.Result[io.circe.benchmark.Foo]", "kind" : "def"}, {"label" : "decodeDerived", "tail" : "(): Result[Foo]", "member" : "io.circe.benchmark.GenericDerivationBenchmark.decodeDerived", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#decodeDerived:io.circe.Decoder.Result[io.circe.benchmark.Foo]", "kind" : "def"}, {"label" : "exampleFooJson", "tail" : ": Json", "member" : "io.circe.benchmark.GenericDerivationBenchmark.exampleFooJson", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#exampleFooJson:io.circe.Json", "kind" : "val"}, {"label" : "exampleFoo", "tail" : ": Foo", "member" : "io.circe.benchmark.GenericDerivationBenchmark.exampleFoo", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#exampleFoo:io.circe.benchmark.Foo", "kind" : "val"}, {"member" : "io.circe.benchmark.GenericDerivationBenchmark#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/GenericDerivationBenchmark.html", "kind" : "class"}, {"name" : "io.circe.benchmark.InstantiationBenchmark", "shortDescription" : "Compare the performance of various ways of folding JSON values.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InstantiationBenchmark) ⇒ Boolean, msg: ⇒ Any): InstantiationBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InstantiationBenchmark) ⇒ Boolean): InstantiationBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): InstantiationBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): InstantiationBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (InstantiationBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (InstantiationBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "encoderFromInstance", "tail" : "(): Json", "member" : "io.circe.benchmark.InstantiationBenchmark.encoderFromInstance", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#encoderFromInstance:io.circe.Json", "kind" : "def"}, {"label" : "encoderFromSAM", "tail" : "(): Json", "member" : "io.circe.benchmark.InstantiationBenchmark.encoderFromSAM", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#encoderFromSAM:io.circe.Json", "kind" : "def"}, {"label" : "encoderFromNew", "tail" : "(): Json", "member" : "io.circe.benchmark.InstantiationBenchmark.encoderFromNew", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#encoderFromNew:io.circe.Json", "kind" : "def"}, {"label" : "decoderFromInstance", "tail" : "(): Result[String]", "member" : "io.circe.benchmark.InstantiationBenchmark.decoderFromInstance", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#decoderFromInstance:io.circe.Decoder.Result[String]", "kind" : "def"}, {"label" : "decoderFromSAM", "tail" : "(): Result[String]", "member" : "io.circe.benchmark.InstantiationBenchmark.decoderFromSAM", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#decoderFromSAM:io.circe.Decoder.Result[String]", "kind" : "def"}, {"label" : "decoderFromNew", "tail" : "(): Result[String]", "member" : "io.circe.benchmark.InstantiationBenchmark.decoderFromNew", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#decoderFromNew:io.circe.Decoder.Result[String]", "kind" : "def"}, {"label" : "input", "tail" : ": Json", "member" : "io.circe.benchmark.InstantiationBenchmark.input", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#input:io.circe.Json", "kind" : "val"}, {"member" : "io.circe.benchmark.InstantiationBenchmark#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/InstantiationBenchmark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/InstantiationBenchmark.html", "kind" : "class"}, {"name" : "io.circe.benchmark.JsonObjectBenchmark", "shortDescription" : "Compare the performance of JSON object operations.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonObjectBenchmark) ⇒ Boolean, msg: ⇒ Any): JsonObjectBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonObjectBenchmark) ⇒ Boolean): JsonObjectBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JsonObjectBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonObjectBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonObjectBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonObjectBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "remove", "tail" : "(): JsonObject", "member" : "io.circe.benchmark.JsonObjectBenchmark.remove", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#remove:io.circe.JsonObject", "kind" : "def"}, {"label" : "lookupBadFromFoldable", "tail" : "(): Option[Json]", "member" : "io.circe.benchmark.JsonObjectBenchmark.lookupBadFromFoldable", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#lookupBadFromFoldable:Option[io.circe.Json]", "kind" : "def"}, {"label" : "lookupGoodFromFoldable", "tail" : "(): Option[Json]", "member" : "io.circe.benchmark.JsonObjectBenchmark.lookupGoodFromFoldable", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#lookupGoodFromFoldable:Option[io.circe.Json]", "kind" : "def"}, {"label" : "lookupBadFromIterable", "tail" : "(): Option[Json]", "member" : "io.circe.benchmark.JsonObjectBenchmark.lookupBadFromIterable", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#lookupBadFromIterable:Option[io.circe.Json]", "kind" : "def"}, {"label" : "lookupGoodFromIterable", "tail" : "(): Option[Json]", "member" : "io.circe.benchmark.JsonObjectBenchmark.lookupGoodFromIterable", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#lookupGoodFromIterable:Option[io.circe.Json]", "kind" : "def"}, {"label" : "buildWithAdd", "tail" : "(): JsonObject", "member" : "io.circe.benchmark.JsonObjectBenchmark.buildWithAdd", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#buildWithAdd:io.circe.JsonObject", "kind" : "def"}, {"label" : "buildWithFromFoldable", "tail" : "(): JsonObject", "member" : "io.circe.benchmark.JsonObjectBenchmark.buildWithFromFoldable", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#buildWithFromFoldable:io.circe.JsonObject", "kind" : "def"}, {"label" : "buildWithFromIterable", "tail" : "(): JsonObject", "member" : "io.circe.benchmark.JsonObjectBenchmark.buildWithFromIterable", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#buildWithFromIterable:io.circe.JsonObject", "kind" : "def"}, {"label" : "valueFromFoldable", "tail" : ": JsonObject", "member" : "io.circe.benchmark.JsonObjectBenchmark.valueFromFoldable", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#valueFromFoldable:io.circe.JsonObject", "kind" : "val"}, {"label" : "valueFromIterable", "tail" : ": JsonObject", "member" : "io.circe.benchmark.JsonObjectBenchmark.valueFromIterable", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#valueFromIterable:io.circe.JsonObject", "kind" : "val"}, {"label" : "fields", "tail" : ": List[(String, Json)]", "member" : "io.circe.benchmark.JsonObjectBenchmark.fields", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#fields:List[(String,io.circe.Json)]", "kind" : "val"}, {"label" : "count", "tail" : ": Int", "member" : "io.circe.benchmark.JsonObjectBenchmark.count", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#count:Int", "kind" : "val"}, {"member" : "io.circe.benchmark.JsonObjectBenchmark#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/JsonObjectBenchmark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/JsonObjectBenchmark.html", "kind" : "class"}, {"name" : "io.circe.benchmark.MapDecoderBenchmark", "shortDescription" : "Compare the performance of derived and non-derived codecs.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MapDecoderBenchmark) ⇒ Boolean, msg: ⇒ Any): MapDecoderBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MapDecoderBenchmark) ⇒ Boolean): MapDecoderBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MapDecoderBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MapDecoderBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MapDecoderBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MapDecoderBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "decodeNestedMap", "tail" : "(): Result[Map[String, Map[String, Int]]]", "member" : "io.circe.benchmark.MapDecoderBenchmark.decodeNestedMap", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#decodeNestedMap:io.circe.Decoder.Result[Map[String,Map[String,Int]]]", "kind" : "def"}, {"label" : "json", "tail" : ": Json", "member" : "io.circe.benchmark.MapDecoderBenchmark.json", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#json:io.circe.Json", "kind" : "val"}, {"label" : "data", "tail" : ": Map[String, Map[String, Int]]", "member" : "io.circe.benchmark.MapDecoderBenchmark.data", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#data:scala.collection.immutable.Map[String,scala.collection.immutable.Map[String,Int]]", "kind" : "val"}, {"member" : "io.circe.benchmark.MapDecoderBenchmark#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/MapDecoderBenchmark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/MapDecoderBenchmark.html", "kind" : "class"}, {"name" : "io.circe.benchmark.NumberParsingBenchmark", "shortDescription" : "Compare the performance of JSON number parsing.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NumberParsingBenchmark) ⇒ Boolean, msg: ⇒ Any): NumberParsingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NumberParsingBenchmark) ⇒ Boolean): NumberParsingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): NumberParsingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): NumberParsingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (NumberParsingBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (NumberParsingBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "parseManyLongs", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseManyLongs", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseManyLongs:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "parseManyDoubles", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseManyDoubles", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseManyDoubles:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "parseManyBigInts", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseManyBigInts", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseManyBigInts:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "parseManyBigDecimals", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseManyBigDecimals", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseManyBigDecimals:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "parseManyBiggerDecimals", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseManyBiggerDecimals", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseManyBiggerDecimals:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "decodeManyLongs", "tail" : "(): Either[Error, List[Long]]", "member" : "io.circe.benchmark.NumberParsingBenchmark.decodeManyLongs", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#decodeManyLongs:Either[io.circe.Error,List[Long]]", "kind" : "def"}, {"label" : "decodeManyDoubles", "tail" : "(): Either[Error, List[Double]]", "member" : "io.circe.benchmark.NumberParsingBenchmark.decodeManyDoubles", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#decodeManyDoubles:Either[io.circe.Error,List[Double]]", "kind" : "def"}, {"label" : "decodeManyBigInts", "tail" : "(): Either[Error, List[BigInt]]", "member" : "io.circe.benchmark.NumberParsingBenchmark.decodeManyBigInts", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#decodeManyBigInts:Either[io.circe.Error,List[BigInt]]", "kind" : "def"}, {"label" : "decodeManyBigDecimals", "tail" : "(): Either[Error, List[BigDecimal]]", "member" : "io.circe.benchmark.NumberParsingBenchmark.decodeManyBigDecimals", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#decodeManyBigDecimals:Either[io.circe.Error,List[BigDecimal]]", "kind" : "def"}, {"label" : "parseLong", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseLong", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseLong:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "parseDouble", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseDouble", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseDouble:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "parseBigInt", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseBigInt", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseBigInt:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "parseBigDecimal", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseBigDecimal", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseBigDecimal:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "parseBiggerDecimal", "tail" : "(): Either[Error, Json]", "member" : "io.circe.benchmark.NumberParsingBenchmark.parseBiggerDecimal", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#parseBiggerDecimal:Either[io.circe.Error,io.circe.Json]", "kind" : "def"}, {"label" : "decodeLong", "tail" : "(): Either[Error, Long]", "member" : "io.circe.benchmark.NumberParsingBenchmark.decodeLong", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#decodeLong:Either[io.circe.Error,Long]", "kind" : "def"}, {"label" : "decodeDouble", "tail" : "(): Either[Error, Double]", "member" : "io.circe.benchmark.NumberParsingBenchmark.decodeDouble", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#decodeDouble:Either[io.circe.Error,Double]", "kind" : "def"}, {"label" : "decodeBigInt", "tail" : "(): Either[Error, BigInt]", "member" : "io.circe.benchmark.NumberParsingBenchmark.decodeBigInt", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#decodeBigInt:Either[io.circe.Error,BigInt]", "kind" : "def"}, {"label" : "decodeBigDecimal", "tail" : "(): Either[Error, BigDecimal]", "member" : "io.circe.benchmark.NumberParsingBenchmark.decodeBigDecimal", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#decodeBigDecimal:Either[io.circe.Error,BigDecimal]", "kind" : "def"}, {"label" : "inputLongs", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputLongs", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputLongs:String", "kind" : "val"}, {"label" : "inputDoubles", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputDoubles", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputDoubles:String", "kind" : "val"}, {"label" : "inputBigInts", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputBigInts", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputBigInts:String", "kind" : "val"}, {"label" : "inputBigDecimals", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputBigDecimals", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputBigDecimals:String", "kind" : "val"}, {"label" : "inputBiggerDecimals", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputBiggerDecimals", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputBiggerDecimals:String", "kind" : "val"}, {"label" : "count", "tail" : ": Int", "member" : "io.circe.benchmark.NumberParsingBenchmark.count", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#count:Int", "kind" : "val"}, {"label" : "inputLong", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputLong", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputLong:String", "kind" : "val"}, {"label" : "inputDouble", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputDouble", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputDouble:String", "kind" : "val"}, {"label" : "inputBigInt", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputBigInt", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputBigInt:String", "kind" : "val"}, {"label" : "inputBigDecimal", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputBigDecimal", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputBigDecimal:String", "kind" : "val"}, {"label" : "inputBiggerDecimal", "tail" : ": String", "member" : "io.circe.benchmark.NumberParsingBenchmark.inputBiggerDecimal", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#inputBiggerDecimal:String", "kind" : "val"}, {"member" : "io.circe.benchmark.NumberParsingBenchmark#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/NumberParsingBenchmark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/NumberParsingBenchmark.html", "kind" : "class"}, {"name" : "io.circe.benchmark.PointerBenchmark", "shortDescription" : "Compare the performance of various ways of folding JSON values.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PointerBenchmark) ⇒ Boolean, msg: ⇒ Any): PointerBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PointerBenchmark) ⇒ Boolean): PointerBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PointerBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PointerBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PointerBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PointerBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "badPointer", "tail" : "(): Option[Json]", "member" : "io.circe.benchmark.PointerBenchmark.badPointer", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#badPointer:Option[io.circe.Json]", "kind" : "def"}, {"label" : "badOptics", "tail" : "(): Option[Json]", "member" : "io.circe.benchmark.PointerBenchmark.badOptics", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#badOptics:Option[io.circe.Json]", "kind" : "def"}, {"label" : "goodPointer", "tail" : "(): Option[Json]", "member" : "io.circe.benchmark.PointerBenchmark.goodPointer", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#goodPointer:Option[io.circe.Json]", "kind" : "def"}, {"label" : "goodOptics", "tail" : "(): Option[Json]", "member" : "io.circe.benchmark.PointerBenchmark.goodOptics", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#goodOptics:Option[io.circe.Json]", "kind" : "def"}, {"label" : "pointer", "tail" : ": Pointer", "member" : "io.circe.benchmark.PointerBenchmark.pointer", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#pointer:io.circe.pointer.Pointer", "kind" : "val"}, {"label" : "path", "tail" : ": Optional[Json, Json]", "member" : "io.circe.benchmark.PointerBenchmark.path", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#path:monocle.Optional[io.circe.Json,io.circe.Json]", "kind" : "val"}, {"label" : "bad", "tail" : ": Json", "member" : "io.circe.benchmark.PointerBenchmark.bad", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#bad:io.circe.Json", "kind" : "val"}, {"label" : "good", "tail" : ": Json", "member" : "io.circe.benchmark.PointerBenchmark.good", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#good:io.circe.Json", "kind" : "val"}, {"member" : "io.circe.benchmark.PointerBenchmark#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/PointerBenchmark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/PointerBenchmark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/PointerBenchmark.html", "kind" : "class"}, {"name" : "io.circe.benchmark.PrintingBenchmark", "shortDescription" : "Compare the performance of string and byte buffer printers.", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PrintingBenchmark) ⇒ Boolean, msg: ⇒ Any): PrintingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PrintingBenchmark) ⇒ Boolean): PrintingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PrintingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PrintingBenchmark", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PrintingBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PrintingBenchmark, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "printIntsToByteBuffer", "tail" : "(): ByteBuffer", "member" : "io.circe.benchmark.PrintingBenchmark.printIntsToByteBuffer", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#printIntsToByteBuffer:java.nio.ByteBuffer", "kind" : "def"}, {"label" : "printIntsToString", "tail" : "(): String", "member" : "io.circe.benchmark.PrintingBenchmark.printIntsToString", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#printIntsToString:String", "kind" : "def"}, {"label" : "printBooleansToByteBuffer", "tail" : "(): ByteBuffer", "member" : "io.circe.benchmark.PrintingBenchmark.printBooleansToByteBuffer", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#printBooleansToByteBuffer:java.nio.ByteBuffer", "kind" : "def"}, {"label" : "printBooleansToString", "tail" : "(): String", "member" : "io.circe.benchmark.PrintingBenchmark.printBooleansToString", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#printBooleansToString:String", "kind" : "def"}, {"label" : "printHelloWorldToByteBuffer", "tail" : "(): ByteBuffer", "member" : "io.circe.benchmark.PrintingBenchmark.printHelloWorldToByteBuffer", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#printHelloWorldToByteBuffer:java.nio.ByteBuffer", "kind" : "def"}, {"label" : "printHelloWorldToString", "tail" : "(): String", "member" : "io.circe.benchmark.PrintingBenchmark.printHelloWorldToString", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#printHelloWorldToString:String", "kind" : "def"}, {"label" : "printFoosToByteBuffer", "tail" : "(): ByteBuffer", "member" : "io.circe.benchmark.PrintingBenchmark.printFoosToByteBuffer", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#printFoosToByteBuffer:java.nio.ByteBuffer", "kind" : "def"}, {"label" : "printFoosToString", "tail" : "(): String", "member" : "io.circe.benchmark.PrintingBenchmark.printFoosToString", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#printFoosToString:String", "kind" : "def"}, {"member" : "io.circe.benchmark.PrintingBenchmark#<init>", "error" : "unsupported entity"}, {"label" : "helloWorldJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.helloWorldJson", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#helloWorldJson:io.circe.Json", "kind" : "val"}, {"label" : "foosJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.foosJson", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#foosJson:io.circe.Json", "kind" : "val"}, {"label" : "booleansJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.booleansJson", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#booleansJson:io.circe.Json", "kind" : "val"}, {"label" : "intsJson", "tail" : ": Json", "member" : "io.circe.benchmark.ExampleData.intsJson", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#intsJson:io.circe.Json", "kind" : "val"}, {"label" : "foos", "tail" : ": Map[String, Foo]", "member" : "io.circe.benchmark.ExampleData.foos", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#foos:Map[String,io.circe.benchmark.Foo]", "kind" : "val"}, {"label" : "booleans", "tail" : ": List[Boolean]", "member" : "io.circe.benchmark.ExampleData.booleans", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#booleans:List[Boolean]", "kind" : "val"}, {"label" : "ints", "tail" : ": List[Int]", "member" : "io.circe.benchmark.ExampleData.ints", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#ints:List[Int]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/benchmark\/PrintingBenchmark.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/benchmark\/PrintingBenchmark.html", "kind" : "class"}], "io.circe.scalajs" : [{"name" : "io.circe.scalajs.EncoderJsOps", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EncoderJsOps[A]) ⇒ Boolean, msg: ⇒ Any): EncoderJsOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (EncoderJsOps[A]) ⇒ Boolean): EncoderJsOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): EncoderJsOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): EncoderJsOps[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (EncoderJsOps[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (EncoderJsOps[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asJsAny", "tail" : "(encoder: Encoder[A]): Any", "member" : "io.circe.scalajs.EncoderJsOps.asJsAny", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#asJsAny(implicitencoder:io.circe.Encoder[A]):scala.scalajs.js.Any", "kind" : "def"}, {"member" : "io.circe.scalajs.EncoderJsOps#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "io\/circe\/scalajs\/package$$EncoderJsOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "io\/circe\/scalajs\/package$$EncoderJsOps.html", "kind" : "class"}], "io.circe.refined" : [{"name" : "io.circe.refined.CirceCodecRefined", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/refined\/CirceCodecRefined.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/refined\/CirceCodecRefined.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CirceCodecRefined) ⇒ Boolean, msg: ⇒ Any): CirceCodecRefined", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/refined\/CirceCodecRefined.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CirceCodecRefined) ⇒ Boolean): CirceCodecRefined", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/refined\/CirceCodecRefined.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CirceCodecRefined", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/refined\/CirceCodecRefined.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CirceCodecRefined", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/refined\/CirceCodecRefined.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CirceCodecRefined, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/refined\/CirceCodecRefined.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CirceCodecRefined, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/refined\/CirceCodecRefined.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "refinedKeyEncoder", "tail" : "(underlying: KeyEncoder[T], refType: RefType[F]): KeyEncoder[F[T, P]]", "member" : "io.circe.refined.CirceCodecRefined.refinedKeyEncoder", "link" : "io\/circe\/refined\/CirceCodecRefined.html#refinedKeyEncoder[T,P,F[_,_]](implicitunderlying:io.circe.KeyEncoder[T],implicitrefType:eu.timepit.refined.api.RefType[F]):io.circe.KeyEncoder[F[T,P]]", "kind" : "implicit final def"}, {"label" : "refinedKeyDecoder", "tail" : "(underlying: KeyDecoder[T], validate: Validate[T, P], refType: RefType[F]): KeyDecoder[F[T, P]]", "member" : "io.circe.refined.CirceCodecRefined.refinedKeyDecoder", "link" : "io\/circe\/refined\/CirceCodecRefined.html#refinedKeyDecoder[T,P,F[_,_]](implicitunderlying:io.circe.KeyDecoder[T],implicitvalidate:eu.timepit.refined.api.Validate[T,P],implicitrefType:eu.timepit.refined.api.RefType[F]):io.circe.KeyDecoder[F[T,P]]", "kind" : "implicit final def"}, {"label" : "refinedEncoder", "tail" : "(underlying: Encoder[T], refType: RefType[F]): Encoder[F[T, P]]", "member" : "io.circe.refined.CirceCodecRefined.refinedEncoder", "link" : "io\/circe\/refined\/CirceCodecRefined.html#refinedEncoder[T,P,F[_,_]](implicitunderlying:io.circe.Encoder[T],implicitrefType:eu.timepit.refined.api.RefType[F]):io.circe.Encoder[F[T,P]]", "kind" : "implicit final def"}, {"label" : "refinedDecoder", "tail" : "(underlying: Decoder[T], validate: Validate[T, P], refType: RefType[F]): Decoder[F[T, P]]", "member" : "io.circe.refined.CirceCodecRefined.refinedDecoder", "link" : "io\/circe\/refined\/CirceCodecRefined.html#refinedDecoder[T,P,F[_,_]](implicitunderlying:io.circe.Decoder[T],implicitvalidate:eu.timepit.refined.api.Validate[T,P],implicitrefType:eu.timepit.refined.api.RefType[F]):io.circe.Decoder[F[T,P]]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/refined\/CirceCodecRefined.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/refined\/CirceCodecRefined.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/refined\/CirceCodecRefined.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/refined\/CirceCodecRefined.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/refined\/CirceCodecRefined.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/refined\/CirceCodecRefined.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/refined\/CirceCodecRefined.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/refined\/CirceCodecRefined.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/refined\/CirceCodecRefined.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/refined\/CirceCodecRefined.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/refined\/CirceCodecRefined.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/refined\/CirceCodecRefined.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/refined\/CirceCodecRefined.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/refined\/CirceCodecRefined.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/refined\/CirceCodecRefined.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/refined\/CirceCodecRefined.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/refined\/CirceCodecRefined.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/refined\/CirceCodecRefined.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/refined\/CirceCodecRefined.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides codecs for refined types.", "trait" : "io\/circe\/refined\/CirceCodecRefined.html", "kind" : "trait"}], "io.circe.generic.decoding" : [{"name" : "io.circe.generic.decoding.DerivedDecoder", "shortDescription" : "", "object" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DerivedDecoder[A]) ⇒ Boolean, msg: ⇒ Any): DerivedDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DerivedDecoder[A]) ⇒ Boolean): DerivedDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DerivedDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DerivedDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DerivedDecoder[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DerivedDecoder[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.generic.decoding.DerivedDecoder#<init>", "error" : "unsupported entity"}, {"label" : "emapTry", "tail" : "(f: (A) ⇒ Try[B]): Decoder[B]", "member" : "io.circe.Decoder.emapTry", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#emapTry[B](f:A=>scala.util.Try[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "emap", "tail" : "(f: (A) ⇒ Either[String, B]): Decoder[B]", "member" : "io.circe.Decoder.emap", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#emap[B](f:A=>Either[String,B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "at", "tail" : "(field: String): Decoder[A]", "member" : "io.circe.Decoder.at", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#at(field:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "prepare", "tail" : "(f: (ACursor) ⇒ ACursor): Decoder[A]", "member" : "io.circe.Decoder.prepare", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#prepare(f:io.circe.ACursor=>io.circe.ACursor):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "either", "tail" : "(decodeB: Decoder[B]): Decoder[Either[A, B]]", "member" : "io.circe.Decoder.either", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#either[B](decodeB:io.circe.Decoder[B]):io.circe.Decoder[Either[A,B]]", "kind" : "final def"}, {"label" : "or", "tail" : "(d: ⇒ Decoder[AA]): Decoder[AA]", "member" : "io.circe.Decoder.or", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#or[AA>:A](d:=>io.circe.Decoder[AA]):io.circe.Decoder[AA]", "kind" : "final def"}, {"label" : "product", "tail" : "(fb: Decoder[B]): Decoder[(A, B)]", "member" : "io.circe.Decoder.product", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#product[B](fb:io.circe.Decoder[B]):io.circe.Decoder[(A,B)]", "kind" : "final def"}, {"label" : "kleisli", "tail" : "(): Kleisli[Result, HCursor, A]", "member" : "io.circe.Decoder.kleisli", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#kleisli:cats.data.Kleisli[io.circe.Decoder.Result,io.circe.HCursor,A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(pred: (HCursor) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#validate(pred:io.circe.HCursor=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(errors: (HCursor) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#validate(errors:io.circe.HCursor=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(errors: (A) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#ensure(errors:A=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(pred: (A) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#ensure(pred:A=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "withErrorMessage", "tail" : "(message: String): Decoder[A]", "member" : "io.circe.Decoder.withErrorMessage", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#withErrorMessage(message:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "handleErrorWith", "tail" : "(f: (DecodingFailure) ⇒ Decoder[A]): Decoder[A]", "member" : "io.circe.Decoder.handleErrorWith", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#handleErrorWith(f:io.circe.DecodingFailure=>io.circe.Decoder[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Decoder[B]): Decoder[B]", "member" : "io.circe.Decoder.flatMap", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#flatMap[B](f:A=>io.circe.Decoder[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Decoder[B]", "member" : "io.circe.Decoder.map", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#map[B](f:A=>B):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "decodeJson", "tail" : "(j: Json): Result[A]", "member" : "io.circe.Decoder.decodeJson", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#decodeJson(j:io.circe.Json):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "tryDecodeAccumulating", "tail" : "(c: ACursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.tryDecodeAccumulating", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#tryDecodeAccumulating(c:io.circe.ACursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "tryDecode", "tail" : "(c: ACursor): Result[A]", "member" : "io.circe.Decoder.tryDecode", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#tryDecode(c:io.circe.ACursor):io.circe.Decoder.Result[A]", "kind" : "def"}, {"label" : "decodeAccumulating", "tail" : "(c: HCursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.decodeAccumulating", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#decodeAccumulating(c:io.circe.HCursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(c: HCursor): Result[A]", "member" : "io.circe.Decoder.apply", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder.html#apply(c:io.circe.HCursor):io.circe.Decoder.Result[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "deriveDecoder", "tail" : "(gen: Aux[A, R], decode: Lazy[ReprDecoder[R]]): DerivedDecoder[A]", "member" : "io.circe.generic.decoding.DerivedDecoder.deriveDecoder", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#deriveDecoder[A,R](implicitgen:shapeless.LabelledGeneric.Aux[A,R],implicitdecode:shapeless.Lazy[io.circe.generic.decoding.ReprDecoder[R]]):io.circe.generic.decoding.DerivedDecoder[A]", "kind" : "implicit def"}, {"label" : "decodeCaseClassPatch", "tail" : "(gen: Aux[A, R], patch: Aux[R, O], decode: ReprDecoder[O]): DerivedDecoder[(A) ⇒ A]", "member" : "io.circe.generic.decoding.IncompleteDerivedDecoders.decodeCaseClassPatch", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#decodeCaseClassPatch[A,R<:shapeless.HList,O<:shapeless.HList](implicitgen:shapeless.LabelledGeneric.Aux[A,R],implicitpatch:io.circe.generic.util.PatchWithOptions.Aux[R,O],implicitdecode:io.circe.generic.decoding.ReprDecoder[O]):io.circe.generic.decoding.DerivedDecoder[A=>A]", "kind" : "implicit final def"}, {"label" : "decodeIncompleteCaseClass", "tail" : "(ffp: shapeless.ops.function.FnFromProduct.Aux[(P) ⇒ A, F], gen: Aux[A, T], removeAll: Aux[T, P, (P, R)], decode: ReprDecoder[R]): DerivedDecoder[F]", "member" : "io.circe.generic.decoding.IncompleteDerivedDecoders.decodeIncompleteCaseClass", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#decodeIncompleteCaseClass[F,P<:shapeless.HList,A,T<:shapeless.HList,R<:shapeless.HList](implicitffp:shapeless.ops.function.FnFromProduct.Aux[P=>A,F],implicitgen:shapeless.LabelledGeneric.Aux[A,T],implicitremoveAll:shapeless.ops.record.RemoveAll.Aux[T,P,(P,R)],implicitdecode:io.circe.generic.decoding.ReprDecoder[R]):io.circe.generic.decoding.DerivedDecoder[F]", "kind" : "implicit final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/decoding\/DerivedDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/generic\/decoding\/DerivedDecoder.html", "kind" : "class"}, {"name" : "io.circe.generic.decoding.ReprDecoder", "shortDescription" : "A decoder for a generic representation of a case class or ADT.", "object" : "io\/circe\/generic\/decoding\/ReprDecoder$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReprDecoder[A]) ⇒ Boolean, msg: ⇒ Any): ReprDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ReprDecoder[A]) ⇒ Boolean): ReprDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ReprDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ReprDecoder[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ReprDecoder[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ReprDecoder[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "io.circe.generic.decoding.ReprDecoder#<init>", "error" : "unsupported entity"}, {"label" : "emapTry", "tail" : "(f: (A) ⇒ Try[B]): Decoder[B]", "member" : "io.circe.Decoder.emapTry", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#emapTry[B](f:A=>scala.util.Try[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "emap", "tail" : "(f: (A) ⇒ Either[String, B]): Decoder[B]", "member" : "io.circe.Decoder.emap", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#emap[B](f:A=>Either[String,B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "at", "tail" : "(field: String): Decoder[A]", "member" : "io.circe.Decoder.at", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#at(field:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "prepare", "tail" : "(f: (ACursor) ⇒ ACursor): Decoder[A]", "member" : "io.circe.Decoder.prepare", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#prepare(f:io.circe.ACursor=>io.circe.ACursor):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "either", "tail" : "(decodeB: Decoder[B]): Decoder[Either[A, B]]", "member" : "io.circe.Decoder.either", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#either[B](decodeB:io.circe.Decoder[B]):io.circe.Decoder[Either[A,B]]", "kind" : "final def"}, {"label" : "or", "tail" : "(d: ⇒ Decoder[AA]): Decoder[AA]", "member" : "io.circe.Decoder.or", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#or[AA>:A](d:=>io.circe.Decoder[AA]):io.circe.Decoder[AA]", "kind" : "final def"}, {"label" : "product", "tail" : "(fb: Decoder[B]): Decoder[(A, B)]", "member" : "io.circe.Decoder.product", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#product[B](fb:io.circe.Decoder[B]):io.circe.Decoder[(A,B)]", "kind" : "final def"}, {"label" : "kleisli", "tail" : "(): Kleisli[Result, HCursor, A]", "member" : "io.circe.Decoder.kleisli", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#kleisli:cats.data.Kleisli[io.circe.Decoder.Result,io.circe.HCursor,A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(pred: (HCursor) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#validate(pred:io.circe.HCursor=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "validate", "tail" : "(errors: (HCursor) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.validate", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#validate(errors:io.circe.HCursor=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(errors: (A) ⇒ List[String]): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#ensure(errors:A=>List[String]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "ensure", "tail" : "(pred: (A) ⇒ Boolean, message: ⇒ String): Decoder[A]", "member" : "io.circe.Decoder.ensure", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#ensure(pred:A=>Boolean,message:=>String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "withErrorMessage", "tail" : "(message: String): Decoder[A]", "member" : "io.circe.Decoder.withErrorMessage", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#withErrorMessage(message:String):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "handleErrorWith", "tail" : "(f: (DecodingFailure) ⇒ Decoder[A]): Decoder[A]", "member" : "io.circe.Decoder.handleErrorWith", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#handleErrorWith(f:io.circe.DecodingFailure=>io.circe.Decoder[A]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Decoder[B]): Decoder[B]", "member" : "io.circe.Decoder.flatMap", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#flatMap[B](f:A=>io.circe.Decoder[B]):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Decoder[B]", "member" : "io.circe.Decoder.map", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#map[B](f:A=>B):io.circe.Decoder[B]", "kind" : "final def"}, {"label" : "decodeJson", "tail" : "(j: Json): Result[A]", "member" : "io.circe.Decoder.decodeJson", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#decodeJson(j:io.circe.Json):io.circe.Decoder.Result[A]", "kind" : "final def"}, {"label" : "tryDecodeAccumulating", "tail" : "(c: ACursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.tryDecodeAccumulating", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#tryDecodeAccumulating(c:io.circe.ACursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "tryDecode", "tail" : "(c: ACursor): Result[A]", "member" : "io.circe.Decoder.tryDecode", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#tryDecode(c:io.circe.ACursor):io.circe.Decoder.Result[A]", "kind" : "def"}, {"label" : "decodeAccumulating", "tail" : "(c: HCursor): AccumulatingResult[A]", "member" : "io.circe.Decoder.decodeAccumulating", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#decodeAccumulating(c:io.circe.HCursor):io.circe.Decoder.AccumulatingResult[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(c: HCursor): Result[A]", "member" : "io.circe.Decoder.apply", "link" : "io\/circe\/generic\/decoding\/ReprDecoder.html#apply(c:io.circe.HCursor):io.circe.Decoder.Result[A]", "kind" : "abstract def"}], "members_object" : [{"label" : "hnilResultAccumulating", "tail" : ": AccumulatingResult[HNil]", "member" : "io.circe.generic.decoding.ReprDecoder.hnilResultAccumulating", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#hnilResultAccumulating:io.circe.Decoder.AccumulatingResult[shapeless.HNil]", "kind" : "val"}, {"label" : "hnilResult", "tail" : ": Result[HNil]", "member" : "io.circe.generic.decoding.ReprDecoder.hnilResult", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#hnilResult:io.circe.Decoder.Result[shapeless.HNil]", "kind" : "val"}, {"label" : "injectLeftValue", "tail" : "(v: V): :+:[FieldType[K, V], R]", "member" : "io.circe.generic.decoding.ReprDecoder.injectLeftValue", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#injectLeftValue[K,V,R<:shapeless.Coproduct](v:V):shapeless.labelled.FieldType[K,V]:+:R", "kind" : "def"}, {"label" : "consResults", "tail" : "(hv: F[V], tr: F[T])(F: Apply[F]): F[::[FieldType[K, V], T]]", "member" : "io.circe.generic.decoding.ReprDecoder.consResults", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#consResults[F[_],K,V,T<:shapeless.HList](hv:F[V],tr:F[T])(implicitF:cats.Apply[F]):F[shapeless.labelled.FieldType[K,V]::T]", "kind" : "def"}, {"label" : "hnilReprDecoder", "tail" : ": ReprDecoder[HNil]", "member" : "io.circe.generic.decoding.ReprDecoder.hnilReprDecoder", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#hnilReprDecoder:io.circe.generic.decoding.ReprDecoder[shapeless.HNil]", "kind" : "val"}, {"label" : "deriveReprDecoder", "tail" : "(): ReprDecoder[R]", "member" : "io.circe.generic.decoding.ReprDecoder.deriveReprDecoder", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#deriveReprDecoder[R]:io.circe.generic.decoding.ReprDecoder[R]", "kind" : "implicit macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/decoding\/ReprDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/generic\/decoding\/ReprDecoder.html", "kind" : "class"}], "io.circe.generic" : [{"name" : "io.circe.generic.AutoDerivation", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/AutoDerivation.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/AutoDerivation.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AutoDerivation) ⇒ Boolean, msg: ⇒ Any): AutoDerivation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/AutoDerivation.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AutoDerivation) ⇒ Boolean): AutoDerivation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/AutoDerivation.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AutoDerivation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/AutoDerivation.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AutoDerivation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/AutoDerivation.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AutoDerivation, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/AutoDerivation.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AutoDerivation, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/AutoDerivation.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "exportEncoder", "tail" : "(): Exported[AsObject[A]]", "member" : "io.circe.generic.AutoDerivation.exportEncoder", "link" : "io\/circe\/generic\/AutoDerivation.html#exportEncoder[A]:io.circe.export.Exported[io.circe.Encoder.AsObject[A]]", "kind" : "implicit macro def"}, {"label" : "exportDecoder", "tail" : "(): Exported[Decoder[A]]", "member" : "io.circe.generic.AutoDerivation.exportDecoder", "link" : "io\/circe\/generic\/AutoDerivation.html#exportDecoder[A]:io.circe.export.Exported[io.circe.Decoder[A]]", "kind" : "implicit macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/AutoDerivation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/AutoDerivation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/AutoDerivation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/AutoDerivation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/AutoDerivation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/AutoDerivation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/AutoDerivation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/AutoDerivation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/AutoDerivation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/AutoDerivation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/AutoDerivation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/AutoDerivation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/AutoDerivation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/AutoDerivation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/AutoDerivation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/AutoDerivation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/AutoDerivation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/AutoDerivation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/AutoDerivation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Fully automatic codec derivation.", "trait" : "io\/circe\/generic\/AutoDerivation.html", "kind" : "trait"}, {"name" : "io.circe.generic.Deriver", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/Deriver.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/Deriver.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Deriver) ⇒ Boolean, msg: ⇒ Any): Deriver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/Deriver.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Deriver) ⇒ Boolean): Deriver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/Deriver.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Deriver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/Deriver.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Deriver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/Deriver.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Deriver, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/Deriver.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Deriver, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/Deriver.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "encodeSubtype", "tail" : "(name: String, encode: scala.reflect.macros.Universe.TermName, value: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.Deriver.encodeSubtype", "link" : "io\/circe\/generic\/Deriver.html#encodeSubtype(name:String,encode:Deriver.this.c.universe.TermName,value:Deriver.this.c.universe.TermName):Deriver.this.c.universe.Tree", "kind" : "def"}, {"label" : "encodeField", "tail" : "(name: String, encode: scala.reflect.macros.Universe.TermName, value: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.Deriver.encodeField", "link" : "io\/circe\/generic\/Deriver.html#encodeField(name:String,encode:Deriver.this.c.universe.TermName,value:Deriver.this.c.universe.TermName):Deriver.this.c.universe.Tree", "kind" : "def"}, {"label" : "decodeSubtypeAccumulating", "tail" : "(name: String, decode: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.Deriver.decodeSubtypeAccumulating", "link" : "io\/circe\/generic\/Deriver.html#decodeSubtypeAccumulating(name:String,decode:Deriver.this.c.universe.TermName):Deriver.this.c.universe.Tree", "kind" : "def"}, {"label" : "decodeSubtype", "tail" : "(name: String, decode: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.Deriver.decodeSubtype", "link" : "io\/circe\/generic\/Deriver.html#decodeSubtype(name:String,decode:Deriver.this.c.universe.TermName):Deriver.this.c.universe.Tree", "kind" : "def"}, {"label" : "decodeFieldAccumulating", "tail" : "(name: String, decode: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.Deriver.decodeFieldAccumulating", "link" : "io\/circe\/generic\/Deriver.html#decodeFieldAccumulating(name:String,decode:Deriver.this.c.universe.TermName):Deriver.this.c.universe.Tree", "kind" : "def"}, {"label" : "decodeField", "tail" : "(name: String, decode: scala.reflect.macros.Universe.TermName): scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.Deriver.decodeField", "link" : "io\/circe\/generic\/Deriver.html#decodeField(name:String,decode:Deriver.this.c.universe.TermName):Deriver.this.c.universe.Tree", "kind" : "def"}, {"label" : "encodeMethodName", "tail" : ": scala.reflect.macros.Universe.TermName", "member" : "io.circe.generic.Deriver.encodeMethodName", "link" : "io\/circe\/generic\/Deriver.html#encodeMethodName:Deriver.this.c.universe.TermName", "kind" : "val"}, {"label" : "decodeAccumulatingMethodName", "tail" : ": scala.reflect.macros.Universe.TermName", "member" : "io.circe.generic.Deriver.decodeAccumulatingMethodName", "link" : "io\/circe\/generic\/Deriver.html#decodeAccumulatingMethodName:Deriver.this.c.universe.TermName", "kind" : "val"}, {"label" : "decodeMethodName", "tail" : ": scala.reflect.macros.Universe.TermName", "member" : "io.circe.generic.Deriver.decodeMethodName", "link" : "io\/circe\/generic\/Deriver.html#decodeMethodName:Deriver.this.c.universe.TermName", "kind" : "val"}, {"label" : "hnilReprCodec", "tail" : ": scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.Deriver.hnilReprCodec", "link" : "io\/circe\/generic\/Deriver.html#hnilReprCodec:Deriver.this.c.universe.Tree", "kind" : "val"}, {"label" : "hnilReprDecoder", "tail" : ": scala.reflect.macros.Universe.Tree", "member" : "io.circe.generic.Deriver.hnilReprDecoder", "link" : "io\/circe\/generic\/Deriver.html#hnilReprDecoder:Deriver.this.c.universe.Tree", "kind" : "val"}, {"label" : "DC", "tail" : ": scala.reflect.macros.Universe.TypeTag[DerivedAsObjectCodec[_]]", "member" : "io.circe.generic.Deriver.DC", "link" : "io\/circe\/generic\/Deriver.html#DC:Deriver.this.c.universe.TypeTag[io.circe.generic.codec.DerivedAsObjectCodec[_]]", "kind" : "val"}, {"label" : "DE", "tail" : ": scala.reflect.macros.Universe.TypeTag[DerivedAsObjectEncoder[_]]", "member" : "io.circe.generic.Deriver.DE", "link" : "io\/circe\/generic\/Deriver.html#DE:Deriver.this.c.universe.TypeTag[io.circe.generic.encoding.DerivedAsObjectEncoder[_]]", "kind" : "val"}, {"label" : "DD", "tail" : ": scala.reflect.macros.Universe.TypeTag[DerivedDecoder[_]]", "member" : "io.circe.generic.Deriver.DD", "link" : "io\/circe\/generic\/Deriver.html#DD:Deriver.this.c.universe.TypeTag[io.circe.generic.decoding.DerivedDecoder[_]]", "kind" : "val"}, {"label" : "RC", "tail" : ": scala.reflect.macros.Universe.TypeTag[ReprAsObjectCodec[_]]", "member" : "io.circe.generic.Deriver.RC", "link" : "io\/circe\/generic\/Deriver.html#RC:Deriver.this.c.universe.TypeTag[io.circe.generic.codec.ReprAsObjectCodec[_]]", "kind" : "val"}, {"label" : "RE", "tail" : ": scala.reflect.macros.Universe.TypeTag[ReprAsObjectEncoder[_]]", "member" : "io.circe.generic.Deriver.RE", "link" : "io\/circe\/generic\/Deriver.html#RE:Deriver.this.c.universe.TypeTag[io.circe.generic.encoding.ReprAsObjectEncoder[_]]", "kind" : "val"}, {"label" : "RD", "tail" : ": scala.reflect.macros.Universe.TypeTag[ReprDecoder[_]]", "member" : "io.circe.generic.Deriver.RD", "link" : "io\/circe\/generic\/Deriver.html#RD:Deriver.this.c.universe.TypeTag[io.circe.generic.decoding.ReprDecoder[_]]", "kind" : "val"}, {"label" : "deriveCodec", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[R]): scala.reflect.macros.whitebox.Context.Expr[ReprAsObjectCodec[R]]", "member" : "io.circe.generic.Deriver.deriveCodec", "link" : "io\/circe\/generic\/Deriver.html#deriveCodec[R](implicitevidence$3:Deriver.this.c.WeakTypeTag[R]):Deriver.this.c.Expr[io.circe.generic.codec.ReprAsObjectCodec[R]]", "kind" : "def"}, {"label" : "deriveEncoder", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[R]): scala.reflect.macros.whitebox.Context.Expr[ReprAsObjectEncoder[R]]", "member" : "io.circe.generic.Deriver.deriveEncoder", "link" : "io\/circe\/generic\/Deriver.html#deriveEncoder[R](implicitevidence$2:Deriver.this.c.WeakTypeTag[R]):Deriver.this.c.Expr[io.circe.generic.encoding.ReprAsObjectEncoder[R]]", "kind" : "def"}, {"label" : "deriveDecoder", "tail" : "(arg0: scala.reflect.macros.whitebox.Context.WeakTypeTag[R]): scala.reflect.macros.whitebox.Context.Expr[ReprDecoder[R]]", "member" : "io.circe.generic.Deriver.deriveDecoder", "link" : "io\/circe\/generic\/Deriver.html#deriveDecoder[R](implicitevidence$1:Deriver.this.c.WeakTypeTag[R]):Deriver.this.c.Expr[io.circe.generic.decoding.ReprDecoder[R]]", "kind" : "def"}, {"member" : "io.circe.generic.Deriver#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": Context", "member" : "io.circe.generic.Deriver.c", "link" : "io\/circe\/generic\/Deriver.html#c:scala.reflect.macros.whitebox.Context", "kind" : "val"}, {"label" : "constructCodec", "tail" : "(R: scala.reflect.macros.whitebox.Context.WeakTypeTag[R]): scala.reflect.macros.whitebox.Context.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.constructCodec", "link" : "io\/circe\/generic\/Deriver.html#constructCodec[R](implicitR:DerivationMacros.this.c.WeakTypeTag[R]):DerivationMacros.this.c.Tree", "kind" : "def"}, {"label" : "constructEncoder", "tail" : "(R: scala.reflect.macros.whitebox.Context.WeakTypeTag[R]): scala.reflect.macros.whitebox.Context.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.constructEncoder", "link" : "io\/circe\/generic\/Deriver.html#constructEncoder[R](implicitR:DerivationMacros.this.c.WeakTypeTag[R]):DerivationMacros.this.c.Tree", "kind" : "def"}, {"label" : "hlistEncoderParts", "tail" : "(members: Members): (List[scala.reflect.macros.whitebox.Context.Tree], scala.reflect.macros.whitebox.Context.Tree)", "member" : "io.circe.generic.util.macros.DerivationMacros.hlistEncoderParts", "link" : "io\/circe\/generic\/Deriver.html#hlistEncoderParts(members:DerivationMacros.this.Members):(List[DerivationMacros.this.c.Tree],DerivationMacros.this.c.Tree)", "kind" : "def"}, {"label" : "constructDecoder", "tail" : "(R: scala.reflect.macros.whitebox.Context.WeakTypeTag[R]): scala.reflect.macros.whitebox.Context.Tree", "member" : "io.circe.generic.util.macros.DerivationMacros.constructDecoder", "link" : "io\/circe\/generic\/Deriver.html#constructDecoder[R](implicitR:DerivationMacros.this.c.WeakTypeTag[R]):DerivationMacros.this.c.Tree", "kind" : "def"}, {"label" : "ReprDecoderUtils", "tail" : ": scala.reflect.macros.Universe.Symbol", "member" : "io.circe.generic.util.macros.DerivationMacros.ReprDecoderUtils", "link" : "io\/circe\/generic\/Deriver.html#ReprDecoderUtils:DerivationMacros.this.c.universe.Symbol", "kind" : "val"}, {"label" : "encodeMethodArgs", "tail" : "(): List[scala.reflect.macros.Universe.Tree]", "member" : "io.circe.generic.util.macros.DerivationMacros.encodeMethodArgs", "link" : "io\/circe\/generic\/Deriver.html#encodeMethodArgs:List[DerivationMacros.this.c.universe.Tree]", "kind" : "def"}, {"label" : "decodeAccumulatingMethodArgs", "tail" : "(): List[scala.reflect.macros.Universe.Tree]", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeAccumulatingMethodArgs", "link" : "io\/circe\/generic\/Deriver.html#decodeAccumulatingMethodArgs:List[DerivationMacros.this.c.universe.Tree]", "kind" : "def"}, {"label" : "decodeMethodArgs", "tail" : "(): List[scala.reflect.macros.Universe.Tree]", "member" : "io.circe.generic.util.macros.DerivationMacros.decodeMethodArgs", "link" : "io\/circe\/generic\/Deriver.html#decodeMethodArgs:List[DerivationMacros.this.c.universe.Tree]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/Deriver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/Deriver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/Deriver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/Deriver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/Deriver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/Deriver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/Deriver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/Deriver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/Deriver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/Deriver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/Deriver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/Deriver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/Deriver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/Deriver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/Deriver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/Deriver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/Deriver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/Deriver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/Deriver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/generic\/Deriver.html", "kind" : "class"}, {"name" : "io.circe.generic.JsonCodec", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "io\/circe\/generic\/JsonCodec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "io\/circe\/generic\/JsonCodec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonCodec) ⇒ Boolean, msg: ⇒ Any): JsonCodec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/JsonCodec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsonCodec) ⇒ Boolean): JsonCodec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/JsonCodec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JsonCodec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/JsonCodec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsonCodec", "member" : "scala.Predef.Ensuring.ensuring", "link" : "io\/circe\/generic\/JsonCodec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsonCodec, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "io\/circe\/generic\/JsonCodec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsonCodec, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "io\/circe\/generic\/JsonCodec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "macroTransform", "tail" : "(annottees: Any*): Any", "member" : "io.circe.generic.JsonCodec.macroTransform", "link" : "io\/circe\/generic\/JsonCodec.html#macroTransform(annottees:Any*):Any", "kind" : "macro def"}, {"member" : "io.circe.generic.JsonCodec#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/JsonCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/JsonCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/JsonCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/JsonCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/JsonCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/JsonCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/JsonCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/JsonCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/JsonCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/JsonCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/JsonCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/JsonCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/JsonCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/JsonCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/JsonCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/JsonCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/JsonCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/JsonCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/JsonCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "io\/circe\/generic\/JsonCodec.html", "kind" : "class"}, {"name" : "io.circe.generic.semiauto", "shortDescription" : "Semi-automatic codec derivation.", "object" : "io\/circe\/generic\/semiauto$.html", "members_object" : [{"label" : "DerivationHelper", "tail" : "", "member" : "io.circe.generic.semiauto.DerivationHelper", "link" : "io\/circe\/generic\/semiauto$.html#DerivationHelper[A]extendsAnyRef", "kind" : "final class"}, {"label" : "deriveFor", "tail" : "(): DerivationHelper[A]", "member" : "io.circe.generic.semiauto.deriveFor", "link" : "io\/circe\/generic\/semiauto$.html#deriveFor[A]:io.circe.generic.semiauto.DerivationHelper[A]", "kind" : "final def"}, {"label" : "deriveCodec", "tail" : "(codec: Lazy[DerivedAsObjectCodec[A]]): AsObject[A]", "member" : "io.circe.generic.semiauto.deriveCodec", "link" : "io\/circe\/generic\/semiauto$.html#deriveCodec[A](implicitcodec:shapeless.Lazy[io.circe.generic.codec.DerivedAsObjectCodec[A]]):io.circe.Codec.AsObject[A]", "kind" : "final def"}, {"label" : "deriveEncoder", "tail" : "(encode: Lazy[DerivedAsObjectEncoder[A]]): AsObject[A]", "member" : "io.circe.generic.semiauto.deriveEncoder", "link" : "io\/circe\/generic\/semiauto$.html#deriveEncoder[A](implicitencode:shapeless.Lazy[io.circe.generic.encoding.DerivedAsObjectEncoder[A]]):io.circe.Encoder.AsObject[A]", "kind" : "final def"}, {"label" : "deriveDecoder", "tail" : "(decode: Lazy[DerivedDecoder[A]]): Decoder[A]", "member" : "io.circe.generic.semiauto.deriveDecoder", "link" : "io\/circe\/generic\/semiauto$.html#deriveDecoder[A](implicitdecode:shapeless.Lazy[io.circe.generic.decoding.DerivedDecoder[A]]):io.circe.Decoder[A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "io\/circe\/generic\/semiauto$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "io\/circe\/generic\/semiauto$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "io\/circe\/generic\/semiauto$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "io\/circe\/generic\/semiauto$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "io\/circe\/generic\/semiauto$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "io\/circe\/generic\/semiauto$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "io\/circe\/generic\/semiauto$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/semiauto$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/semiauto$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "io\/circe\/generic\/semiauto$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "io\/circe\/generic\/semiauto$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "io\/circe\/generic\/semiauto$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "io\/circe\/generic\/semiauto$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "io\/circe\/generic\/semiauto$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "io\/circe\/generic\/semiauto$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "io\/circe\/generic\/semiauto$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "io\/circe\/generic\/semiauto$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "io\/circe\/generic\/semiauto$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "io\/circe\/generic\/semiauto$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};